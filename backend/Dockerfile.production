# =====================================
# CHAT-JS BACKEND PRODUCTION DOCKERFILE
# =====================================
# Multi-stage build for optimized production image

FROM node:20-alpine AS base
# Set production environment
ENV NODE_ENV=production
WORKDIR /app

# Install production dependencies only
COPY package*.json ./
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

# Production stage
FROM node:20-alpine AS production
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Install security updates
RUN apk upgrade --no-cache

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY --from=base --chown=nextjs:nodejs /app/node_modules ./node_modules/
COPY --chown=nextjs:nodejs ./package*.json ./
COPY --chown=nextjs:nodejs . .

# Create logs directory and set permissions
RUN mkdir -p logs && chown -R nextjs:nodejs logs

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Create logs directory for Winston
RUN mkdir -p /app/logs

# Start application
CMD ["node", "server.js"]

# =====================================
# BUILD STAGE (for reference - not used in production)
# =====================================
FROM node:20-alpine AS build
WORKDIR /build
COPY package*.json ./
RUN npm ci --ignore-scripts
COPY . .
# If you have build scripts, run them here
# RUN npm run build