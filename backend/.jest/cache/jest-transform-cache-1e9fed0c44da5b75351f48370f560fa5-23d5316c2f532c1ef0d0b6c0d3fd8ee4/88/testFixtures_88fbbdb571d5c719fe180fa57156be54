c90567e8e34fed01c3872d5c6ad38f76
// Test fixtures for optimized backend testing
// This file provides reusable test data that reduces setup time

const {
  TestFixtureHelper,
  DatabaseTestHelper
} = require('./testHelpers');
const mongoose = require('mongoose');
class TestFixtures {
  static fixtureHelper = new TestFixtureHelper();
  static async setup() {
    await DatabaseTestHelper.cleanupCollections();
    await this.loadDefaultFixtures();
  }
  static async loadDefaultFixtures() {
    // Default user fixture
    await this.fixtureHelper.create('defaultUser', async helper => {
      return await helper.userHelper.createUser({
        nickname: 'test_user_fixture',
        email: 'fixture@example.com',
        role: 'user'
      });
    });

    // Default channel fixture
    await this.fixtureHelper.create('defaultChannel', async helper => {
      return await helper.channelHelper.createChannel({
        name: 'General Fixture',
        type: 'text',
        description: 'Default test channel'
      });
    });

    // Multiple users fixture for multi-user tests
    await this.fixtureHelper.create('multipleUsers', async helper => {
      const users = [];
      for (let i = 1; i <= 5; i++) {
        const user = await helper.userHelper.createUser({
          nickname: `user_fixture_${i}`,
          email: `fixture_user_${i}@example.com`
        });
        users.push(user);
      }
      return users;
    });

    // Admin user fixture
    await this.fixtureHelper.create('adminUser', async helper => {
      return await helper.userHelper.createUser({
        nickname: 'admin_fixture',
        email: 'admin_fixture@example.com',
        role: 'admin'
      });
    });
  }
  static async getUser(name = 'defaultUser') {
    return await this.fixtureHelper.load(name);
  }
  static async getChannel(name = 'defaultChannel') {
    return await this.fixtureHelper.load(name);
  }
  static async getUsers(name = 'multipleUsers') {
    return await this.fixtureHelper.load(name);
  }
  static async cleanup() {
    await this.fixtureHelper.cleanup();
  }
}
module.exports = {
  TestFixtures
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXN0Rml4dHVyZUhlbHBlciIsIkRhdGFiYXNlVGVzdEhlbHBlciIsInJlcXVpcmUiLCJtb25nb29zZSIsIlRlc3RGaXh0dXJlcyIsImZpeHR1cmVIZWxwZXIiLCJzZXR1cCIsImNsZWFudXBDb2xsZWN0aW9ucyIsImxvYWREZWZhdWx0Rml4dHVyZXMiLCJjcmVhdGUiLCJoZWxwZXIiLCJ1c2VySGVscGVyIiwiY3JlYXRlVXNlciIsIm5pY2tuYW1lIiwiZW1haWwiLCJyb2xlIiwiY2hhbm5lbEhlbHBlciIsImNyZWF0ZUNoYW5uZWwiLCJuYW1lIiwidHlwZSIsImRlc2NyaXB0aW9uIiwidXNlcnMiLCJpIiwidXNlciIsInB1c2giLCJnZXRVc2VyIiwibG9hZCIsImdldENoYW5uZWwiLCJnZXRVc2VycyIsImNsZWFudXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidGVzdEZpeHR1cmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3QgZml4dHVyZXMgZm9yIG9wdGltaXplZCBiYWNrZW5kIHRlc3Rpbmdcbi8vIFRoaXMgZmlsZSBwcm92aWRlcyByZXVzYWJsZSB0ZXN0IGRhdGEgdGhhdCByZWR1Y2VzIHNldHVwIHRpbWVcblxuY29uc3QgeyBUZXN0Rml4dHVyZUhlbHBlciwgRGF0YWJhc2VUZXN0SGVscGVyIH0gPSByZXF1aXJlKCcuL3Rlc3RIZWxwZXJzJyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5cbmNsYXNzIFRlc3RGaXh0dXJlcyB7XG4gIHN0YXRpYyBmaXh0dXJlSGVscGVyID0gbmV3IFRlc3RGaXh0dXJlSGVscGVyKCk7XG5cbiAgc3RhdGljIGFzeW5jIHNldHVwKCkge1xuICAgIGF3YWl0IERhdGFiYXNlVGVzdEhlbHBlci5jbGVhbnVwQ29sbGVjdGlvbnMoKTtcbiAgICBhd2FpdCB0aGlzLmxvYWREZWZhdWx0Rml4dHVyZXMoKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2FkRGVmYXVsdEZpeHR1cmVzKCkge1xuICAgIC8vIERlZmF1bHQgdXNlciBmaXh0dXJlXG4gICAgYXdhaXQgdGhpcy5maXh0dXJlSGVscGVyLmNyZWF0ZSgnZGVmYXVsdFVzZXInLCBhc3luYyAoaGVscGVyKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgaGVscGVyLnVzZXJIZWxwZXIuY3JlYXRlVXNlcih7XG4gICAgICAgIG5pY2tuYW1lOiAndGVzdF91c2VyX2ZpeHR1cmUnLFxuICAgICAgICBlbWFpbDogJ2ZpeHR1cmVAZXhhbXBsZS5jb20nLFxuICAgICAgICByb2xlOiAndXNlcidcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gRGVmYXVsdCBjaGFubmVsIGZpeHR1cmVcbiAgICBhd2FpdCB0aGlzLmZpeHR1cmVIZWxwZXIuY3JlYXRlKCdkZWZhdWx0Q2hhbm5lbCcsIGFzeW5jIChoZWxwZXIpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBoZWxwZXIuY2hhbm5lbEhlbHBlci5jcmVhdGVDaGFubmVsKHtcbiAgICAgICAgbmFtZTogJ0dlbmVyYWwgRml4dHVyZScsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdEZWZhdWx0IHRlc3QgY2hhbm5lbCdcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gTXVsdGlwbGUgdXNlcnMgZml4dHVyZSBmb3IgbXVsdGktdXNlciB0ZXN0c1xuICAgIGF3YWl0IHRoaXMuZml4dHVyZUhlbHBlci5jcmVhdGUoJ211bHRpcGxlVXNlcnMnLCBhc3luYyAoaGVscGVyKSA9PiB7XG4gICAgICBjb25zdCB1c2VycyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBoZWxwZXIudXNlckhlbHBlci5jcmVhdGVVc2VyKHtcbiAgICAgICAgICBuaWNrbmFtZTogYHVzZXJfZml4dHVyZV8ke2l9YCxcbiAgICAgICAgICBlbWFpbDogYGZpeHR1cmVfdXNlcl8ke2l9QGV4YW1wbGUuY29tYFxuICAgICAgICB9KTtcbiAgICAgICAgdXNlcnMucHVzaCh1c2VyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1c2VycztcbiAgICB9KTtcblxuICAgIC8vIEFkbWluIHVzZXIgZml4dHVyZVxuICAgIGF3YWl0IHRoaXMuZml4dHVyZUhlbHBlci5jcmVhdGUoJ2FkbWluVXNlcicsIGFzeW5jIChoZWxwZXIpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBoZWxwZXIudXNlckhlbHBlci5jcmVhdGVVc2VyKHtcbiAgICAgICAgbmlja25hbWU6ICdhZG1pbl9maXh0dXJlJyxcbiAgICAgICAgZW1haWw6ICdhZG1pbl9maXh0dXJlQGV4YW1wbGUuY29tJyxcbiAgICAgICAgcm9sZTogJ2FkbWluJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0VXNlcihuYW1lID0gJ2RlZmF1bHRVc2VyJykge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmZpeHR1cmVIZWxwZXIubG9hZChuYW1lKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRDaGFubmVsKG5hbWUgPSAnZGVmYXVsdENoYW5uZWwnKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZml4dHVyZUhlbHBlci5sb2FkKG5hbWUpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFVzZXJzKG5hbWUgPSAnbXVsdGlwbGVVc2VycycpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5maXh0dXJlSGVscGVyLmxvYWQobmFtZSk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY2xlYW51cCgpIHtcbiAgICBhd2FpdCB0aGlzLmZpeHR1cmVIZWxwZXIuY2xlYW51cCgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBUZXN0Rml4dHVyZXMgfTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsTUFBTTtFQUFFQSxpQkFBaUI7RUFBRUM7QUFBbUIsQ0FBQyxHQUFHQyxPQUFPLENBQUMsZUFBZSxD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