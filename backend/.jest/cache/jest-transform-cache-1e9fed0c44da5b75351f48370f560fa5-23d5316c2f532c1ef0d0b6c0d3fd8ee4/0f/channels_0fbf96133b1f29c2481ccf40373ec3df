f1276adf9e1f6fb5ae7bfa9bb3c76edb
/* istanbul ignore next */
function cov_oy3zxxp6x() {
  var path = "/home/raerlim/Chat-JS/backend/src/routes/channels.js";
  var hash = "49c73953ff807d44e8be93cafd3d9f4116b475e1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/raerlim/Chat-JS/backend/src/routes/channels.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 2,
          column: 45
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "3": {
        start: {
          line: 4,
          column: 30
        },
        end: {
          line: 4,
          column: 59
        }
      },
      "4": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 57
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "7": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 85
        }
      },
      "8": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 50,
          column: 65
        }
      },
      "9": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 103,
          column: 36
        }
      },
      "10": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 105,
          column: 95
        }
      },
      "11": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 106,
          column: 94
        }
      },
      "12": {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 107,
          column: 97
        }
      },
      "13": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 109,
          column: 24
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "49c73953ff807d44e8be93cafd3d9f4116b475e1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_oy3zxxp6x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_oy3zxxp6x();
const express =
/* istanbul ignore next */
(cov_oy3zxxp6x().s[0]++, require('express'));
const {
  body
} =
/* istanbul ignore next */
(cov_oy3zxxp6x().s[1]++, require('express-validator'));
const channelController =
/* istanbul ignore next */
(cov_oy3zxxp6x().s[2]++, require('../controllers/channelController'));
const {
  authenticateToken
} =
/* istanbul ignore next */
(cov_oy3zxxp6x().s[3]++, require('../middleware/auth'));
const {
  apiRateLimiter
} =
/* istanbul ignore next */
(cov_oy3zxxp6x().s[4]++, require('../config/rateLimit'));
const router =
/* istanbul ignore next */
(cov_oy3zxxp6x().s[5]++, express.Router());
/* istanbul ignore next */
cov_oy3zxxp6x().s[6]++;
console.log('ðŸ”§ GET /api/channels route registered at startup');

/**
 * @swagger
 * /api/channels:
 *   get:
 *     tags:
 *       - Channels
 *     summary: Get list of channels
 *     description: Retrieves a list of all available channels
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of channels
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Channel'
 *             example:
 *               - id: "general"
 *                 name: "General"
 *                 type: "text"
 *                 description: ""
 *                 createdBy: "system"
 *                 position: 0
 *       401:
 *         description: Unauthorized
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *             example:
 *               error: "Access token required"
 *       500:
 *         description: Internal server error
 */
/* istanbul ignore next */
cov_oy3zxxp6x().s[7]++;
router.get('/', authenticateToken, apiRateLimiter, channelController.getAllChannels);
/* istanbul ignore next */
cov_oy3zxxp6x().s[8]++;
console.log('ðŸ”§ POST /api/channels route registered at startup');

/**
 * @swagger
 * /api/channels:
 *   post:
 *     tags:
 *       - Channels
 *     summary: Create a new channel
 *     description: Creates a new text or voice channel
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ChannelRequest'
 *           example:
 *             name: "NewChannel"
 *             type: "text"
 *             description: "Description of the new channel"
 *     responses:
 *       201:
 *         description: Channel created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Channel'
 *             example:
 *               id: "newchannel"
 *               name: "NewChannel"
 *               type: "text"
 *               description: "Description of the new channel"
 *               createdBy: "john_doe"
 *               position: 10
 *       400:
 *         description: Invalid request data
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       401:
 *         description: Unauthorized
 *       409:
 *         description: Channel name already exists
 *       500:
 *         description: Server error
 */
/* istanbul ignore next */
cov_oy3zxxp6x().s[9]++;
router.post('/', authenticateToken, apiRateLimiter, [body('name').isLength({
  min: 1,
  max: 100
}).trim().escape(), body('type').isIn(['text', 'voice']).trim(), body('description').optional().isLength({
  max: 500
}).trim()], channelController.createChannel);
/* istanbul ignore next */
cov_oy3zxxp6x().s[10]++;
router.get('/:channelId', authenticateToken, apiRateLimiter, channelController.getChannelById);
/* istanbul ignore next */
cov_oy3zxxp6x().s[11]++;
router.put('/:channelId', authenticateToken, apiRateLimiter, channelController.updateChannel);
/* istanbul ignore next */
cov_oy3zxxp6x().s[12]++;
router.delete('/:channelId', authenticateToken, apiRateLimiter, channelController.deleteChannel);
/* istanbul ignore next */
cov_oy3zxxp6x().s[13]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,