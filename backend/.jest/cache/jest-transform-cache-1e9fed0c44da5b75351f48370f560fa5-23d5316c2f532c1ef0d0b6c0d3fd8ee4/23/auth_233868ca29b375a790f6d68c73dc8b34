eece961df335e8e1712dd9461f428204
/* istanbul ignore next */
function cov_ei9yax05h() {
  var path = "/home/raerlim/Chat-JS/backend/src/routes/auth.js";
  var hash = "50e6b0ea3f4bc484c85212b949b96920c0942fe0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/raerlim/Chat-JS/backend/src/routes/auth.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 2,
          column: 45
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 63
        }
      },
      "3": {
        start: {
          line: 4,
          column: 30
        },
        end: {
          line: 4,
          column: 59
        }
      },
      "4": {
        start: {
          line: 5,
          column: 11
        },
        end: {
          line: 5,
          column: 57
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 62
        }
      },
      "7": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 52,
          column: 25
        }
      },
      "8": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 101,
          column: 28
        }
      },
      "9": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 103,
          column: 63
        }
      },
      "10": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 104,
          column: 65
        }
      },
      "11": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 106,
          column: 61
        }
      },
      "12": {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 107,
          column: 63
        }
      },
      "13": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 109,
          column: 60
        }
      },
      "14": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 110,
          column: 67
        }
      },
      "15": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 112,
          column: 60
        }
      },
      "16": {
        start: {
          line: 113,
          column: 0
        },
        end: {
          line: 116,
          column: 33
        }
      },
      "17": {
        start: {
          line: 118,
          column: 0
        },
        end: {
          line: 118,
          column: 24
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "50e6b0ea3f4bc484c85212b949b96920c0942fe0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ei9yax05h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ei9yax05h();
const express =
/* istanbul ignore next */
(cov_ei9yax05h().s[0]++, require('express'));
const {
  body
} =
/* istanbul ignore next */
(cov_ei9yax05h().s[1]++, require('express-validator'));
const authController =
/* istanbul ignore next */
(cov_ei9yax05h().s[2]++, require('../controllers/authController'));
const {
  authenticateToken
} =
/* istanbul ignore next */
(cov_ei9yax05h().s[3]++, require('../middleware/auth'));
const {} =
/* istanbul ignore next */
(cov_ei9yax05h().s[4]++, require('../config/rateLimit').authRateLimiter);
const router =
/* istanbul ignore next */
(cov_ei9yax05h().s[5]++, express.Router());

/**
 * @swagger
 * /api/login:
 *   post:
 *     tags:
 *       - Authentication
 *     summary: Login existing user
 *     description: Authenticates and logs in an existing user with JWT token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginRequest'
 *     responses:
 *       200:
 *         description: Login successful
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AuthResponse'
 *             example:
 *               token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
 *               user:
 *                 id: "507f1f77bcf86cd799439011"
 *                 nickname: "john_doe"
 *                 email: "john@example.com"
 *                 role: "member"
 *       400:
 *         description: Invalid credentials or validation errors
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *             example:
 *               error: "Invalid credentials"
 *       500:
 *         description: Server error
 */
/* istanbul ignore next */
cov_ei9yax05h().s[6]++;
console.log('ðŸ”§ POST /api/login route registered at startup');
/* istanbul ignore next */
cov_ei9yax05h().s[7]++;
router.post('/login', [body('identifier').isLength({
  min: 1,
  max: 50
}).trim(), body('password').isLength({
  min: 6,
  max: 100
})], authController.login);

/**
 * @swagger
 * /api/register:
 *   post:
 *     tags:
 *       - Authentication
 *     summary: Register new user
 *     description: Creates a new user account and returns JWT token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RegisterRequest'
 *           example:
 *             nickname: "john_doe"
 *             email: "john@example.com"
 *             password: "securePass123"
 *     responses:
 *       201:
 *         description: Registration successful
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AuthResponse'
 *             example:
 *               token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
 *               user:
 *                 id: "507f1f77bcf86cd799439011"
 *                 nickname: "john_doe"
 *                 email: "john@example.com"
 *                 role: "member"
 *       400:
 *         description: Validation errors or user already exists
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *             example:
 *               error: "Nickname already taken"
 *       500:
 *         description: Server error
 */
/* istanbul ignore next */
cov_ei9yax05h().s[8]++;
router.post('/register', [body('nickname').isLength({
  min: 3,
  max: 50
}).trim().escape(), body('email').isEmail().normalizeEmail(), body('password').isLength({
  min: 6
})], authController.register);
/* istanbul ignore next */
cov_ei9yax05h().s[9]++;
console.log('ðŸ”§ POST /api/logout route registered at startup');
/* istanbul ignore next */
cov_ei9yax05h().s[10]++;
router.post('/logout', authenticateToken, authController.logout);
/* istanbul ignore next */
cov_ei9yax05h().s[11]++;
router.post('/logout_session', authController.logoutSession);
/* istanbul ignore next */
cov_ei9yax05h().s[12]++;
router.post('/logout_complete', authController.logoutComplete);
/* istanbul ignore next */
cov_ei9yax05h().s[13]++;
console.log('ðŸ”§ GET /api/security-status route registered');
/* istanbul ignore next */
cov_ei9yax05h().s[14]++;
router.get('/security-status', authController.checkSecurityStatus);
/* istanbul ignore next */
cov_ei9yax05h().s[15]++;
console.log('ðŸ”§ POST /api/unlock-account route registered');
/* istanbul ignore next */
cov_ei9yax05h().s[16]++;
router.post('/unlock-account', [body('identifier').isLength({
  min: 1,
  max: 50
}).trim(), body('captchaToken').isLength({
  min: 1
})], authController.unlockAccount);
/* istanbul ignore next */
cov_ei9yax05h().s[17]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,