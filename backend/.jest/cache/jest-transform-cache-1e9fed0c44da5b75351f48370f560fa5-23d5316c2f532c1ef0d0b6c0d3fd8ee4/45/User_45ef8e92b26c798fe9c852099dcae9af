fbbb8c5ae2f3d553b94ab6843d95d7b9
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const userSchema = new mongoose.Schema({
  nickname: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    minlength: 3,
    maxlength: 50
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  role: {
    type: String,
    enum: ['admin', 'member'],
    default: 'member'
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  lastActive: {
    type: Date,
    default: Date.now
  },
  status: {
    type: String,
    enum: ['online', 'offline'],
    default: 'offline'
  },
  resetPasswordToken: {
    type: String,
    default: null
  },
  resetPasswordExpires: {
    type: Date,
    default: null
  }
});

// Index for performance
userSchema.index({
  nickname: 1
});
userSchema.index({
  email: 1
});

// Hash password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  console.log('Hashing password for user:', this.nickname);
  try {
    const salt = await bcrypt.genSalt(12);
    console.log('Salt generated:', salt);
    this.password = await bcrypt.hash(this.password, salt);
    console.log('Password hashed successfully');
    next();
  } catch (error) {
    console.error('Error hashing password:', error.message);
    next(error);
  }
});

// Compare password method
userSchema.methods.comparePassword = async function (candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

// Generate reset password token
userSchema.methods.generateResetToken = function () {
  // Generate random token
  const resetToken = crypto.randomBytes(32).toString('hex');

  // Hash token before storing
  this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex');

  // Set expiration (1 hour from now)
  this.resetPasswordExpires = Date.now() + 60 * 60 * 1000; // 1 hour

  return resetToken;
};

// Reset password using token
userSchema.methods.resetPassword = function (token, newPassword) {
  const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
  if (hashedToken !== this.resetPasswordToken) {
    throw new Error('Invalid or expired password reset token');
  }
  if (Date.now() > this.resetPasswordExpires) {
    throw new Error('Password reset token has expired');
  }
  this.password = newPassword;
  this.resetPasswordToken = null;
  this.resetPasswordExpires = null;
  return this.save();
};

// Remove password from JSON output
userSchema.methods.toJSON = function () {
  const userObject = this.toObject();
  delete userObject.password;
  return userObject;
};
module.exports = mongoose.model('User', userSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,