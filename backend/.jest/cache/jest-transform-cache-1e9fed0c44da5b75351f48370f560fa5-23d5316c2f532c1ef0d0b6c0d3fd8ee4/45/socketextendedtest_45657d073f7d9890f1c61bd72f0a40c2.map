{"version":3,"names":["io","require","jwt","connectDB","closeDB","User","Channel","Message","SocketTestServer","testServer","testUser","testToken","serverPort","describe","beforeAll","process","env","JWT_SECRET","console","log","start","nickname","email","password","status","save","sign","id","_id","role","expiresIn","afterAll","stop","test","done","invalidSocket","auth","token","on","error","expect","message","toContain","disconnect","noTokenSocket","socket","clientSocket","listenerClient","emit","room","users","some","user","toBe","setTimeout","updatedUsers","secondSocket","beforeEach","secondUser","then","secondToken","afterEach","text","data","author","includes","toMatch","historyReceived","messagesReceived","messages","Array","isArray","toHaveProperty","newSocket","toEqual","thirdSocket","thirdUser","thirdToken","Promise","resolve","to","privateMsg","find","msg","toBeUndefined","systemMsgs","filter","publicMsgs","type","length","toBeGreaterThan","toBeGreaterThanOrEqual","firstRoomJoin","secondRoomJoin","every","invalidRooms","undefined","errorCount","totalTests","forEach","invalidRoom","testSocket","err","code","disconnectCount","connected","sockets","connectedCount","totalSockets","i","push","sock","voiceClientSocket","channelId","mainJoined","signallerSocket","receiverSocket","signallerUser","signallerToken","receiverUser","receiverToken","offersReceived","fromNickname","offer","toBeDefined","answer","sdp","targetSocketId","from","answerData","iceSignaller","iceReceiver","iceUser1","iceToken1","iceUser2","iceToken2","candidate","receivedCount","totalMessages","startsWith","startTime","Date","now","operationCount","targetOperations","performOperation","endTime","duration","toBeLessThan","malformedMessages","malformed","reconnectCount","operations","completedCount","totalOperations","all"],"sources":["socket-extended.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst jwt = require('jsonwebtoken');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Channel = require('../models/Channel');\nconst Message = require('../models/Message');\nconst SocketTestServer = require('./socket-server.test');\n\nlet testServer;\nlet testUser;\nlet testToken;\nlet serverPort;\n\ndescribe('Socket.IO Extended Tests - Fixed', () => {\n  beforeAll(async () => {\n    // Ensure JWT_SECRET is set for authentication\n    if (!process.env.JWT_SECRET) {\n      console.log('Setting JWT_SECRET for tests...');\n      process.env.JWT_SECRET = 'test-jwt-secret-key-for-socket-tests';\n    } else {\n      console.log('JWT_SECRET already set');\n    }\n\n    console.log('Starting database connection...');\n    await connectDB();\n    console.log('Database connected successfully');\n\n    console.log('Starting test server...');\n    testServer = new SocketTestServer();\n    serverPort = await testServer.start();\n    console.log('Test server started on port:', serverPort);\n\n    testUser = new User({\n      nickname: 'extendedSocketTestUser',\n      email: 'extended-socket@test.com',\n      password: 'testpass123',\n      status: 'online'\n    });\n    await testUser.save();\n\n    // Create JWT token\n    testToken = jwt.sign(\n      { id: testUser._id, nickname: testUser.nickname, role: testUser.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n  });\n\n  afterAll(async () => {\n    if (testServer) {\n      await testServer.stop();\n    }\n    await closeDB();\n  });\n\n  describe('Authentication Edge Cases', () => {\n    test('should reject invalid JWT token', (done) => {\n      const invalidSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: 'invalid-token' }\n      });\n\n      invalidSocket.on('connect_error', (error) => {\n        expect(error.message).toContain('Authentication');\n        invalidSocket.disconnect();\n        done();\n      });\n    });\n\n    test('should reject connection without token', (done) => {\n      const noTokenSocket = io(`http://localhost:${serverPort}`);\n\n      noTokenSocket.on('connect_error', (error) => {\n        expect(error.message).toContain('Authentication');\n        noTokenSocket.disconnect();\n        done();\n      });\n    });\n  });\n\n  describe('Disconnection Handling', () => {\n    test('should handle user disconnect gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken }\n      });\n\n      socket.on('connect', () => {\n        socket.on('disconnect', () => {\n          done();\n        });\n        socket.disconnect();\n      });\n    });\n\n    test('should remove user from online list on disconnect', (done) => {\n      let clientSocket;\n      let listenerClient;\n\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken }\n      });\n\n      clientSocket.on('connect', () => {\n        clientSocket.emit('join_room', { room: 'general' });\n\n        clientSocket.on('online_users', () => {\n          listenerClient = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken }\n          });\n\n          listenerClient.on('connect', () => {\n            listenerClient.emit('join_room', { room: 'general' });\n\n            listenerClient.on('online_users', (users) => {\n              expect(users.some(user => user.nickname === testUser.nickname)).toBe(true);\n\n              clientSocket.disconnect();\n\n              setTimeout(() => {\n                listenerClient.emit('get_online_users');\n\n                listenerClient.on('online_users', (updatedUsers) => {\n                  expect(updatedUsers.some(user => user.nickname === testUser.nickname)).toBe(false);\n                  listenerClient.disconnect();\n                  done();\n                });\n              }, 500);\n            });\n          });\n        });\n      });\n    });\n  });\n\n  describe('Private Messages - /w Command Edge Cases', () => {\n    let clientSocket;\n    let secondSocket;\n\n    beforeEach((done) => {\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken }\n      });\n\n      const secondUser = new User({\n        nickname: 'extendedTestUser2',\n        email: 'extended-test2@test.com',\n        password: 'testpass123'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        secondSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken }\n        });\n\n        secondSocket.on('connect', () => {\n          clientSocket.emit('join_room', { room: 'general' });\n          secondSocket.emit('join_room', { room: 'general' });\n          done();\n        });\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n      if (secondSocket) secondSocket.disconnect();\n    });\n\n    test('should handle /w command to invalid user', (done) => {\n      clientSocket.emit('message', { text: '/w nonexistentuser Hello' });\n\n      clientSocket.on('message', (data) => {\n        if (data.author === 'System' && data.text.includes('not found')) {\n          expect(data.text).toMatch(/User.*not found/i);\n          done();\n        }\n      });\n    });\n\n    test('should handle /w command with invalid format', (done) => {\n      clientSocket.emit('message', { text: '/w' });\n\n      clientSocket.on('message', (data) => {\n        if (data.author === 'System' && data.text.includes('Usage')) {\n          expect(data.text).toMatch(/Usage.*\\/w/i);\n          done();\n        }\n      });\n    });\n  });\n\n  describe('Message History and Archival', () => {\n    test('should receive history when joining room', (done) => {\n      let historyReceived = false;\n      let messagesReceived = false;\n\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('message', () => {\n        messagesReceived = true;\n        if (historyReceived) done();\n      });\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        expect(messages[0]).toHaveProperty('author');\n        expect(messages[0]).toHaveProperty('text');\n        expect(messages[0]).toHaveProperty('timestamp');\n        historyReceived = true;\n        if (messagesReceived) done();\n      });\n    });\n\n    test('should handle history request without room', (done) => {\n      // Create new socket without joining room\n      const newSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken }\n      });\n\n      newSocket.on('connect', () => {\n        newSocket.emit('get_history');\n        newSocket.on('history', (messages) => {\n          expect(messages).toEqual([]);\n          newSocket.disconnect();\n          done();\n        });\n      });\n    });\n\n    test('should properly calculate message visibility', async () => {\n      let secondSocket;\n      let thirdSocket;\n\n      try {\n        // Create second user\n        const secondUser = new User({\n          nickname: 'historyTestUser2',\n          email: 'history2@test.com',\n          password: 'testpass123'\n        });\n        await secondUser.save();\n\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        secondSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken }\n        });\n\n        // Create third user\n        const thirdUser = new User({\n          nickname: 'historyTestUser3',\n          email: 'history3@test.com',\n          password: 'testpass123'\n        });\n        await thirdUser.save();\n\n        const thirdToken = jwt.sign(\n          { id: thirdUser._id, nickname: thirdUser.nickname, role: thirdUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        thirdSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: thirdToken }\n        });\n\n        await new Promise((resolve) => {\n          thirdSocket.on('connect', () => {\n            resolve();\n          });\n        });\n\n        await new Promise((resolve) => {\n          thirdSocket.emit('join_room', { room: 'general' });\n          thirdSocket.on('online_users', () => {\n            resolve();\n          });\n        });\n\n        // Send private message User1 -> User2\n        clientSocket.emit('private_message', { to: 'historyTestUser2', text: 'Private test' });\n\n        await new Promise((resolve) => {\n          setTimeout(resolve, 100); // Wait for DB write\n        });\n\n        // Check history from third user's perspective (should not see private message)\n        await new Promise((resolve) => {\n          thirdSocket.emit('get_history');\n          thirdSocket.on('history', (messages) => {\n            const privateMsg = messages.find(msg => msg.text === 'Private test');\n            expect(privateMsg).toBeUndefined(); // Third user should not see private message\n            resolve();\n          });\n        });\n\n        // Check history from first user's perspective (should see their own private message)\n        await new Promise((resolve) => {\n          clientSocket.emit('get_history');\n          clientSocket.on('history', (messages) => {\n            const systemMsgs = messages.filter(msg => msg.author === 'System');\n            const publicMsgs = messages.filter(msg => msg.type === 'public');\n            expect(systemMsgs.length).toBeGreaterThan(0); // Join messages\n            expect(publicMsgs.length).toBeGreaterThanOrEqual(0);\n            resolve();\n          });\n        });\n\n      } finally {\n        if (secondSocket) secondSocket.disconnect();\n        if (thirdSocket) thirdSocket.disconnect();\n      }\n    });\n  });\n\n  describe('Room Switching and Channel Validation', () => {\n    test('should handle room switching correctly', (done) => {\n      let firstRoomJoin = false;\n      let secondRoomJoin = false;\n\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('message', (data) => {\n        if (data.text.includes('joined the channel')) {\n          if (data.text.includes('general') && !firstRoomJoin) {\n            firstRoomJoin = true;\n            setTimeout(() => {\n              clientSocket.emit('join_room', { room: 'voice-chat' });\n            }, 100);\n          }\n        }\n      });\n\n      clientSocket.on('message', (data) => {\n        if (data.text.includes('joined the channel')) {\n          if (data.text.includes('voice-chat') && firstRoomJoin && !secondRoomJoin) {\n            secondRoomJoin = true;\n            // Wait a bit then check that users lists were updated properly\n            setTimeout(() => {\n              clientSocket.emit('get_online_users');\n              clientSocket.on('online_users', (users) => {\n                expect(Array.isArray(users)).toBe(true);\n                expect(users.every(user => user.nickname && user.role)).toBe(true);\n                done();\n              });\n            }, 200);\n          }\n        }\n      });\n    });\n\n    test('should reject invalid room names', (done) => {\n      const invalidRooms = ['', null, undefined, '   ', { room: 123 }];\n\n      let errorCount = 0;\n      const totalTests = invalidRooms.length;\n\n      invalidRooms.forEach((invalidRoom) => {\n        const testSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken }\n        });\n\n        testSocket.on('connect', () => {\n          testSocket.emit('join_room', typeof invalidRoom === 'object' ? invalidRoom : { room: invalidRoom });\n          testSocket.on('error', (err) => {\n            expect(err.code).toMatch(/MISSING_ROOM|INVALID_ROOM_FORMAT|CHANNEL_NOT_FOUND/);\n            testSocket.disconnect();\n            errorCount++;\n            if (errorCount === totalTests) done();\n          });\n        });\n      });\n    });\n\n    test('should handle non-existent channel', (done) => {\n      clientSocket.emit('join_room', { room: 'non-existent-channel' });\n\n      clientSocket.on('error', (data) => {\n        if (data.message.includes('not found')) {\n          expect(data.code).toBe('CHANNEL_NOT_FOUND');\n          expect(data.room).toBe('non-existent-channel');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('Connection Management and Recovery', () => {\n    test('should handle connection recovery after disconnect', (done) => {\n      let disconnectCount = 0;\n\n      clientSocket.on('connect', () => {\n        if (disconnectCount === 1) {\n          // Second connect after disconnect\n          expect(clientSocket.connected).toBe(true);\n          done();\n        }\n      });\n\n      clientSocket.on('disconnect', () => {\n        disconnectCount++;\n        if (disconnectCount === 1) {\n          // First disconnect, now reconnect\n          setTimeout(() => {\n            const newSocket = io(`http://localhost:${serverPort}`, {\n              auth: { token: testToken }\n            });\n            clientSocket = newSocket;\n          }, 500);\n        }\n      });\n\n      clientSocket.disconnect();\n    });\n\n    test('should handle multiple rapid connections', (done) => {\n      const sockets = [];\n      let connectedCount = 0;\n      const totalSockets = 3;\n\n      for (let i = 0; i < totalSockets; i++) {\n        const socket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken }\n        });\n\n        socket.on('connect', () => {\n          connectedCount++;\n          sockets.push(socket);\n          if (connectedCount === totalSockets) {\n            // All connected successfully\n            expect(connectedCount).toBe(totalSockets);\n            sockets.forEach(sock => sock.disconnect());\n            done();\n          }\n        });\n      }\n    });\n  });\n\n  describe('Advanced Voice Channel Scenarios', () => {\n    let voiceClientSocket;\n\n    beforeEach((done) => {\n      voiceClientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken }\n      });\n\n      voiceClientSocket.on('connect', () => {\n        done();\n      });\n    });\n\n    afterEach(() => {\n      if (voiceClientSocket) voiceClientSocket.disconnect();\n    });\n\n    test('should handle voice channel without joining room first', (done) => {\n      voiceClientSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n      voiceClientSocket.on('voice_joined', (data) => {\n        expect(data.channelId).toBe('voice-chat');\n        done();\n      });\n    });\n\n    test('should reject voice channel join for text channels', (done) => {\n      voiceClientSocket.emit('join_voice_channel', { channelId: 'general' }); // This is a text channel\n\n      voiceClientSocket.on('voice_error', (data) => {\n        expect(data.message).toBe('Voice channel not found');\n        done();\n      });\n    });\n\n    test('should notify other users when joining voice channel', (done) => {\n      let mainJoined = false;\n      let secondSocket;\n\n      voiceClientSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n      voiceClientSocket.on('voice_joined', () => {\n        mainJoined = true;\n        // Create second user to join\n        const secondUser = new User({\n          nickname: 'voiceNotifyTestUser',\n          email: 'voice-notify@test.com',\n          password: 'testpass123'\n        });\n\n        secondUser.save().then(() => {\n          const secondToken = jwt.sign(\n            { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n            process.env.JWT_SECRET,\n            { expiresIn: '24h' }\n          );\n\n          secondSocket = io(`http://localhost:${serverPort}`, {\n            auth: { token: secondToken }\n          });\n\n          secondSocket.on('connect', () => {\n            secondSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n            secondSocket.on('user_joined_voice', (data) => {\n              expect(data.nickname).toBe('extendedSocketTestUser');\n              secondSocket.disconnect();\n              done();\n            });\n          });\n        });\n      });\n    });\n\n    test('should handle WebRTC signaling events correctly', (done) => {\n      let signallerSocket;\n      let receiverSocket;\n\n      // Create signaller\n      const signallerUser = new User({\n        nickname: 'signallerTestUser',\n        email: 'signaller@test.com',\n        password: 'testpass123'\n      });\n\n      signallerUser.save().then(() => {\n        const signallerToken = jwt.sign(\n          { id: signallerUser._id, nickname: signallerUser.nickname, role: signallerUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        signallerSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: signallerToken }\n        });\n\n        signallerSocket.on('connect', () => {\n          const receiverUser = new User({\n            nickname: 'receiverTestUser',\n            email: 'receiver@test.com',\n            password: 'testpass123'\n          });\n\n          receiverUser.save().then(() => {\n            const receiverToken = jwt.sign(\n              { id: receiverUser._id, nickname: receiverUser.nickname, role: receiverUser.role },\n              process.env.JWT_SECRET,\n              { expiresIn: '24h' }\n            );\n\n            receiverSocket = io(`http://localhost:${serverPort}`, {\n              auth: { token: receiverToken }\n            });\n\n            receiverSocket.on('connect', () => {\n              // Both join voice channel\n              signallerSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n              receiverSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n              let offersReceived = 0;\n\n              receiverSocket.on('voice_offer', (data) => {\n                offersReceived++;\n                if (offersReceived === 1) {\n                  expect(data.fromNickname).toBe('signallerTestUser');\n                  expect(data.offer).toBeDefined();\n\n                  // Test answer\n                  receiverSocket.emit('voice_answer', {\n                    answer: { type: 'answer', sdp: 'fake-answer-sdp' },\n                    targetSocketId: data.from\n                  });\n\n                  signallerSocket.on('voice_answer', (answerData) => {\n                    expect(answerData.fromNickname).toBe('receiverTestUser');\n                    expect(answerData.answer).toBeDefined();\n                    done();\n                  });\n                }\n              });\n            });\n          });\n        });\n      });\n    });\n\n    test('should handle ICE candidate exchange', (done) => {\n      let iceSignaller;\n      let iceReceiver;\n\n      const iceUser1 = new User({\n        nickname: 'iceTestUser1',\n        email: 'ice1@test.com',\n        password: 'testpass123'\n      });\n\n      iceUser1.save().then(() => {\n        const iceToken1 = jwt.sign(\n          { id: iceUser1._id, nickname: iceUser1.nickname, role: iceUser1.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        iceSignaller = io(`http://localhost:${serverPort}`, {\n          auth: { token: iceToken1 }\n        });\n\n        iceSignaller.on('connect', () => {\n          const iceUser2 = new User({\n            nickname: 'iceTestUser2',\n            email: 'ice2@test.com',\n            password: 'testpass123'\n          });\n\n          iceUser2.save().then(() => {\n            const iceToken2 = jwt.sign(\n              { id: iceUser2._id, nickname: iceUser2.nickname, role: iceUser2.role },\n              process.env.JWT_SECRET,\n              { expiresIn: '24h' }\n            );\n\n            iceReceiver = io(`http://localhost:${serverPort}`, {\n              auth: { token: iceToken2 }\n            });\n\n            iceReceiver.on('connect', () => {\n              iceSignaller.emit('ice_candidate', {\n                candidate: { candidate: 'fake-candidate-1' },\n                targetSocketId: iceReceiver.id\n              });\n\n              iceReceiver.on('ice_candidate', (data) => {\n                expect(data.candidate.candidate).toBe('fake-candidate-1');\n                expect(data.fromNickname).toBe('iceTestUser1');\n\n                // Test reverse ICE candidate\n                iceReceiver.emit('ice_candidate', {\n                  candidate: { candidate: 'fake-candidate-2' },\n                  targetSocketId: iceSignaller.id\n                });\n\n                iceSignaller.on('ice_candidate', (data) => {\n                  expect(data.candidate.candidate).toBe('fake-candidate-2');\n                  expect(data.fromNickname).toBe('iceTestUser2');\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n\n  describe('Rate Limiting and Performance', () => {\n    test('should handle rapid message sending', (done) => {\n      const messages = [];\n      let receivedCount = 0;\n      const totalMessages = 5;\n\n      for (let i = 0; i < totalMessages; i++) {\n        clientSocket.emit('message', { text: `Rapid message ${i + 1}` });\n      }\n\n      clientSocket.on('message', (data) => {\n        if (data.author === testUser.nickname && data.text.startsWith('Rapid message')) {\n          receivedCount++;\n          if (receivedCount === totalMessages) {\n            // All messages were processed (may be rate limited but not blocked)\n            expect(receivedCount).toBe(totalMessages);\n            done();\n          }\n        }\n      });\n    });\n\n    test('should maintain performance under load', (done) => {\n      const startTime = Date.now();\n      let operationCount = 0;\n      const targetOperations = 20;\n\n      const performOperation = () => {\n        clientSocket.emit('message', { text: `Load test ${(operationCount + 1)}` });\n        operationCount++;\n\n        if (operationCount >= targetOperations) {\n          const endTime = Date.now();\n          const duration = endTime - startTime;\n\n          // Should complete within reasonable time (allowing for rate limiting)\n          expect(duration).toBeLessThan(5000); // 5 seconds max\n          done();\n        } else {\n          setTimeout(performOperation, 50); // Small delay between operations\n        }\n      };\n\n      performOperation();\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    test('should handle malformed messages gracefully', (done) => {\n      const malformedMessages = [null, undefined, { text: '' }, { text: '   ' }, {}];\n\n      let errorCount = 0;\n      const totalTests = malformedMessages.length;\n\n      malformedMessages.forEach((malformed) => {\n        clientSocket.emit('message', malformed);\n      });\n\n      // Messages should be ignored without causing errors\n      setTimeout(() => {\n        expect(errorCount).toBe(0); // No errors should be thrown\n        done();\n      }, 1000);\n    });\n\n    test('should recover from temporary network issues', (done) => {\n      // Simulate network disruption by disconnecting and reconnecting\n      let reconnectCount = 0;\n\n      clientSocket.on('connect', () => {\n        reconnectCount++;\n        if (reconnectCount === 2) {\n          // Successfully reconnected\n          expect(clientSocket.connected).toBe(true);\n\n          // Test that functionality still works after reconnect\n          clientSocket.emit('message', { text: 'Post-reconnect test' });\n\n          clientSocket.on('message', (data) => {\n            if (data.author === testUser.nickname && data.text === 'Post-reconnect test') {\n              done();\n            }\n          });\n        }\n      });\n\n      clientSocket.on('disconnect', () => {\n        if (reconnectCount === 1) {\n          // First disconnect, now reconnect\n          setTimeout(() => {\n            const newSocket = io(`http://localhost:${serverPort}`, {\n              auth: { token: testToken }\n            });\n            clientSocket = newSocket;\n          }, 200);\n        }\n      });\n\n      // Trigger disconnect\n      clientSocket.disconnect();\n    });\n\n    test('should handle concurrent operations safely', (done) => {\n      const operations = [];\n      let completedCount = 0;\n      const totalOperations = 10;\n\n      for (let i = 0; i < totalOperations; i++) {\n        operations.push(new Promise((resolve) => {\n          clientSocket.emit('message', { text: `Concurrent op ${i + 1}` });\n          setTimeout(resolve, 50);\n        }));\n      }\n\n      Promise.all(operations).then(() => {\n        // All operations completed without deadlocks or race conditions\n        expect(completedCount).toBe(0); // This is just a sanity check\n        done();\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}