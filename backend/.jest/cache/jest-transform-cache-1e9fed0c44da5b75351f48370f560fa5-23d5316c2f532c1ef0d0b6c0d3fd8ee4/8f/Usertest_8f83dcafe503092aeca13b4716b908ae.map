{"version":3,"names":["User","require","describe","it","userData","nickname","email","password","role","user","savedUser","save","expect","toBe","toLowerCase","status","createdAt","toBeDefined","lastActive","error","err","errors","shortNickname","longNickname","repeat","shortPassword","not","toMatch","originalHash","isValid","comparePassword","code","token","generateResetToken","length","resetPasswordToken","resetPasswordExpires","getTime","toBeGreaterThan","Date","now","resetToken","hashedToken","resetPassword","toThrow","newPassword","isNewPasswordValid","toBeNull","userJSON","toJSON","beforeCreate","afterCreate","toBeGreaterThanOrEqual","toBeLessThanOrEqual"],"sources":["User.test.js"],"sourcesContent":["const User = require('../../models/User');\n\ndescribe('User Model', () => {\n  describe('User Creation and Validation', () => {\n    it('should create a user with valid data', async () => {\n      const userData = {\n        nickname: 'testuser',\n        email: 'test@example.com',\n        password: 'password123',\n        role: 'member'\n      };\n\n      const user = new User(userData);\n      const savedUser = await user.save();\n\n      expect(savedUser.nickname).toBe(userData.nickname);\n      expect(savedUser.email).toBe(userData.email.toLowerCase());\n      expect(savedUser.role).toBe(userData.role);\n      expect(savedUser.status).toBe('offline');\n      expect(savedUser.createdAt).toBeDefined();\n      expect(savedUser.lastActive).toBeDefined();\n    });\n\n    it('should require nickname, email and password', async () => {\n      const user = new User({});\n      let error;\n\n      try {\n        await user.save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.nickname).toBeDefined();\n      expect(error.errors.email).toBeDefined();\n    });\n\n    it('should enforce nickname length limits', async () => {\n      const shortNickname = 'ab'; // too short\n      let error;\n\n      try {\n        await new User({\n          nickname: shortNickname,\n          email: 'test@example.com',\n          password: 'password123'\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.nickname).toBeDefined();\n\n      const longNickname = 'a'.repeat(51); // too long\n      try {\n        await new User({\n          nickname: longNickname,\n          email: 'test@example.com',\n          password: 'password123'\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.nickname).toBeDefined();\n    });\n\n    it('should enforce password length limits', async () => {\n      const shortPassword = '12345'; // too short\n      let error;\n\n      try {\n        await new User({\n          nickname: 'testuser',\n          email: 'test@example.com',\n          password: shortPassword\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.password).toBeDefined();\n    });\n  });\n\n  describe('Password Hashing', () => {\n    it('should hash password before saving', async () => {\n      const password = 'testpassword123';\n      const user = await new User({\n        nickname: 'hashuser',\n        email: 'hash@example.com',\n        password: password\n      }).save();\n\n      // Password should be hashed, not stored in plain text\n      expect(user.password).not.toBe(password);\n      expect(user.password).toMatch(/^\\$2[aby]\\$/); // bcrypt hash format\n    });\n\n    it('should not rehash password if not modified', async () => {\n      const user = await new User({\n        nickname: 'norehash',\n        email: 'norehash@example.com',\n        password: 'original'\n      }).save();\n\n      const originalHash = user.password;\n\n      // Update a non-password field\n      user.role = 'admin';\n      await user.save();\n\n      // Password hash should remain the same\n      expect(user.password).toBe(originalHash);\n    });\n  });\n\n  describe('Password Comparison', () => {\n    it('should correctly compare valid password', async () => {\n      const password = 'testpassword123';\n      const user = await new User({\n        nickname: 'compuser',\n        email: 'comp@example.com',\n        password: password\n      }).save();\n\n      const isValid = await user.comparePassword(password);\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject invalid password', async () => {\n      const user = await new User({\n        nickname: 'wrongpass',\n        email: 'wrong@example.com',\n        password: 'correctpass'\n      }).save();\n\n      const isValid = await user.comparePassword('wrongpass');\n      expect(isValid).toBe(false);\n    });\n  });\n\n  describe('Unique Constraints', () => {\n    it('should enforce unique nicknames', async () => {\n      await new User({\n        nickname: 'uniqueuser',\n        email: 'first@example.com',\n        password: 'password123'\n      }).save();\n\n      let error;\n      try {\n        await new User({\n          nickname: 'uniqueuser', // duplicate\n          email: 'second@example.com',\n          password: 'password123'\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      if (error.code === 11000) {\n        expect(error.code).toBe(11000); // MongoDB duplicate key error\n      }\n    });\n\n    it('should enforce unique emails', async () => {\n      await new User({\n        nickname: 'firstuser',\n        email: 'unique@example.com',\n        password: 'password123'\n      }).save();\n\n      let error;\n      try {\n        await new User({\n          nickname: 'seconduser',\n          email: 'unique@example.com', // duplicate\n          password: 'password123'\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      if (error.code === 11000) {\n        expect(error.code).toBe(11000); // MongoDB duplicate key error\n      }\n    });\n  });\n\n  describe('User Roles', () => {\n    it('should default to member role', async () => {\n      const user = await new User({\n        nickname: 'memberuser',\n        email: 'member@example.com',\n        password: 'password123'\n      }).save();\n\n      expect(user.role).toBe('member');\n    });\n\n    it('should allow admin role', async () => {\n      const user = await new User({\n        nickname: 'adminuser',\n        email: 'admin@example.com',\n        password: 'password123',\n        role: 'admin'\n      }).save();\n\n      expect(user.role).toBe('admin');\n    });\n\n    it('should reject invalid roles', async () => {\n      let error;\n      try {\n        await new User({\n          nickname: 'invalidrole',\n          email: 'invalid@example.com',\n          password: 'password123',\n          role: 'invalid'\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.role).toBeDefined();\n    });\n  });\n\n  describe('User Status', () => {\n    it('should default to offline status', async () => {\n      const user = await new User({\n        nickname: 'offlineuser',\n        email: 'offline@example.com',\n        password: 'password123'\n      }).save();\n\n      expect(user.status).toBe('offline');\n    });\n\n    it('should allow online status', async () => {\n      const user = await new User({\n        nickname: 'onlineuser',\n        email: 'online@example.com',\n        password: 'password123',\n        status: 'online'\n      }).save();\n\n      expect(user.status).toBe('online');\n    });\n\n    it('should reject invalid status values', async () => {\n      let error;\n      try {\n        await new User({\n          nickname: 'invalidstatus',\n          email: 'invalid@example.com',\n          password: 'password123',\n          status: 'away' // invalid status\n        }).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.status).toBeDefined();\n    });\n  });\n\n  describe('Email Normalization', () => {\n    it('should convert email to lowercase', async () => {\n      const user = await new User({\n        nickname: 'lowercase',\n        email: 'USER@EXAMPLE.COM',\n        password: 'password123'\n      }).save();\n\n      expect(user.email).toBe('user@example.com');\n    });\n\n    it('should trim email whitespace', async () => {\n      const user = await new User({\n        nickname: 'trimemail',\n        email: '  user@example.com  ',\n        password: 'password123'\n      }).save();\n\n      expect(user.email).toBe('user@example.com');\n    });\n  });\n\n  describe('Password Reset Token', () => {\n    it('should generate reset password token', async () => {\n      const user = await new User({\n        nickname: 'resettoken',\n        email: 'reset@example.com',\n        password: 'password123'\n      }).save();\n\n      const token = user.generateResetToken();\n\n      expect(token).toBeDefined();\n      expect(typeof token).toBe('string');\n      expect(token.length).toBe(64); // hex representation of 32 bytes\n      expect(user.resetPasswordToken).toBeDefined();\n      expect(user.resetPasswordExpires).toBeDefined();\n      expect(user.resetPasswordExpires.getTime()).toBeGreaterThan(Date.now());\n    });\n\n    it('should expire reset token after 1 hour', async () => {\n      const user = await new User({\n        nickname: 'expiretoken',\n        email: 'expire@example.com',\n        password: 'password123'\n      }).save();\n\n      const resetToken = user.generateResetToken();\n      await user.save();\n\n      // Manually set expiry to past (but keep the hashed token)\n      const hashedToken = user.resetPasswordToken;\n      user.resetPasswordExpires = new Date(Date.now() - 1000);\n      await user.save();\n\n      expect(() => {\n        user.resetPassword(resetToken, 'newpassword');\n      }).toThrow('Password reset token has expired');\n    });\n\n    it('should reject invalid reset token', async () => {\n      const user = await new User({\n        nickname: 'invalidtoken',\n        email: 'invalidtoken@example.com',\n        password: 'password123'\n      }).save();\n\n      user.generateResetToken();\n      await user.save();\n\n      expect(() => {\n        user.resetPassword('invalidtoken123', 'newpassword');\n      }).toThrow('Invalid or expired password reset token');\n    });\n\n    it('should successfully reset password with valid token', async () => {\n      const user = await new User({\n        nickname: 'validreset',\n        email: 'validreset@example.com',\n        password: 'password123'\n      }).save();\n\n      const resetToken = user.generateResetToken();\n      await user.save();\n\n      const newPassword = 'newsecurepassword';\n      await user.resetPassword(resetToken, newPassword);\n\n      // Verify new password works\n      const isNewPasswordValid = await user.comparePassword(newPassword);\n      expect(isNewPasswordValid).toBe(true);\n\n      // Verify token is cleared\n      expect(user.resetPasswordToken).toBeNull();\n      expect(user.resetPasswordExpires).toBeNull();\n    });\n  });\n\n  describe('JSON Serialization', () => {\n    it('should exclude password from JSON output', async () => {\n      const user = await new User({\n        nickname: 'jsonuser',\n        email: 'json@example.com',\n        password: 'password123'\n      }).save();\n\n      const userJSON = user.toJSON();\n\n      expect('password' in userJSON).toBe(false);\n      expect(userJSON.nickname).toBeDefined();\n      expect(userJSON.email).toBeDefined();\n      expect(userJSON.role).toBeDefined();\n    });\n\n    it('should include all non-sensitive fields in JSON', async () => {\n      const user = await new User({\n        nickname: 'completeuser',\n        email: 'complete@example.com',\n        password: 'password123',\n        role: 'admin'\n      }).save();\n\n      const userJSON = user.toJSON();\n\n      expect(userJSON.nickname).toBe('completeuser');\n      expect(userJSON.email).toBe('complete@example.com');\n      expect(userJSON.role).toBe('admin');\n      expect(userJSON.status).toBe('offline');\n      expect(userJSON.createdAt).toBeDefined();\n      expect(userJSON.lastActive).toBeDefined();\n    });\n  });\n\n  describe('Timestamps', () => {\n    it('should set createdAt timestamp', async () => {\n      const beforeCreate = new Date();\n      const user = await new User({\n        nickname: 'timestampuser',\n        email: 'timestamp@example.com',\n        password: 'password123'\n      }).save();\n      const afterCreate = new Date();\n\n      expect(user.createdAt).toBeDefined();\n      expect(user.createdAt.getTime()).toBeGreaterThanOrEqual(beforeCreate.getTime());\n      expect(user.createdAt.getTime()).toBeLessThanOrEqual(afterCreate.getTime());\n    });\n\n    it('should set lastActive timestamp', async () => {\n      const user = await new User({\n        nickname: 'activetimestamp',\n        email: 'active@example.com',\n        password: 'password123'\n      }).save();\n\n      expect(user.lastActive).toBeDefined();\n      expect(user.lastActive.getTime()).toBeGreaterThanOrEqual(user.createdAt.getTime());\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}