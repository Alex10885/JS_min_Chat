{"version":3,"names":["require","config","express","http","socketIo","jwt","cors","winston","swaggerJsdoc","swaggerUi","helmet","rateLimit","body","validationResult","mongoose","connectDB","closeDB","emailService","User","Message","Channel","logger","createLogger","level","format","combine","timestamp","errors","stack","json","defaultMeta","service","transports","File","filename","Console","colorize","simple","app","server","createServer","authRateLimiter","windowMs","max","process","env","NODE_ENV","CYPRESS_API_SKIP","message","error","standardHeaders","legacyHeaders","skip","req","get","includes","apiRateLimiter","generalRateLimiter","passwordResetRateLimiter","io","origin","methods","allowedHeaders","engine","on","err","console","log","code","httpStatus","status","headers","use","ALLOWED_ORIGINS","split","credentials","limit","errorHandler","res","next","url","method","ip","userAgent","name","Object","values","map","e","field","path","value","details","keys","keyValue","requestId","id","start","Date","now","duration","info","statusCode","user","nickname","JSON","stringify","undefined","authenticateToken","authHeader","token","hasAuthHeader","hasToken","decoded","verify","JWT_SECRET","userId","findById","_id","warn","contentSecurityPolicy","directives","defaultSrc","styleSrc","fontSrc","imgSrc","scriptSrc","connectSrc","crossOriginEmbedderPolicy","swaggerOptions","definition","openapi","title","version","description","contact","servers","components","schemas","type","properties","minLength","maxLength","email","role","enum","default","createdAt","lastActive","required","createdBy","position","RegisterRequest","password","LoginRequest","identifier","AuthResponse","$ref","ChannelRequest","ErrorResponse","items","msg","param","location","securitySchemes","bearerAuth","scheme","bearerFormat","security","apis","swaggerSpec","removeHeader","serve","setup","setHeader","send","post","authLimiterStore","store","resetAll","success","toISOString","uptime","isLength","min","trim","hasPassword","isEmpty","array","findOne","$or","isPasswordValid","comparePassword","save","sign","expiresIn","escape","isEmail","normalizeEmail","existingUser","conflictField","errorMessage","authorization","channels","find","select","sort","channelCount","length","onlineUsers","Map","userConnections","voiceChannels","socket","handshake","auth","Error","connectionCount","newConnectionCount","set","updateResult","findOneAndUpdate","$set","new","runValidators","connections","socketId","statusUpdateError","cleanupInactiveConnections","timeout","entries","lastHeartbeat","sockets","disconnect","connectionsLeft","Math","findByIdAndUpdate","catch","delete","setInterval","room","size","updateHeartbeat","data","emit","channel","leave","previousRoomUsers","Array","from","filter","u","to","join","joinMessage","author","text","roomUsers","history","target","messageData","debug","trimmedText","targetNickname","senderRoom","senderSocketId","targetUser","targetFound","targetRoom","onlineUsersInRoom","onlineUsersInSenderRoom","availableUsers","targetSocketId","sender","messageId","onlineUsersCount","messageLength","speaking","channelId","has","channelPeers","peerConnection","stream","voiceChannel","offer","fromNickname","answer","candidate","currentCount","newCount","leaveMessage","remainingConnections","initializeServer","defaultChannels","channelData","upsert","PORT","listen","exit","close"],"sources":["server.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst winston = require('winston');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoose = require('mongoose');\nconst { connectDB, closeDB } = require('./db/connection');\nconst emailService = require('./services/emailService');\n\n// Import models\nconst User = require('./models/User');\nconst Message = require('./models/Message');\nconst Channel = require('./models/Channel');\n\n// Logger setup\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'chat-server' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/server.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\nconst app = express();\nconst server = http.createServer(app);\n\n// Rate limiting configuration\nconst authRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: process.env.NODE_ENV === 'test' || process.env.CYPRESS_API_SKIP ? 10000 : 5, // High limit for tests and Cypress\n  message: { error: 'Too many authentication attempts, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skip: (req) => {\n    // Skip rate limiting for Cypress tests (detected by user-agent or specific headers)\n    return req.get('User-Agent') && req.get('User-Agent').includes('Cypress');\n  }\n});\n\nconst apiRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 API requests per windowMs\n  message: { error: 'Too many requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst generalRateLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 1000, // Limit each IP to 1000 requests per windowMs\n  message: { error: 'Too many requests from this IP, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst passwordResetRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 3, // Limit each IP to 3 password reset requests per windowMs\n  message: { error: 'Too many password reset requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"],\n    allowedHeaders: [\"authorization\", \"content-type\"]\n  },\n  // Ensure both transports are supported\n  transports: ['websocket', 'polling']\n});\n\n// Log socket connection errors for debugging\nio.engine.on('connection_error', (err) => {\n  console.log('🔌 Socket engine connection error:', err.code, err.message);\n  logger.error('Socket connection error:', {\n    code: err.code,\n    message: err.message,\n    httpStatus: err.status,\n    headers: err.req?.headers\n  });\n});\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production'\n    ? process.env.ALLOWED_ORIGINS?.split(',') || false\n    : true,\n  credentials: true\n}));\n\napp.use(express.json({ limit: '10mb' })); // Add payload size limit\n\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n  logger.error('Unhandled error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  // Mongoose validation errors\n  if (err.name === 'ValidationError') {\n    const errors = Object.values(err.errors).map(e => ({\n      field: e.path,\n      message: e.message,\n      value: e.value\n    }));\n\n    return res.status(422).json({\n      error: 'Validation failed',\n      details: errors,\n      code: 'VALIDATION_ERROR'\n    });\n  }\n\n  // Mongoose duplicate key error\n  if (err.code === 11000) {\n    const field = Object.keys(err.keyValue)[0];\n    const value = err.keyValue[field];\n    return res.status(409).json({\n      error: `${field} '${value}' already exists`,\n      code: 'DUPLICATE_ERROR'\n    });\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      error: 'Invalid or expired token',\n      code: 'INVALID_TOKEN'\n    });\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      error: 'Token has expired',\n      code: 'TOKEN_EXPIRED'\n    });\n  }\n\n  // Default server error\n  res.status(500).json({\n    error: 'Internal server error',\n    code: 'INTERNAL_ERROR',\n    requestId: req.id || 'unknown'\n  });\n};\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    logger.info(`${req.method} ${req.url} - ${res.statusCode} (${duration}ms)`, {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      user: req.user?.nickname || 'anonymous',\n      body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined\n    });\n  });\n\n  next();\n});\n\n// JWT authentication middleware\nconst authenticateToken = async (req, res, next) => {\n  try {\n    console.log('🔐 JWT authentication middleware called:', { url: req.url, method: req.method });\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n    console.log('🔑 Token extraction result:', { hasAuthHeader: !!authHeader, hasToken: !!token });\n\n    if (!token) {\n      console.log('❌ No token provided');\n      return res.status(401).json({\n        error: 'Access token required',\n        code: 'NO_TOKEN'\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    console.log('✅ JWT decoded:', { userId: decoded.userId, nickname: decoded.nickname });\n    const user = await User.findById(decoded.userId);\n\n    if (!user) {\n      console.log('❌ User not found in DB for JWT userId:', decoded.userId);\n      return res.status(401).json({\n        error: 'User not found',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    req.user = user;\n    console.log('✅ JWT authentication successful for user:', user.nickname, { id: user._id, status: user.status });\n    next();\n  } catch (error) {\n    logger.warn('JWT authentication failed:', {\n      error: error.message,\n      ip: req.ip\n    });\n\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: 'Invalid token format',\n        code: 'INVALID_TOKEN_FORMAT'\n      });\n    }\n\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Token has expired',\n        code: 'TOKEN_EXPIRED'\n      });\n    }\n\n    return res.status(401).json({\n      error: 'Token verification failed',\n      code: 'TOKEN_VERIFICATION_FAILED'\n    });\n  }\n};\n\n// General rate limiting (applied to all HTTP requests)\napp.use(generalRateLimiter);\n\n// Helmet security headers\napp.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        connectSrc: [\"'self'\"]\n      }\n    },\n    crossOriginEmbedderPolicy: false\n  })\n);\n\n// Swagger configuration\nconst swaggerOptions = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Chat-JS API',\n      version: '1.0.0',\n      description: 'REST API for Chat-JS application with real-time messaging and voice channels',\n      contact: {\n        name: 'Chat-JS Support'\n      }\n    },\n    servers: [\n      {\n        url: 'http://localhost:3001',\n        description: 'Development server'\n      }\n    ],\n    components: {\n      schemas: {\n        User: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'User unique identifier'\n            },\n            nickname: {\n              type: 'string',\n              description: 'User nickname',\n              minLength: 3,\n              maxLength: 50\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'User email address'\n            },\n            role: {\n              type: 'string',\n              enum: ['admin', 'member'],\n              default: 'member',\n              description: 'User role'\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              description: 'User creation timestamp'\n            },\n            lastActive: {\n              type: 'string',\n              format: 'date-time',\n              description: 'Last activity timestamp'\n            },\n            status: {\n              type: 'string',\n              enum: ['online', 'offline'],\n              description: 'User online status'\n            }\n          },\n          required: ['nickname', 'email', 'password', 'role']\n        },\n        Channel: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Channel unique identifier (auto-generated from name)'\n            },\n            name: {\n              type: 'string',\n              description: 'Channel display name',\n              minLength: 1,\n              maxLength: 100\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              description: 'Channel description',\n              maxLength: 500\n            },\n            createdBy: {\n              type: 'string',\n              description: 'Creator nickname'\n            },\n            position: {\n              type: 'number',\n              default: 0,\n              description: 'Channel display position'\n            }\n          },\n          required: ['id', 'name', 'type', 'createdBy']\n        },\n        RegisterRequest: {\n          type: 'object',\n          required: ['nickname', 'email', 'password'],\n          properties: {\n            nickname: {\n              type: 'string',\n              minLength: 3,\n              maxLength: 50,\n              description: 'Unique username'\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'Valid email address'\n            },\n            password: {\n              type: 'string',\n              minLength: 6,\n              description: 'User password'\n            }\n          }\n        },\n        LoginRequest: {\n          type: 'object',\n          required: ['identifier', 'password'],\n          properties: {\n            identifier: {\n              type: 'string',\n              description: 'Username or email'\n            },\n            password: {\n              type: 'string',\n              description: 'User password'\n            }\n          }\n        },\n        AuthResponse: {\n          type: 'object',\n          properties: {\n            token: {\n              type: 'string',\n              description: 'JWT access token'\n            },\n            user: {\n              $ref: '#/components/schemas/User'\n            }\n          }\n        },\n        ChannelRequest: {\n          type: 'object',\n          required: ['name', 'type'],\n          properties: {\n            name: {\n              type: 'string',\n              minLength: 1,\n              maxLength: 100,\n              description: 'Channel display name'\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              maxLength: 500,\n              description: 'Optional channel description'\n            }\n          }\n        },\n        ErrorResponse: {\n          type: 'object',\n          properties: {\n            error: {\n              type: 'string',\n              description: 'Error message'\n            },\n            errors: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  msg: { type: 'string' },\n                  param: { type: 'string' },\n                  location: { type: 'string' }\n                }\n              },\n              description: 'Validation errors array'\n            }\n          }\n        }\n      },\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT'\n        }\n      }\n    },\n    security: [\n      {\n        bearerAuth: []\n      }\n    ]\n  },\n  apis: ['./server.js'] // Path to the API routes\n};\n\nconst swaggerSpec = swaggerJsdoc(swaggerOptions);\n\n// Swagger UI with CSP disabled for this route\napp.use('/api-docs', (req, res, next) => {\n  // Disable CSP for Swagger UI\n  res.removeHeader('Content-Security-Policy');\n  next();\n}, swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n// Swagger JSON endpoint\napp.get('/api-docs.json', (req, res) => {\n  res.removeHeader('Content-Security-Policy');\n  res.setHeader('Content-Type', 'application/json');\n  res.send(swaggerSpec);\n});\n\n// Development and test endpoint to reset rate limiting\napp.post('/api/reset-ratelimit', (req, res) => {\n  // In a real application, you'd want to get the store from the limiter instance\n  // For express-rate-limit v7+, you can access the store like this:\n  try {\n    const authLimiterStore = authRateLimiter.store;\n    if (authLimiterStore && typeof authLimiterStore.resetAll === 'function') {\n      authLimiterStore.resetAll();\n      console.log('🔄 Rate limiting reset for testing purposes');\n      res.json({ success: true, message: 'Rate limiting has been reset' });\n    } else {\n      // If store doesn't expose resetAll, create a temporary workaround\n      console.log('⚠️ Rate limiter store doesn\\'t support resetAll - rate limiting will expire naturally');\n      res.json({ success: false, message: 'Cannot reset rate limiting automatically, wait for timeout' });\n    }\n  } catch (error) {\n    console.log('❌ Error resetting rate limiting:', error.message);\n    res.status(500).json({ success: false, error: 'Failed to reset rate limiting' });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Log middleware to check incoming requests\napp.use((req, res, next) => {\n  logger.info(`🔍 Incoming request: ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    headers: req.headers\n  });\n  next();\n});\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n   * @swagger\n   * /api/login:\n   *   post:\n   *     tags:\n   *       - Authentication\n   *     summary: Login existing user\n   *     description: Authenticates and logs in an existing user with JWT token\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             $ref: '#/components/schemas/LoginRequest'\n   *     responses:\n   *       200:\n   *         description: Login successful\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/AuthResponse'\n   *             example:\n   *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n   *               user:\n   *                 id: \"507f1f77bcf86cd799439011\"\n   *                 nickname: \"john_doe\"\n   *                 email: \"john@example.com\"\n   *                 role: \"member\"\n   *       400:\n   *         description: Invalid credentials or validation errors\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/ErrorResponse'\n   *             example:\n   *               error: \"Invalid credentials\"\n   *       500:\n   *         description: Server error\n   */\nconsole.log('🔧 POST /api/login route registered at startup');\napp.post('/api/login', [\n  body('identifier').isLength({ min: 1, max: 50 }).trim(),\n  body('password').isLength({ min: 6, max: 100 })\n], async (req, res) => {\n  try {\n    console.log('🔑 Incoming login request:', { identifier: req.body.identifier, hasPassword: !!req.body.password, ip: req.ip });\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      console.log('❌ Login validation errors:', errors.array());\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { identifier, password } = req.body;\n    console.log('🔍 Searching for user with identifier:', identifier);\n\n    // Find user by nickname or email\n    const user = await User.findOne({\n      $or: [{ nickname: identifier }, { email: identifier }]\n    });\n\n    if (!user) {\n      console.log('❌ User not found:', identifier);\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    console.log('✅ User found:', { nickname: user.nickname, email: user.email, status: user.status });\n\n    // Compare password\n    const isPasswordValid = await user.comparePassword(password);\n    console.log('🔑 Password validation result:', isPasswordValid);\n\n    if (!isPasswordValid) {\n      console.log('❌ Invalid password for user:', user.nickname);\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    // Update user status to online\n    user.status = 'online';\n    await user.save();\n\n    // Generate JWT token\n    console.log('🔏 Generating JWT token for user:', user.nickname);\n    const token = jwt.sign(\n      { userId: user._id, nickname: user.nickname, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n    console.log('✅ JWT token generated successfully');\n\n    logger.info(`User logged in: ${user.nickname}`);\n\n    console.log('📤 Sending login response');\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    logger.error('Login error:', error);\n    res.status(500).json({ error: 'Server error during login' });\n  }\n});\n\n/**\n   * @swagger\n   * /api/register:\n  *   post:\n  *     tags:\n  *       - Authentication\n  *     summary: Register new user\n  *     description: Creates a new user account and returns JWT token\n  *     requestBody:\n  *       required: true\n  *       content:\n  *         application/json:\n  *           schema:\n  *             $ref: '#/components/schemas/RegisterRequest'\n  *           example:\n  *             nickname: \"john_doe\"\n  *             email: \"john@example.com\"\n  *             password: \"securePass123\"\n  *     responses:\n  *       201:\n  *         description: Registration successful\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/AuthResponse'\n  *             example:\n  *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  *               user:\n  *                 id: \"507f1f77bcf86cd799439011\"\n  *                 nickname: \"john_doe\"\n  *                 email: \"john@example.com\"\n  *                 role: \"member\"\n  *       400:\n  *         description: Validation errors or user already exists\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/ErrorResponse'\n  *             example:\n  *               error: \"Nickname already taken\"\n  *       500:\n  *         description: Server error\n  */\napp.post('/api/register', authRateLimiter, [\n  body('nickname').isLength({ min: 3, max: 50 }).trim().escape(),\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { nickname, email, password } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({\n      $or: [{ nickname }, { email }]\n    });\n\n    if (existingUser) {\n      const conflictField = existingUser.nickname === nickname ? 'nickname' : 'email';\n      const errorMessage = conflictField === 'nickname' ? 'Nickname already taken' : 'Email already registered';\n      return res.status(409).json({ error: errorMessage });\n    }\n\n    // Create user\n    const user = new User({ nickname, email, password, role: 'member', status: 'online' });\n    await user.save();\n\n    console.log('JWT_SECRET present:', !!process.env.JWT_SECRET);\n    const token = jwt.sign(\n      { userId: user._id, nickname: user.nickname, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    console.log('JWT token generated successfully');\n    logger.info(`User registered: ${user.nickname}`);\n\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    logger.error('Registration error:', error);\n    res.status(500).json({ error: 'Server error during registration' });\n  }\n});\n\n/**\n * @swagger\n * /api/channels:\n *   get:\n *     tags:\n *       - Channels\n *     summary: Get list of channels\n *     description: Retrieves a list of all available channels\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of channels\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Channel'\n *             example:\n *               - id: \"general\"\n *                 name: \"General\"\n *                 type: \"text\"\n *                 description: \"\"\n *                 createdBy: \"system\"\n *                 position: 0\n *       401:\n *         description: Unauthorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *             example:\n *               error: \"Access token required\"\n *       500:\n *         description: Internal server error\n */\nconsole.log('🔧 GET /api/channels route registered at startup');\napp.get('/api/channels', authenticateToken, apiRateLimiter, async (req, res) => {\n  console.log('🚀 GET /api/channels endpoint called', { method: req.method, url: req.url, headers: req.headers.authorization ? 'auth header present' : 'no auth header' });\n  try {\n    const channels = await Channel.find({})\n      .select('-_id id name type description createdBy position')\n      .sort({ position: 1 });\n\n    logger.info(`Channels list requested by ${req.user.nickname}`, {\n      userId: req.user._id,\n      channelCount: channels.length\n    });\n\n    console.log('📤 Returning channels data:', channels.length);\n    res.json(channels);\n  } catch (error) {\n    logger.error('Error fetching channels:', error);\n    console.error('❌ Error in GET /api/channels:', error.message);\n    res.status(500).json({ error: 'Failed to fetch channels', code: 'DATABASE_ERROR' });\n  }\n});\n\n// 404 handler (must be before global error handler)\napp.use((req, res) => {\n  console.warn('❌ Final 404 handler executed - route not found!', { method: req.method, url: req.url });\n  logger.warn(`404 - ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  res.status(404).json({\n    error: 'Endpoint not found',\n    path: req.url,\n    method: req.method,\n    code: 'NOT_FOUND'\n  });\n});\n\n// Global error handling middleware (must be last)\napp.use(errorHandler);\n\n\n\n\n\n\n\n\n\n// Global users map for socket management {socketId: {userId, nickname, room}}\nlet onlineUsers = new Map();\n\n// User connection counter {userId: connectionCount}\nlet userConnections = new Map();\n\n// Voice channels management\nconst voiceChannels = new Map(); // channelId -> { socketId: { peerConnection, stream } }\n\nio.use(async (socket, next) => {\n  const token = socket.handshake.auth.token;\n  console.log('🔑 Socket authentication attempt, token present:', !!token);\n\n  if (!token) {\n    console.log('❌ Socket authentication failed: No token provided');\n    return next(new Error('Authentication token required'));\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n\n    console.log(`✅ Socket auth success: ${decoded.nickname}, user found: ${!!user}`);\n\n    if (!user) {\n      console.log('❌ Socket authentication failed: User not found');\n      return next(new Error('User not found or not online'));\n    }\n\n    // Check if user is marked as offline during authentication\n    if (user.status === 'offline') {\n      console.log('❌ Socket authentication failed: User is offline');\n      return next(new Error('User not found or not online'));\n    }\n\n    // Handle user status update based on connection count\n    try {\n      const userId = decoded.userId;\n      const connectionCount = userConnections.get(userId) || 0;\n      const newConnectionCount = connectionCount + 1;\n      userConnections.set(userId, newConnectionCount);\n\n      // Update user status with connection count tracking\n      const updateResult = await User.findOneAndUpdate(\n        { _id: userId },\n        {\n          $set: {\n            status: newConnectionCount > 0 ? 'online' : 'offline',\n            lastActive: new Date()\n          }\n        },\n        {\n          new: true,\n          runValidators: true\n        }\n      );\n\n      if (updateResult) {\n        console.log(`🔄 Socket auth: User ${user.nickname} status set to online (connections: ${newConnectionCount})`);\n        logger.info(`User status updated to online via socket auth`, {\n          userId: userId,\n          nickname: user.nickname,\n          connections: newConnectionCount,\n          socketId: socket.id,\n          timestamp: new Date()\n        });\n      }\n\n      // Override local user object with updated data\n      user.status = updateResult ? updateResult.status : 'online';\n      user.lastActive = updateResult ? updateResult.lastActive : new Date();\n\n    } catch (statusUpdateError) {\n      console.error(`❌ Socket auth: Failed to update user status for ${user.nickname}:`, statusUpdateError.message);\n      logger.error(`Status update failed during socket auth`, {\n        userId: userId,\n        nickname: user.nickname,\n        error: statusUpdateError.message,\n        socketId: socket.id\n      });\n\n      // Don't fail auth due to status update error - proceed with default online status\n      console.log(`⚠️ Socket auth: Proceeding with online status despite update failure`);\n      user.status = 'online';\n      user.lastActive = new Date();\n    }\n\n    socket.userId = decoded.userId;\n    socket.nickname = decoded.nickname;\n    socket.role = decoded.role;\n    console.log(`🎉 Socket fully authenticated: ${socket.nickname}`);\n    return next();\n  } catch (err) {\n    console.error('❌ Socket authentication error:', err.message);\n\n    if (err.name === 'JsonWebTokenError') {\n      return next(new Error('Invalid authentication token'));\n    }\n\n    if (err.name === 'TokenExpiredError') {\n      return next(new Error('Authentication token has expired'));\n    }\n\n    return next(new Error('Authentication failed'));\n  }\n});\n\n/**\n * Cleanup inactive connections based on heartbeat\n */\nfunction cleanupInactiveConnections() {\n  const now = Date.now();\n  const timeout = 60000; // 60 seconds timeout\n\n  for (const [socketId, user] of onlineUsers.entries()) {\n    if (now - user.lastHeartbeat > timeout) {\n      console.log(`🧹 Cleansing dead connection for user ${user.nickname}`);\n\n      // Force disconnect socket\n      const socket = io.sockets.sockets.get(socketId);\n      if (socket) {\n        socket.disconnect(true);\n      }\n\n      // Update user connections count\n      const connectionsLeft = (userConnections.get(user.userId) || 0) - 1;\n      userConnections.set(user.userId, Math.max(0, connectionsLeft));\n\n      // Set status to offline if last connection\n      if (connectionsLeft <= 0) {\n        User.findByIdAndUpdate(user.userId, {\n          status: 'offline',\n          lastActive: new Date()\n        }).catch(err => logger.error('Error updating status on cleanup:', err));\n\n        console.log(`🔄 User ${user.nickname} status set to offline (dead connection)`);\n        logger.info(`User status set to offline due to dead connection`, {\n          userId: user.userId,\n          nickname: user.nickname,\n          socketId: socketId\n        });\n      }\n\n      onlineUsers.delete(socketId);\n    }\n  }\n}\n\n// Run cleanup every 30 seconds - DISABLED for test environment\nif (process.env.NODE_ENV !== 'test') {\n  setInterval(cleanupInactiveConnections, 30000);\n}\n\nio.on('connection', async (socket) => {\n  console.log('🚀 Socket connection established');\n  console.log(`👤 User ${socket.nickname} connected`);\n\n  // Track online user\n  onlineUsers.set(socket.id, {\n    userId: socket.userId,\n    nickname: socket.nickname,\n    role: socket.role,\n    room: null,\n    lastHeartbeat: Date.now()\n  });\n\n  // Log current active connections count\n  console.log(`📊 Active socket connections: ${onlineUsers.size} - auth success for ${socket.nickname}`);\n\n  // Heartbeat mechanism\n  socket.on('heartbeat', () => {\n    const user = onlineUsers.get(socket.id);\n    if (user) {\n      user.lastHeartbeat = Date.now();\n      console.log(`💓 Heartbeat received from user ${socket.nickname}`);\n    }\n  });\n\n  // Update heartbeat on user activity\n  const updateHeartbeat = () => {\n    const user = onlineUsers.get(socket.id);\n    if (user) {\n      user.lastHeartbeat = Date.now();\n    }\n  };\n\n  socket.on('join_room', async (data) => {\n    updateHeartbeat();\n    const { room } = data;\n    if (!room) {\n      logger.warn('Join room failed: No room specified', {\n        userId: socket.userId,\n        nickname: socket.nickname\n      });\n      socket.emit('error', {\n        message: 'Room name is required',\n        code: 'MISSING_ROOM',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    if (typeof room !== 'string' || room.trim().length === 0) {\n      logger.warn('Join room failed: Invalid room format', {\n        userId: socket.userId,\n        nickname: socket.nickname,\n        room\n      });\n      socket.emit('error', {\n        message: 'Invalid room name format',\n        code: 'INVALID_ROOM_FORMAT',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    try {\n      // Verify channel exists\n      const channel = await Channel.findOne({ id: room });\n      if (!channel) {\n        logger.warn('Join room failed: Channel not found', {\n          userId: socket.userId,\n          nickname: socket.nickname,\n          room\n        });\n        socket.emit('error', {\n          message: `Channel '${room}' not found`,\n          code: 'CHANNEL_NOT_FOUND',\n          room,\n          timestamp: new Date().toISOString()\n        });\n        return;\n      }\n\n      // Leave previous room\n      if (socket.room) {\n        socket.leave(socket.room);\n        onlineUsers.set(socket.id, { ...onlineUsers.get(socket.id), room: null });\n\n        // Update online users in previous room\n        const previousRoomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', previousRoomUsers);\n      }\n\n      socket.room = room;\n      socket.join(socket.room);\n\n      // Update user tracking\n      onlineUsers.set(socket.id, {\n        ...onlineUsers.get(socket.id),\n        room: socket.room\n      });\n\n      logger.info(`User ${socket.nickname} joined room ${socket.room}`);\n\n      // Send system message about joining\n      const joinMessage = new Message({\n        author: 'System',\n        channel: socket.room,\n        text: `${socket.nickname} joined the channel.`,\n        type: 'system'\n      });\n      await joinMessage.save();\n\n      io.to(socket.room).emit('message', {\n        author: joinMessage.author,\n        channel: joinMessage.channel,\n        text: joinMessage.text,\n        type: joinMessage.type,\n        timestamp: joinMessage.timestamp\n      });\n\n      // Send online users in current room\n      const roomUsers = Array.from(onlineUsers.values())\n        .filter(u => u.room === socket.room)\n        .map(u => ({ nickname: u.nickname, role: u.role }));\n      io.to(socket.room).emit('online_users', roomUsers);\n\n      // Send message history\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n\n    } catch (error) {\n      logger.error('Error in join_room:', error);\n      socket.emit('error', { message: 'Failed to join room' });\n    }\n  });\n\n  // Load history (fallback, if needed)\n  socket.on('get_history', async () => {\n    if (!socket.room) {\n      socket.emit('history', []);\n      return;\n    }\n\n    try {\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel, // Using channel instead of room for consistency\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n    } catch (error) {\n      logger.error('Error getting history:', error);\n      socket.emit('error', { message: 'Failed to load message history' });\n    }\n  });\n\n  // Public message\n  socket.on('message', async (data) => {\n    updateHeartbeat();\n    if (!socket.room || !data.text?.trim()) return;\n\n    try {\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: data.text.trim(),\n        type: 'public'\n      });\n\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel, // Keeping 'room' for frontend compatibility\n        text: message.text,\n        timestamp: message.timestamp,\n        status: 'delivered',\n        type: message.type\n      };\n\n      io.to(socket.room).emit('message', messageData);\n      logger.debug(`Message saved from ${socket.nickname} in ${socket.room}`);\n    } catch (error) {\n      logger.error('Error saving message:', error);\n      socket.emit('error', { message: 'Failed to send message' });\n    }\n  });\n\n  // Private message\n  socket.on('private_message', async (data) => {\n    updateHeartbeat();\n    if (!socket.room || !data.to || !data.text?.trim()) return;\n\n    const trimmedText = data.text.trim();\n    const targetNickname = data.to.trim();\n\n    try {\n      logger.debug(`Private message attempt from ${socket.nickname} to ${targetNickname}`, {\n        senderRoom: socket.room,\n        senderSocketId: socket.id,\n        userId: socket.userId\n      });\n\n      // Validate target nickname format\n      if (targetNickname.length === 0 || targetNickname.length > 50) {\n        socket.emit('error', {\n          message: 'Invalid target user nickname',\n          code: 'INVALID_TARGET_NICKNAME'\n        });\n        return;\n      }\n\n      // Prevent self-messaging\n      if (targetNickname === socket.nickname) {\n        socket.emit('error', {\n          message: 'Cannot send private message to yourself',\n          code: 'SELF_MESSAGE_NOT_ALLOWED'\n        });\n        return;\n      }\n\n      // Find target user in same room with detailed logging\n      const targetUser = Array.from(onlineUsers.values()).find(\n        u => u.nickname === targetNickname && u.room === socket.room\n      );\n\n      logger.debug(`Private message target search result for ${targetNickname}`, {\n        targetFound: !!targetUser,\n        targetRoom: targetUser?.room,\n        senderRoom: socket.room,\n        onlineUsersInRoom: Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, room: u.room }))\n      });\n\n      if (!targetUser) {\n        // Enhanced error message with more context\n        const onlineUsersInSenderRoom = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => u.nickname);\n\n        socket.emit('error', {\n          message: `User '${targetNickname}' is not available in this channel. Available users: ${onlineUsersInSenderRoom.join(', ') || 'none'}`,\n          code: 'TARGET_USER_NOT_IN_ROOM',\n          target: targetNickname,\n          availableUsers: onlineUsersInSenderRoom,\n          senderRoom: socket.room\n        });\n        return;\n      }\n\n      // Create message object\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'private',\n        target: targetNickname\n      });\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: message.target,\n        status: 'delivered'\n      };\n\n      // Send to target user with error handling\n      const targetSocketId = Array.from(onlineUsers.keys()).find(\n        id => onlineUsers.get(id).nickname === targetNickname\n      );\n\n      if (targetSocketId) {\n        io.to(targetSocketId).emit('private_message', messageData);\n        logger.debug(`Private message sent to target ${targetNickname}`, {\n          targetSocketId: targetSocketId,\n          sender: socket.nickname,\n          room: socket.room,\n          messageId: message._id\n        });\n      } else {\n        logger.warn(`Target user ${targetNickname} found in onlineUsers but socket ID not found`, {\n          targetNickname,\n          room: socket.room,\n          onlineUsersCount: onlineUsers.size,\n          messageId: message._id\n        });\n        // Message still saved to database for later delivery if user reconnects\n      }\n\n      // Send confirmation to sender (without target for privacy)\n      socket.emit('private_message', {\n        author: message.author,\n        room: message.room,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: null, // Hide target from sender's confirmation\n        status: 'sent'\n      });\n\n      logger.info(`Private message sent successfully`, {\n        sender: socket.nickname,\n        target: targetNickname,\n        room: socket.room,\n        messageId: message._id,\n        messageLength: trimmedText.length\n      });\n\n    } catch (error) {\n      logger.error('Error sending private message:', {\n        error: error.message,\n        sender: socket.nickname,\n        target: data.to,\n        room: socket.room,\n        userId: socket.userId,\n        stack: error.stack\n      });\n      socket.emit('error', {\n        message: 'Failed to send private message',\n        code: 'PRIVATE_MESSAGE_FAILED'\n      });\n    }\n  });\n\n  // Speaking\n  socket.on('speaking', (data) => {\n    updateHeartbeat();\n    socket.to(socket.room).emit('speaking', { nickname: socket.nickname, speaking: data.speaking });\n  });\n\n  // Voice channel events\n  socket.on('join_voice_channel', async (data) => {\n    updateHeartbeat();\n    const { channelId } = data;\n    if (!channelId) return;\n\n    try {\n      // Verify channel exists and is voice\n      const channel = await Channel.findOne({ id: channelId, type: 'voice' });\n      if (!channel) {\n        socket.emit('voice_error', { message: 'Voice channel not found' });\n        return;\n      }\n\n      // Initialize voice channel if not exists\n      if (!voiceChannels.has(channelId)) {\n        voiceChannels.set(channelId, new Map());\n      }\n\n      const channelPeers = voiceChannels.get(channelId);\n\n      // Notify others in the channel\n      socket.to(channelId).emit('user_joined_voice', { nickname: socket.nickname, socketId: socket.id });\n\n      // Add socket to voice channel room\n      socket.join(channelId);\n      channelPeers.set(socket.id, { peerConnection: null, stream: null });\n\n      // Update user's voice channel status\n      socket.voiceChannel = channelId;\n\n      logger.info(`User ${socket.nickname} joined voice channel ${channelId}`);\n      socket.emit('voice_joined', { channelId });\n\n    } catch (error) {\n      logger.error('Error joining voice channel:', error);\n      socket.emit('voice_error', { message: 'Failed to join voice channel' });\n    }\n  });\n\n  socket.on('leave_voice_channel', () => {\n    updateHeartbeat();\n    if (!socket.voiceChannel) return;\n\n    const channelId = socket.voiceChannel;\n    const channelPeers = voiceChannels.get(channelId);\n\n    if (channelPeers) {\n      channelPeers.delete(socket.id);\n      if (channelPeers.size === 0) {\n        voiceChannels.delete(channelId);\n      }\n    }\n\n    // Notify others\n    socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n\n    socket.leave(channelId);\n    socket.voiceChannel = null;\n\n    logger.info(`User ${socket.nickname} left voice channel ${channelId}`);\n    socket.emit('voice_left');\n  });\n\n  socket.on('voice_offer', (data) => {\n    const { offer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_offer', {\n      offer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('voice_answer', (data) => {\n    const { answer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_answer', {\n      answer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('ice_candidate', (data) => {\n    const { candidate, targetSocketId } = data;\n    socket.to(targetSocketId).emit('ice_candidate', {\n      candidate,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  // Disconnect\n  socket.on('disconnect', async () => {\n    logger.info(`User ${socket.nickname} disconnected`);\n\n    try {\n      const userId = socket.userId;\n\n      // Decrease connection count for this user\n      if (userId) {\n        const currentCount = userConnections.get(userId) || 0;\n        const newCount = Math.max(0, currentCount - 1);\n        userConnections.set(userId, newCount);\n\n        logger.info(`User ${socket.nickname} disconnected (remaining connections: ${newCount})`, {\n          userId: userId,\n          socketId: socket.id,\n          connectionsLeft: newCount\n        });\n      }\n\n      // Leave voice channel if in one\n      if (socket.voiceChannel) {\n        const channelId = socket.voiceChannel;\n        const channelPeers = voiceChannels.get(channelId);\n\n        if (channelPeers) {\n          channelPeers.delete(socket.id);\n          if (channelPeers.size === 0) {\n            voiceChannels.delete(channelId);\n          }\n        }\n\n        // Notify others\n        socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n      }\n\n      if (socket.room) {\n        socket.leave(socket.room);\n\n        // Create leave message\n        const leaveMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} left the channel.`,\n          type: 'system'\n        });\n        await leaveMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: leaveMessage.author,\n          room: leaveMessage.channel,\n          text: leaveMessage.text,\n          type: leaveMessage.type,\n          timestamp: leaveMessage.timestamp\n        });\n\n        // Update online users list\n        const roomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room && u.userId !== socket.userId)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', roomUsers);\n      }\n\n      // Remove from tracking\n      onlineUsers.delete(socket.id);\n\n      // Log current connections after disconnect\n      logger.info(`After disconnect, active socket connections: ${onlineUsers.size}`);\n\n      // Update user status in database if this was the last connection\n      if (userId) {\n        const remainingConnections = userConnections.get(userId) || 0;\n        if (remainingConnections === 0) {\n          await User.findByIdAndUpdate(userId, {\n            status: 'offline',\n            lastActive: new Date()\n          });\n          console.log(`🔄 User ${socket.nickname} status set to offline (last connection)`);\n          logger.info(`User status set to offline (last connection)`, {\n            userId: userId,\n            nickname: socket.nickname\n          });\n        } else {\n          // Update lastActive but keep status online\n          await User.findByIdAndUpdate(userId, {\n            lastActive: new Date()\n          });\n          console.log(`✅ User ${socket.nickname} still online (${remainingConnections} connections left)`);\n          logger.info(`User remains online`, {\n            userId: userId,\n            nickname: socket.nickname,\n            connectionsLeft: remainingConnections\n          });\n        }\n      }\n\n    } catch (error) {\n      logger.error('Error in disconnect handler:', error);\n    }\n });\n});\n\n// Initialize database and start server (duplicate removed)\nconst initializeServer = async () => {\n  try {\n    // Connect to MongoDB\n    await connectDB();\n\n    // Create default channels if they don't exist\n    const defaultChannels = [\n      { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n      { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' }\n    ];\n\n    for (const channelData of defaultChannels) {\n      await Channel.findOneAndUpdate(\n        { id: channelData.id },\n        channelData,\n        { upsert: true, new: true }\n      );\n    }\n\n    logger.info('Default channels initialized');\n\n    // Start server\n    const PORT = process.env.PORT || 3001;\n    server.listen(PORT, '0.0.0.0', () => {\n      logger.info(`Server running on port ${PORT}`);\n      console.log(`Server running on port ${PORT}`);\n    });\n\n  } catch (error) {\n    logger.error('Failed to initialize server:', error);\n    process.exit(1);\n  }\n};\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  logger.info('Received SIGINT, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGTERM', async () => {\n  logger.info('Received SIGTERM, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\n// Start the server\ninitializeServer().catch(err => {\n  logger.error('Unhandled error during server startup:', err);\n  process.exit(1);\n});\n"],"mappings":"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","ignoreList":[]}