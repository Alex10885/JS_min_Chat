033df3edfb44a1fa811f6314def14e7d
/* istanbul ignore next */
function cov_2n41ah2l4d() {
  var path = "/home/raerlim/Chat-JS/backend/src/controllers/userController.js";
  var hash = "d2d49ebf055d5a7268adb18b01168038eb7d5195";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/raerlim/Chat-JS/backend/src/controllers/userController.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 20
        },
        end: {
          line: 1,
          column: 54
        }
      },
      "1": {
        start: {
          line: 2,
          column: 19
        },
        end: {
          line: 2,
          column: 48
        }
      },
      "2": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 25
        }
      },
      "3": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "4": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 51
        }
      },
      "5": {
        start: {
          line: 13,
          column: 6
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "6": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 18,
          column: 60
        }
      },
      "7": {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "8": {
        start: {
          line: 21,
          column: 6
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "9": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 65
        }
      },
      "10": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 87
        }
      },
      "11": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "12": {
        start: {
          line: 29,
          column: 19
        },
        end: {
          line: 29,
          column: 48
        }
      },
      "13": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "14": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 32,
          column: 68
        }
      },
      "15": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "17": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 66
        }
      },
      "18": {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 44,
          column: 87
        }
      },
      "19": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "20": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 50,
          column: 35
        }
      },
      "21": {
        start: {
          line: 51,
          column: 35
        },
        end: {
          line: 51,
          column: 43
        }
      },
      "22": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 53,
          column: 90
        }
      },
      "23": {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "24": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "25": {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 73,
          column: 54
        }
      },
      "26": {
        start: {
          line: 74,
          column: 6
        },
        end: {
          line: 78,
          column: 7
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 55
        }
      },
      "28": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 62
        }
      },
      "29": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "30": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 84,
          column: 35
        }
      },
      "31": {
        start: {
          line: 86,
          column: 25
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "32": {
        start: {
          line: 88,
          column: 6
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "33": {
        start: {
          line: 93,
          column: 6
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "34": {
        start: {
          line: 102,
          column: 6
        },
        end: {
          line: 102,
          column: 56
        }
      },
      "35": {
        start: {
          line: 103,
          column: 6
        },
        end: {
          line: 103,
          column: 62
        }
      },
      "36": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "37": {
        start: {
          line: 109,
          column: 25
        },
        end: {
          line: 109,
          column: 35
        }
      },
      "38": {
        start: {
          line: 110,
          column: 35
        },
        end: {
          line: 110,
          column: 43
        }
      },
      "39": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 91
        }
      },
      "40": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 113,
          column: 30
        }
      },
      "41": {
        start: {
          line: 115,
          column: 6
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "42": {
        start: {
          line: 122,
          column: 6
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "43": {
        start: {
          line: 137,
          column: 6
        },
        end: {
          line: 137,
          column: 54
        }
      },
      "44": {
        start: {
          line: 138,
          column: 6
        },
        end: {
          line: 142,
          column: 7
        }
      },
      "45": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 55
        }
      },
      "46": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 63
        }
      },
      "47": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "48": {
        start: {
          line: 148,
          column: 25
        },
        end: {
          line: 148,
          column: 35
        }
      },
      "49": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 40
        }
      },
      "50": {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 153,
          column: 7
        }
      },
      "51": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 78
        }
      },
      "52": {
        start: {
          line: 155,
          column: 6
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "53": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 93
        }
      },
      "54": {
        start: {
          line: 159,
          column: 25
        },
        end: {
          line: 159,
          column: 88
        }
      },
      "55": {
        start: {
          line: 161,
          column: 6
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "56": {
        start: {
          line: 168,
          column: 6
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "57": {
        start: {
          line: 177,
          column: 6
        },
        end: {
          line: 177,
          column: 60
        }
      },
      "58": {
        start: {
          line: 178,
          column: 6
        },
        end: {
          line: 182,
          column: 7
        }
      },
      "59": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 55
        }
      },
      "60": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 70
        }
      },
      "61": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 214,
          column: 5
        }
      },
      "62": {
        start: {
          line: 188,
          column: 25
        },
        end: {
          line: 188,
          column: 35
        }
      },
      "63": {
        start: {
          line: 189,
          column: 27
        },
        end: {
          line: 189,
          column: 35
        }
      },
      "64": {
        start: {
          line: 191,
          column: 25
        },
        end: {
          line: 191,
          column: 83
        }
      },
      "65": {
        start: {
          line: 193,
          column: 6
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "66": {
        start: {
          line: 199,
          column: 6
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "67": {
        start: {
          line: 208,
          column: 6
        },
        end: {
          line: 208,
          column: 53
        }
      },
      "68": {
        start: {
          line: 209,
          column: 6
        },
        end: {
          line: 213,
          column: 7
        }
      },
      "69": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 55
        }
      },
      "70": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 63
        }
      },
      "71": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 238,
          column: 5
        }
      },
      "72": {
        start: {
          line: 219,
          column: 25
        },
        end: {
          line: 219,
          column: 35
        }
      },
      "73": {
        start: {
          line: 220,
          column: 25
        },
        end: {
          line: 220,
          column: 75
        }
      },
      "74": {
        start: {
          line: 222,
          column: 6
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "75": {
        start: {
          line: 227,
          column: 6
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "76": {
        start: {
          line: 236,
          column: 6
        },
        end: {
          line: 236,
          column: 55
        }
      },
      "77": {
        start: {
          line: 237,
          column: 6
        },
        end: {
          line: 237,
          column: 63
        }
      },
      "78": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 242,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 2
          },
          end: {
            line: 5,
            column: 3
          }
        },
        loc: {
          start: {
            line: 5,
            column: 16
          },
          end: {
            line: 7,
            column: 3
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 3
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 25,
            column: 3
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        loc: {
          start: {
            line: 27,
            column: 36
          },
          end: {
            line: 46,
            column: 3
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        loc: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 80,
            column: 3
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 28
          },
          end: {
            line: 105,
            column: 3
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 107,
            column: 2
          },
          end: {
            line: 107,
            column: 3
          }
        },
        loc: {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 144,
            column: 3
          }
        },
        line: 107
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        },
        loc: {
          start: {
            line: 146,
            column: 33
          },
          end: {
            line: 184,
            column: 3
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 186,
            column: 2
          },
          end: {
            line: 186,
            column: 3
          }
        },
        loc: {
          start: {
            line: 186,
            column: 27
          },
          end: {
            line: 215,
            column: 3
          }
        },
        line: 186
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 217,
            column: 2
          },
          end: {
            line: 217,
            column: 3
          }
        },
        loc: {
          start: {
            line: 217,
            column: 29
          },
          end: {
            line: 239,
            column: 3
          }
        },
        line: 217
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 43
          }
        }, {
          start: {
            line: 29,
            column: 47
          },
          end: {
            line: 29,
            column: 48
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 45
          }
        }, {
          start: {
            line: 30,
            column: 49
          },
          end: {
            line: 30,
            column: 51
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 6
          },
          end: {
            line: 78,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 6
          },
          end: {
            line: 78,
            column: 7
          }
        }, {
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 78,
            column: 7
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 128,
            column: 19
          },
          end: {
            line: 128,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 30
          },
          end: {
            line: 128,
            column: 61
          }
        }, {
          start: {
            line: 128,
            column: 64
          },
          end: {
            line: 128,
            column: 68
          }
        }],
        line: 128
      },
      "4": {
        loc: {
          start: {
            line: 138,
            column: 6
          },
          end: {
            line: 142,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 6
          },
          end: {
            line: 142,
            column: 7
          }
        }, {
          start: {
            line: 140,
            column: 13
          },
          end: {
            line: 142,
            column: 7
          }
        }],
        line: 138
      },
      "5": {
        loc: {
          start: {
            line: 151,
            column: 6
          },
          end: {
            line: 153,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 6
          },
          end: {
            line: 153,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "6": {
        loc: {
          start: {
            line: 155,
            column: 6
          },
          end: {
            line: 157,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 6
          },
          end: {
            line: 157,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "7": {
        loc: {
          start: {
            line: 155,
            column: 10
          },
          end: {
            line: 155,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 11
          },
          end: {
            line: 155,
            column: 30
          }
        }, {
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 155,
            column: 59
          }
        }, {
          start: {
            line: 155,
            column: 64
          },
          end: {
            line: 155,
            column: 89
          }
        }],
        line: 155
      },
      "8": {
        loc: {
          start: {
            line: 178,
            column: 6
          },
          end: {
            line: 182,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 6
          },
          end: {
            line: 182,
            column: 7
          }
        }, {
          start: {
            line: 180,
            column: 13
          },
          end: {
            line: 182,
            column: 7
          }
        }],
        line: 178
      },
      "9": {
        loc: {
          start: {
            line: 209,
            column: 6
          },
          end: {
            line: 213,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 6
          },
          end: {
            line: 213,
            column: 7
          }
        }, {
          start: {
            line: 211,
            column: 13
          },
          end: {
            line: 213,
            column: 7
          }
        }],
        line: 209
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d2d49ebf055d5a7268adb18b01168038eb7d5195"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2n41ah2l4d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2n41ah2l4d();
const userService =
/* istanbul ignore next */
(cov_2n41ah2l4d().s[0]++, require('../services/userService'));
const {
  logger
} =
/* istanbul ignore next */
(cov_2n41ah2l4d().s[1]++, require('../middleware/auth'));
class UserController {
  constructor() {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[0]++;
    cov_2n41ah2l4d().s[2]++;
    this.logger = logger;
  }
  async getAllUsers(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[1]++;
    cov_2n41ah2l4d().s[3]++;
    try {
      const users =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[4]++, await userService.getAllUsers());
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[5]++;
      logger.info(`Users list requested by ${req.user.nickname}`, {
        userId: req.user._id,
        totalUsers: users.length
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[6]++;
      console.log('📤 Returning users data:', users.length);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[7]++;
      res.json(users);
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[8]++;
      this.logger.error('Error fetching users:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[9]++;
      console.error('❌ Error in GET /api/users:', error.message);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[10]++;
      res.status(500).json({
        error: 'Failed to fetch users',
        code: 'DATABASE_ERROR'
      });
    }
  }
  async getUsersPaginated(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[2]++;
    cov_2n41ah2l4d().s[11]++;
    try {
      const page =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[12]++,
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[0][0]++, parseInt(req.query.page)) ||
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[0][1]++, 1));
      const limit =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[13]++,
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[1][0]++, parseInt(req.query.limit)) ||
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[1][1]++, 50));
      const result =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[14]++, await userService.getUsersForAdmin(page, limit));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[15]++;
      logger.info(`Admin user list requested by ${req.user.nickname}`, {
        adminId: req.user._id,
        page,
        limit,
        total: result.pagination.total
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[16]++;
      res.json(result);
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[17]++;
      this.logger.error('Error fetching users for admin:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[18]++;
      res.status(500).json({
        error: 'Failed to fetch users',
        code: 'DATABASE_ERROR'
      });
    }
  }
  async banUser(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[3]++;
    cov_2n41ah2l4d().s[19]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[20]++, req.params);
      const {
        reason,
        duration
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[21]++, req.body);
      const targetUser =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[22]++, await userService.banUser(req.user._id, userId, reason, duration));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[23]++;
      logger.info(`User ${targetUser.nickname} banned by ${req.user.nickname}`, {
        bannedUserId: userId,
        bannedById: req.user._id,
        reason,
        duration
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[24]++;
      res.json({
        message: `User ${targetUser.nickname} has been banned`,
        user: {
          id: targetUser._id,
          nickname: targetUser.nickname,
          banned: true,
          banReason: reason,
          banExpires: targetUser.banExpires
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[25]++;
      this.logger.error('Error banning user:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[26]++;
      if (error.message === 'User not found') {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[2][0]++;
        cov_2n41ah2l4d().s[27]++;
        res.status(404).json({
          error: error.message
        });
      } else {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[2][1]++;
        cov_2n41ah2l4d().s[28]++;
        res.status(500).json({
          error: 'Failed to ban user'
        });
      }
    }
  }
  async unbanUser(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[4]++;
    cov_2n41ah2l4d().s[29]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[30]++, req.params);
      const targetUser =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[31]++, await userService.unbanUser(userId));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[32]++;
      logger.info(`User ${targetUser.nickname} unbanned by ${req.user.nickname}`, {
        unbannedUserId: userId,
        unbannedById: req.user._id
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[33]++;
      res.json({
        message: `User ${targetUser.nickname} has been unbanned`,
        user: {
          id: targetUser._id,
          nickname: targetUser.nickname,
          banned: false
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[34]++;
      this.logger.error('Error unbanning user:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[35]++;
      res.status(500).json({
        error: 'Failed to unban user'
      });
    }
  }
  async warnUser(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[5]++;
    cov_2n41ah2l4d().s[36]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[37]++, req.params);
      const {
        reason,
        duration
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[38]++, req.body);
      const targetUser =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[39]++, await userService.warnUser(req.user._id, userId, reason, duration));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[40]++;
      await targetUser.save();
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[41]++;
      logger.info(`Warning issued to user ${targetUser.nickname} by ${req.user.nickname}`, {
        warnedUserId: userId,
        warnedById: req.user._id,
        reason,
        duration
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[42]++;
      res.json({
        message: `Warning issued to user ${targetUser.nickname}`,
        warning: {
          reason,
          issuedBy: req.user.nickname,
          issuedAt: new Date(),
          expires: duration ?
          /* istanbul ignore next */
          (cov_2n41ah2l4d().b[3][0]++, new Date(Date.now() + duration)) :
          /* istanbul ignore next */
          (cov_2n41ah2l4d().b[3][1]++, null)
        },
        user: {
          id: targetUser._id,
          nickname: targetUser.nickname,
          warningsCount: targetUser.getActiveWarningsCount()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[43]++;
      this.logger.error('Error warning user:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[44]++;
      if (error.message === 'User not found') {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[4][0]++;
        cov_2n41ah2l4d().s[45]++;
        res.status(404).json({
          error: error.message
        });
      } else {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[4][1]++;
        cov_2n41ah2l4d().s[46]++;
        res.status(500).json({
          error: 'Failed to warn user'
        });
      }
    }
  }
  async changeUserRole(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[6]++;
    cov_2n41ah2l4d().s[47]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[48]++, req.params);
      const {
        role: newRole
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[49]++, req.body);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[50]++;
      if (req.user._id.toString() === userId) {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[5][0]++;
        cov_2n41ah2l4d().s[51]++;
        return res.status(400).json({
          error: 'Cannot modify your own role'
        });
      } else
      /* istanbul ignore next */
      {
        cov_2n41ah2l4d().b[5][1]++;
      }
      cov_2n41ah2l4d().s[52]++;
      if ((
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[7][0]++, newRole === 'admin') ||
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[7][1]++, req.user.role !== 'admin')) &&
      /* istanbul ignore next */
      (cov_2n41ah2l4d().b[7][2]++, req.user.role !== 'admin')) {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[6][0]++;
        cov_2n41ah2l4d().s[53]++;
        return res.status(403).json({
          error: 'Only administrators can manage admin roles'
        });
      } else
      /* istanbul ignore next */
      {
        cov_2n41ah2l4d().b[6][1]++;
      }
      const targetUser =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[54]++, await userService.changeUserRole(req.user._id, userId, newRole));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[55]++;
      logger.info(`User ${targetUser.nickname} role changed to ${newRole} by ${req.user.nickname}`, {
        changedUserId: userId,
        changedById: req.user._id,
        oldRole: targetUser.role,
        newRole
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[56]++;
      res.json({
        message: `User ${targetUser.nickname} role changed to ${newRole}`,
        user: {
          id: targetUser._id,
          nickname: targetUser.nickname,
          role: newRole
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[57]++;
      this.logger.error('Error changing user role:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[58]++;
      if (error.message === 'User not found') {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[8][0]++;
        cov_2n41ah2l4d().s[59]++;
        res.status(404).json({
          error: error.message
        });
      } else {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[8][1]++;
        cov_2n41ah2l4d().s[60]++;
        res.status(500).json({
          error: 'Failed to change user role'
        });
      }
    }
  }
  async muteUser(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[7]++;
    cov_2n41ah2l4d().s[61]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[62]++, req.params);
      const {
        duration
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[63]++, req.body);
      const targetUser =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[64]++, await userService.muteUser(req.user._id, userId, duration));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[65]++;
      logger.info(`User ${targetUser.nickname} muted by ${req.user.nickname}`, {
        mutedUserId: userId,
        mutedById: req.user._id,
        duration
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[66]++;
      res.json({
        message: `User ${targetUser.nickname} has been muted`,
        user: {
          id: targetUser._id,
          nickname: targetUser.nickname,
          muteExpires: targetUser.muteExpires
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[67]++;
      this.logger.error('Error muting user:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[68]++;
      if (error.message === 'User not found') {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[9][0]++;
        cov_2n41ah2l4d().s[69]++;
        res.status(404).json({
          error: error.message
        });
      } else {
        /* istanbul ignore next */
        cov_2n41ah2l4d().b[9][1]++;
        cov_2n41ah2l4d().s[70]++;
        res.status(500).json({
          error: 'Failed to mute user'
        });
      }
    }
  }
  async unmuteUser(req, res) {
    /* istanbul ignore next */
    cov_2n41ah2l4d().f[8]++;
    cov_2n41ah2l4d().s[71]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[72]++, req.params);
      const targetUser =
      /* istanbul ignore next */
      (cov_2n41ah2l4d().s[73]++, await userService.unmuteUser(req.user._id, userId));
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[74]++;
      logger.info(`User ${targetUser.nickname} unmuted by ${req.user.nickname}`, {
        unmutedUserId: userId,
        unmutedById: req.user._id
      });
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[75]++;
      res.json({
        message: `User ${targetUser.nickname} has been unmuted`,
        user: {
          id: targetUser._id,
          nickname: targetUser.nickname,
          muteExpires: null
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[76]++;
      this.logger.error('Error unmuting user:', error);
      /* istanbul ignore next */
      cov_2n41ah2l4d().s[77]++;
      res.status(500).json({
        error: 'Failed to unmute user'
      });
    }
  }
}
/* istanbul ignore next */
cov_2n41ah2l4d().s[78]++;
module.exports = new UserController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,