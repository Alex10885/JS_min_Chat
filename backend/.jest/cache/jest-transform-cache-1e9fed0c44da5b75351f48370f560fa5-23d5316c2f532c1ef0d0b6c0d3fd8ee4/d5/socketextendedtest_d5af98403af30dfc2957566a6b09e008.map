{"version":3,"names":["io","require","jwt","connectDB","closeDB","User","Channel","Message","SocketTestServer","waitForEvent","socket","eventName","timeout","retryCount","Promise","resolve","reject","resolved","attempts","cleanup","off","eventHandler","clearTimeout","timeoutId","data","tryWait","setTimeout","Error","once","waitForSocketConnection","connected","connectHandler","errorHandler","error","message","on","simulateLatency","latency","originalEmit","emit","bind","args","retryOperation","operation","maxRetries","delay","attempt","testServer","testUser","testToken","serverPort","describe","beforeAll","jest","start","nickname","email","password","status","save","findOneAndUpdate","id","name","type","createdBy","upsert","new","console","warn","sign","_id","role","process","env","JWT_SECRET","expiresIn","afterAll","stop","test","invalidSocket","auth","token","forceNew","caughtError","expect","rejects","toThrow","toBeTruthy","disconnect","noTokenSocket","clientSocket","secondSocket","beforeEach","done","secondUser","then","secondToken","room","afterEach","privateMessage","all","to","text","senderData","receiverData","toBe","author","from","history","Array","isArray","length","toHaveProperty","messages","code","reconnection","reconnectionDelay","newSocket","totalSockets","sockets","connectionPromises","_","i","push","forEach","sock","channelId","startTime","Date","now","operationCount","targetOperations","performOperation","endTime","duration","toBeLessThan","malformedMessages","undefined","malformed","reconnectionAttempts","mockOperation","result","promises","results","toHaveLength","messagePromises","allSettled","successful","filter","r","toBeGreaterThan"],"sources":["socket-extended.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst jwt = require('jsonwebtoken');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Channel = require('../models/Channel');\nconst Message = require('../models/Message');\nconst SocketTestServer = require('./socket-server.test');\n\n// Utility function to wait for socket event with timeout and retry\nfunction waitForEvent(socket, eventName, timeout = 5000, retryCount = 3) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    let attempts = 0;\n\n    const cleanup = () => {\n      socket.off(eventName, eventHandler);\n      clearTimeout(timeoutId);\n    };\n\n    const eventHandler = (data) => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        resolve(data);\n      }\n    };\n\n    const tryWait = () => {\n      if (resolved || attempts >= retryCount) return;\n\n      const timeoutId = setTimeout(() => {\n        if (!resolved) {\n          attempts++;\n          if (attempts < retryCount) {\n            tryWait(); // Retry\n          } else {\n            cleanup();\n            reject(new Error(`Event '${eventName}' not received after ${retryCount} attempts (${timeout * retryCount}ms)`));\n          }\n        }\n      }, timeout);\n\n      if (!resolved) {\n        socket.once(eventName, eventHandler);\n      }\n    };\n\n    tryWait();\n  });\n}\n\n// Utility function to wait for socket connection with timeout\nfunction waitForSocketConnection(socket, timeout = 5000) {\n  return new Promise((resolve, reject) => {\n    if (socket.connected) {\n      resolve(socket);\n      return;\n    }\n\n    let resolved = false;\n    let cleanup = () => {\n      socket.off('connect', connectHandler);\n      socket.off('connect_error', errorHandler);\n      clearTimeout(timeoutId);\n    };\n\n    const connectHandler = () => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        resolve(socket);\n      }\n    };\n\n    const errorHandler = (error) => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        reject(new Error(`Socket connection failed: ${error.message}`));\n      }\n    };\n\n    const timeoutId = setTimeout(() => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        reject(new Error(`Socket connection timeout after ${timeout}ms`));\n      }\n    }, timeout);\n\n    socket.on('connect', connectHandler);\n    socket.on('connect_error', errorHandler);\n  });\n}\n\n// Utility function to simulate network latency\nfunction simulateLatency(socket, latency = 100) {\n  const originalEmit = socket.emit.bind(socket);\n  socket.emit = (...args) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        originalEmit(...args);\n        resolve();\n      }, latency);\n    });\n  };\n}\n\n// Retry utility for operations\nasync function retryOperation(operation, maxRetries = 3, delay = 1000) {\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      if (attempt === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n}\n\nlet testServer;\nlet testUser;\nlet testToken;\nlet serverPort;\n\ndescribe('Socket.IO Extended Tests - Improved Stability', () => {\n  beforeAll(async () => {\n    jest.setTimeout(90000); // Increase timeout for full test suite\n\n    await retryOperation(async () => {\n      await connectDB();\n    }, 3, 2000);\n\n    testServer = new SocketTestServer();\n    serverPort = await retryOperation(async () => {\n      return await testServer.start();\n    }, 3, 2000);\n\n    testUser = new User({\n      nickname: 'extendedSocketTestUser',\n      email: 'extended-socket@test.com',\n      password: 'testpass123',\n      status: 'online'\n    });\n    await testUser.save();\n\n    // Create test channels with better error handling\n    try {\n      await Channel.findOneAndUpdate(\n        { id: 'general' },\n        { id: 'general', name: 'General Chat', type: 'text', createdBy: 'system' },\n        { upsert: true, new: true }\n      );\n\n      await Channel.findOneAndUpdate(\n        { id: 'voice-chat' },\n        { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' },\n        { upsert: true, new: true }\n      );\n\n      await Channel.findOneAndUpdate(\n        { id: 'private-test' },\n        { id: 'private-test', name: 'Private Test', type: 'text', createdBy: 'system' },\n        { upsert: true, new: true }\n      );\n    } catch (error) {\n      console.warn('Channel creation warning:', error.message);\n    }\n\n    // Create JWT token\n    testToken = jwt.sign(\n      { id: testUser._id, nickname: testUser.nickname, role: testUser.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n  });\n\n  afterAll(async () => {\n    if (testServer) {\n      await testServer.stop();\n    }\n    await closeDB();\n  });\n\n  describe('Authentication Edge Cases', () => {\n    test('should reject invalid JWT token', async () => {\n      const invalidSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: 'invalid-token' },\n        forceNew: true\n      });\n\n      let caughtError = null;\n      invalidSocket.on('connect_error', (error) => {\n        caughtError = error;\n      });\n\n      // Wait for connection attempt to fail\n      await expect(waitForSocketConnection(invalidSocket, 3000)).rejects.toThrow();\n\n      expect(caughtError).toBeTruthy();\n      invalidSocket.disconnect();\n    });\n\n    test('should reject connection without token', async () => {\n      const noTokenSocket = io(`http://localhost:${serverPort}`, {\n        forceNew: true\n      });\n\n      let caughtError = null;\n      noTokenSocket.on('connect_error', (error) => {\n        caughtError = error;\n      });\n\n      await expect(waitForSocketConnection(noTokenSocket, 3000)).rejects.toThrow();\n\n      expect(caughtError).toBeTruthy();\n      noTokenSocket.disconnect();\n    });\n  });\n\n\n  describe('Private Messages - /w Command Edge Cases', () => {\n    let clientSocket, secondSocket;\n\n    beforeEach((done) => {\n      const secondUser = new User({\n        nickname: 'extendedTestUser2',\n        email: 'extended-test2@test.com',\n        password: 'testpass123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        clientSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        secondSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        secondSocket.on('connect', () => {\n          clientSocket.emit('join_room', { room: 'general' });\n          secondSocket.emit('join_room', { room: 'general' });\n          done();\n        });\n\n        secondSocket.on('connect_error', (error) => {\n          done(new Error(`Second socket failed: ${error.message}`));\n        });\n      });\n    \n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n      if (secondSocket) secondSocket.disconnect();\n    });\n\n    test('should send private message between users', async () => {\n      const privateMessage = 'Private message from extended test';\n\n      // Wait for both sockets to be ready\n      await retryOperation(async () => {\n        await Promise.all([\n          waitForSocketConnection(clientSocket),\n          waitForSocketConnection(secondSocket)\n        ]);\n      });\n\n      // Emit the message\n      clientSocket.emit('private_message', {\n        to: 'extendedTestUser2',\n        text: privateMessage\n      });\n\n      // Wait for both sides to receive the message\n      const [senderData, receiverData] = await Promise.all([\n        waitForEvent(clientSocket, 'private_message'),\n        waitForEvent(secondSocket, 'private_message')\n      ]);\n\n      expect(senderData.text).toBe(privateMessage);\n      expect(receiverData.text).toBe(privateMessage);\n      expect(receiverData.author).toBe(testUser.nickname);\n      expect(receiverData.from || receiverData.author).toBe(testUser.nickname);\n    });\n  });\n\n  describe('Message History and Archival', () => {\n    let clientSocket;\n\n    beforeEach((done) => {\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        done();\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n    });\n\n    test('should receive history when joining room', async () => {\n      // Send a test message first\n      await retryOperation(async () => {\n        await waitForSocketConnection(clientSocket);\n      });\n\n      clientSocket.emit('join_room', { room: 'general' });\n\n      // Wait for history event\n      const history = await waitForEvent(clientSocket, 'history');\n      expect(Array.isArray(history)).toBe(true);\n      if (history.length > 0) {\n        expect(history[0]).toHaveProperty('author');\n        expect(history[0]).toHaveProperty('text');\n        expect(history[0]).toHaveProperty('timestamp');\n      }\n    });\n\n    test('should handle history request without room', (done) => {\n      clientSocket.emit('get_history');\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        done();\n      });\n    });\n  });\n\n  describe('Room Switching and Channel Validation', () => {\n    test('should handle invalid room names', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: '' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('INVALID_ROOM_FORMAT');\n          socket.disconnect();\n          done();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    test('should handle non-existent channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'non-existent-channel' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('CHANNEL_NOT_FOUND');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Connection Management and Recovery', () => {\n    test('should handle connection recovery after disconnect', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true,\n        reconnection: true,\n        reconnectionDelay: 500\n      });\n\n      await waitForSocketConnection(socket);\n      expect(socket.connected).toBe(true);\n\n      // Disconnect and wait for reconnection\n      socket.disconnect();\n\n      // Wait for disconnect event\n      await waitForEvent(socket, 'disconnect');\n\n      // Create new connection (automatic reconnection would be ideal but may not work reliably)\n      const newSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      await waitForSocketConnection(newSocket);\n      expect(newSocket.connected).toBe(true);\n\n      newSocket.disconnect();\n    });\n\n    test('should handle rapid connections', async () => {\n      const totalSockets = 3;\n      const sockets = [];\n\n      // Create all sockets at once using Promise.all\n      const connectionPromises = Array.from({ length: totalSockets }, async (_, i) => {\n        const socket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        await waitForSocketConnection(socket);\n        sockets.push(socket);\n        return socket;\n      });\n\n      // Wait for all connections simultaneously\n      await Promise.all(connectionPromises);\n      expect(sockets.length).toBe(totalSockets);\n\n      // Clean up\n      sockets.forEach(sock => sock.disconnect());\n    });\n  });\n\n  describe('Advanced Voice Channel Scenarios', () => {\n    test('should reject joining text channel as voice channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'general' }); // Text channel\n        socket.on('voice_error', (data) => {\n          expect(data.message).toBe('Voice channel not found');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n\n    test('should join voice channel without room first', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n        socket.on('voice_joined', (data) => {\n          expect(data.channelId).toBe('voice-chat');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Rate Limiting and Performance', () => {\n    test('should maintain performance under load', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        const startTime = Date.now();\n        let operationCount = 0;\n        const targetOperations = 20;\n\n        const performOperation = () => {\n          socket.emit('message', { text: `Load test ${operationCount + 1}` });\n          operationCount++;\n\n          if (operationCount >= targetOperations) {\n            const endTime = Date.now();\n            const duration = endTime - startTime;\n            expect(duration).toBeLessThan(5000); // 5 seconds max\n            socket.disconnect();\n            done();\n          } else {\n            setTimeout(performOperation, 50);\n          }\n        };\n\n        socket.emit('join_room', { room: 'general' });\n        socket.on('online_users', () => {\n          performOperation();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    test('should handle malformed messages gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'general' });\n\n        socket.on('online_users', () => {\n          const malformedMessages = [null, undefined, { text: '' }, { text: '   ' }, {}];\n\n          malformedMessages.forEach((malformed) => {\n            socket.emit('message', malformed);\n          });\n\n          setTimeout(() => {\n            expect(true).toBe(true); // Test passes if no errors thrown\n            socket.disconnect();\n            done();\n          }, 1000);\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Network Conditions Emulation', () => {\n    test('should handle high latency connections', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      // Simulate latency by monkey-patching the emit method\n      simulateLatency(socket);\n\n      await waitForSocketConnection(socket, 10000); // Increased timeout for latency\n\n      socket.emit('join_room', { room: 'general' });\n\n      const data = await waitForEvent(socket, 'message', 10000);\n      expect(data.author).toBe('System');\n\n      socket.disconnect();\n    });\n\n    test('should handle connection drops and recovery', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true,\n        reconnection: true,\n        reconnectionDelay: 100,\n        reconnectionAttempts: 5\n      });\n\n      await waitForSocketConnection(socket);\n\n      socket.emit('join_room', { room: 'general' });\n      await waitForEvent(socket, 'online_users');\n\n      // Forcefully disconnect the socket\n      socket.disconnect();\n\n      // The test passes if we reach here without hanging\n      expect(true).toBe(true);\n    });\n\n    test('should retry failed operations', async () => {\n      let retryCount = 0;\n\n      const mockOperation = async () => {\n        retryCount++;\n        if (retryCount < 2) {\n          throw new Error('Simulated network error');\n        }\n        return 'success';\n      };\n\n      const result = await retryOperation(mockOperation, 3, 10); // Very short delay for testing\n      expect(result).toBe('success');\n      expect(retryCount).toBe(2);\n    });\n\n    test('should handle multiple simultaneous operations with Promise.all', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      await waitForSocketConnection(socket);\n      socket.emit('join_room', { room: 'general' });\n\n      // Create multiple promises that should complete simultaneously\n      const promises = [\n        waitForEvent(socket, 'online_users'),\n        new Promise(resolve => setTimeout(resolve, 100)).then(() => 'delay'),\n        retryOperation(async () => {\n          socket.emit('message', { text: 'Concurrent test message' });\n          return waitForEvent(socket, 'message');\n        })\n      ];\n\n      const results = await Promise.all(promises);\n      expect(results[0]).toHaveLength; // online_users is an array\n      expect(results[1]).toBe('delay');\n      expect(results[2].text).toBe('Concurrent test message');\n\n      socket.disconnect();\n    });\n\n    test('should maintain stability under message flood', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      await waitForSocketConnection(socket);\n      socket.emit('join_room', { room: 'general' });\n      await waitForEvent(socket, 'online_users');\n\n      const messagePromises = [];\n      for (let i = 0; i < 10; i++) {\n        messagePromises.push(retryOperation(async () => {\n          socket.emit('message', { text: `Flood test ${i}` });\n          return waitForEvent(socket, 'message');\n        }));\n      }\n\n      // Use Promise.allSettled for messages that might timeout\n      const results = await Promise.allSettled(messagePromises);\n      const successful = results.filter(r => r.status === 'fulfilled').length;\n\n      expect(successful).toBeGreaterThan(5); // At least 50% success rate\n\n      socket.disconnect();\n    });\n\n    test('should handle network disconnection gracefully', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      await waitForSocketConnection(socket);\n      socket.emit('join_room', { room: 'general' });\n      await waitForEvent(socket, 'online_users');\n\n      // Simulate network disconnection by disconnecting\n      socket.disconnect();\n\n      // Wait for disconnect event\n      await waitForEvent(socket, 'disconnect');\n\n      // Should be able to reconnect\n      const newSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      await waitForSocketConnection(newSocket, 10000); // Longer timeout\n      expect(newSocket.connected).toBe(true);\n\n      newSocket.disconnect();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}