{"version":3,"names":["winston","require","CIRCUIT_STATES","CLOSED","OPEN","HALF_OPEN","CircuitBreaker","constructor","options","failureThreshold","timeout","monitorInterval","successThreshold","state","failureCount","successCount","nextAttempt","callTimeout","logger","createLogger","level","format","combine","timestamp","errors","stack","json","transports","File","filename","Console","colorize","simple","startMonitoring","execute","operation","fallback","isOpen","Error","isHalfOpen","attemptRecovery","safeExecute","isClosed","setTimeout","recordFailure","result","clearTimeout","recordSuccess","error","reset","trip","warn","threshold","message","Date","toISOString","now","info","attempt","setInterval","debug","getStatus","ExternalServiceBreaker","emailBreaker","redisBreaker","databaseBreaker","executeWithEmailBreaker","log","status","executeWithRedisBreaker","executeWithDatabaseBreaker","getAllStatuses","emailService","redis","database","externalServiceBreaker","circuitBreakerMiddleware","breakerType","req","res","next","circuitBreakerStatus","endpoint","url","method","asyncOptimize","fn","concurrency","running","queue","args","Promise","resolve","reject","push","startTime","timeoutPromise","_","timeoutReject","race","apply","executionTime","slowThreshold","functionName","name","length","shift","setImmediate","bind","module","exports","protectEmail","protectRedis","protectDatabase","getCircuitBreakerStatuses"],"sources":["circuitBreaker.js"],"sourcesContent":["const winston = require('winston');\n\n// Circuit breaker states\nconst CIRCUIT_STATES = {\n  CLOSED: 'closed',\n  OPEN: 'open',\n  HALF_OPEN: 'half-open'\n};\n\n// Circuit breaker class for protecting external services\nclass CircuitBreaker {\n  constructor(options = {}) {\n    this.failureThreshold = options.failureThreshold || 5;\n    this.timeout = options.timeout || 10000;\n    this.monitorInterval = options.monitorInterval || 60000; // 1 minute\n    this.successThreshold = options.successThreshold || 2;\n\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.nextAttempt = 0;\n\n    this.callTimeout = null;\n\n    // Logger setup\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n      ),\n      transports: [\n        new winston.transports.File({ filename: 'logs/circuit-breaker.log' }),\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        })\n      ]\n    });\n\n    this.startMonitoring();\n  }\n\n  // Execute function with circuit breaker protection\n  async execute(operation, fallback = null) {\n    if (this.isOpen()) {\n      if (fallback) {\n        return await fallback();\n      }\n      throw new Error('Circuit breaker is OPEN');\n    }\n\n    if (this.isHalfOpen()) {\n      return await this.attemptRecovery(operation);\n    }\n\n    return await this.safeExecute(operation);\n  }\n\n  // Check if circuit is open (rejecting requests)\n  isOpen() {\n    return this.state === CIRCUIT_STATES.OPEN;\n  }\n\n  // Check if circuit is half-open (testing recovery)\n  isHalfOpen() {\n    return this.state === CIRCUIT_STATES.HALF_OPEN;\n  }\n\n  // Check if circuit is closed (normal operation)\n  isClosed() {\n    return this.state === CIRCUIT_STATES.CLOSED;\n  }\n\n  // Safe execute with failure tracking\n  async safeExecute(operation) {\n    try {\n      this.callTimeout = setTimeout(() => {\n        this.recordFailure();\n        throw new Error('Circuit breaker timeout');\n      }, this.timeout);\n\n      const result = await operation();\n\n      clearTimeout(this.callTimeout);\n      this.recordSuccess();\n\n      return result;\n    } catch (error) {\n      clearTimeout(this.callTimeout);\n      this.recordFailure();\n      throw error;\n    }\n  }\n\n  // Attempt recovery when circuit is half-open\n  async attemptRecovery(operation) {\n    try {\n      const result = await this.safeExecute(operation);\n      this.successCount++;\n\n      if (this.successCount >= this.successThreshold) {\n        this.reset();\n      }\n\n      return result;\n    } catch (error) {\n      this.recordFailure(error);\n      throw error;\n    }\n  }\n\n  // Record successful operation\n  recordSuccess() {\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.state = CIRCUIT_STATES.CLOSED;\n  }\n\n  // Record failed operation\n  recordFailure(error = null) {\n    this.failureCount++;\n    this.successCount = 0;\n\n    if (this.failureCount >= this.failureThreshold) {\n      this.trip();\n    }\n\n    if (error) {\n      this.logger.warn('Circuit breaker failure recorded', {\n        failureCount: this.failureCount,\n        threshold: this.failureThreshold,\n        error: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  // Trip circuit to open state\n  trip() {\n    this.state = CIRCUIT_STATES.OPEN;\n    this.nextAttempt = Date.now() + this.timeout;\n\n    this.logger.warn('Circuit breaker tripped to OPEN state', {\n      failureCount: this.failureCount,\n      nextAttempt: new Date(this.nextAttempt).toISOString(),\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Reset circuit breaker\n  reset() {\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n\n    this.logger.info('Circuit breaker reset to CLOSED state', {\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Force attempt recovery (move to half-open)\n  attempt() {\n    if (this.isOpen() && Date.now() >= this.nextAttempt) {\n      this.state = CIRCUIT_STATES.HALF_OPEN;\n      this.successCount = 0;\n\n      this.logger.info('Circuit breaker attempting recovery (HALF-OPEN)', {\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  // Start monitoring circuit state\n  startMonitoring() {\n    setInterval(() => {\n      if (this.isOpen() && Date.now() >= this.nextAttempt) {\n        this.attempt();\n      }\n\n      // Log current state\n      this.logger.debug('Circuit breaker status', {\n        state: this.state,\n        failureCount: this.failureCount,\n        successCount: this.successCount,\n        timestamp: new Date().toISOString()\n      });\n    }, this.monitorInterval);\n  }\n\n  // Get current status\n  getStatus() {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      failureThreshold: this.failureThreshold,\n      successThreshold: this.successThreshold,\n      timeout: this.timeout,\n      nextAttempt: this.isOpen() ? new Date(this.nextAttempt).toISOString() : null\n    };\n  }\n}\n\n// Service-specific circuit breakers\nclass ExternalServiceBreaker {\n  constructor() {\n    // Circuit breaker for email service\n    this.emailBreaker = new CircuitBreaker({\n      failureThreshold: 3,\n      timeout: 30000,\n      monitorInterval: 30000,\n      successThreshold: 2\n    });\n\n    // Circuit breaker for Redis\n    this.redisBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      timeout: 5000,\n      monitorInterval: 15000,\n      successThreshold: 3\n    });\n\n    // Circuit breaker for database operations\n    this.databaseBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      timeout: 15000,\n      monitorInterval: 20000,\n      successThreshold: 3\n    });\n  }\n\n  // Email service protection\n  async executeWithEmailBreaker(operation) {\n    return await this.emailBreaker.execute(\n      operation,\n      async () => {\n        // Fallback: queue email for later retry\n        winston.log('warn', 'Email service is unavailable, queuing for retry');\n        return { status: 'queued', message: 'Email service unavailable' };\n      }\n    );\n  }\n\n  // Redis protection\n  async executeWithRedisBreaker(operation) {\n    return await this.redisBreaker.execute(\n      operation,\n      async () => {\n        // Fallback: skip caching\n        winston.log('warn', 'Redis is unavailable, skipping cache operation');\n        return null;\n      }\n    );\n  }\n\n  // Database protection\n  async executeWithDatabaseBreaker(operation) {\n    return await this.databaseBreaker.execute(\n      operation,\n      async () => {\n        // Fallback: throw error\n        throw new Error('Database is unavailable due to circuit breaker protection');\n      }\n    );\n  }\n\n  // Get status of all circuit breakers\n  getAllStatuses() {\n    return {\n      emailService: this.emailBreaker.getStatus(),\n      redis: this.redisBreaker.getStatus(),\n      database: this.databaseBreaker.getStatus()\n    };\n  }\n}\n\n// Singleton instance\nconst externalServiceBreaker = new ExternalServiceBreaker();\n\n// Middleware for protecting API endpoints with circuit breaker\nconst circuitBreakerMiddleware = (breakerType = 'database') => {\n  return async (req, res, next) => {\n    try {\n      // Add circuit breaker status to request\n      req.circuitBreakerStatus = {};\n\n      // Execute request normally\n      next();\n    } catch (error) {\n      winston.log('error', 'Circuit breaker middleware error', {\n        error: error.message,\n        breakerType,\n        endpoint: req.url,\n        method: req.method\n      });\n      next(error);\n    }\n  };\n};\n\n// Async optimization wrapper\nconst asyncOptimize = (fn, options = {}) => {\n  const concurrency = options.concurrency || 5;\n  const timeout = options.timeout || 30000;\n\n  let running = 0;\n  const queue = [];\n\n  return async function (...args) {\n    return new Promise((resolve, reject) => {\n      const execute = async () => {\n        if (running >= concurrency) {\n          queue.push({ args, resolve, reject });\n          return;\n        }\n\n        running++;\n        const startTime = Date.now();\n\n        try {\n          // Set timeout for operation\n          const timeoutPromise = new Promise((_, timeoutReject) => {\n            setTimeout(() => timeoutReject(new Error('Operation timeout')), timeout);\n          });\n\n          const result = await Promise.race([fn.apply(this, args), timeoutPromise]);\n          const executionTime = Date.now() - startTime;\n\n          // Log slow operations\n          if (executionTime > (options.slowThreshold || 5000)) {\n            winston.log('warn', 'Slow async operation', {\n              executionTime,\n              functionName: fn.name,\n              timestamp: new Date().toISOString()\n            });\n          }\n\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        } finally {\n          running--;\n\n          // Process next item in queue\n          if (queue.length > 0) {\n            const next = queue.shift();\n            setImmediate(execute.bind(this, next.args, next.resolve, next.reject));\n          }\n        }\n      };\n\n      if (running < concurrency) {\n        execute.apply(this, args);\n      } else {\n        queue.push({ args, resolve, reject });\n      }\n    });\n  };\n};\n\nmodule.exports = {\n  CircuitBreaker,\n  ExternalServiceBreaker,\n  externalServiceBreaker,\n  circuitBreakerMiddleware,\n  asyncOptimize,\n  // Convenience exports\n  protectEmail: (fn) => externalServiceBreaker.executeWithEmailBreaker(fn),\n  protectRedis: (fn) => externalServiceBreaker.executeWithRedisBreaker(fn),\n  protectDatabase: (fn) => externalServiceBreaker.executeWithDatabaseBreaker(fn),\n  getCircuitBreakerStatuses: () => externalServiceBreaker.getAllStatuses()\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAElC;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,IAAI,CAACC,gBAAgB,GAAGD,OAAO,CAACC,gBAAgB,IAAI,CAAC;IACrD,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,KAAK;IACvC,IAAI,CAACC,eAAe,GAAGH,OAAO,CAACG,eAAe,IAAI,KAAK,CAAC,CAAC;IACzD,IAAI,CAACC,gBAAgB,GAAGJ,OAAO,CAACI,gBAAgB,IAAI,CAAC;IAErD,IAAI,CAACC,KAAK,GAAGX,cAAc,CAACC,MAAM;IAClC,IAAI,CAACW,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,WAAW,GAAG,CAAC;IAEpB,IAAI,CAACC,WAAW,GAAG,IAAI;;IAEvB;IACA,IAAI,CAACC,MAAM,GAAGlB,OAAO,CAACmB,YAAY,CAAC;MACjCC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAErB,OAAO,CAACqB,MAAM,CAACC,OAAO,CAC5BtB,OAAO,CAACqB,MAAM,CAACE,SAAS,CAAC,CAAC,EAC1BvB,OAAO,CAACqB,MAAM,CAACG,MAAM,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,EACtCzB,OAAO,CAACqB,MAAM,CAACK,IAAI,CAAC,CACtB,CAAC;MACDC,UAAU,EAAE,CACV,IAAI3B,OAAO,CAAC2B,UAAU,CAACC,IAAI,CAAC;QAAEC,QAAQ,EAAE;MAA2B,CAAC,CAAC,EACrE,IAAI7B,OAAO,CAAC2B,UAAU,CAACG,OAAO,CAAC;QAC7BT,MAAM,EAAErB,OAAO,CAACqB,MAAM,CAACC,OAAO,CAC5BtB,OAAO,CAACqB,MAAM,CAACU,QAAQ,CAAC,CAAC,EACzB/B,OAAO,CAACqB,MAAM,CAACW,MAAM,CAAC,CACxB;MACF,CAAC,CAAC;IAEN,CAAC,CAAC;IAEF,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB;;EAEA;EACA,MAAMC,OAAOA,CAACC,SAAS,EAAEC,QAAQ,GAAG,IAAI,EAAE;IACxC,IAAI,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE;MACjB,IAAID,QAAQ,EAAE;QACZ,OAAO,MAAMA,QAAQ,CAAC,CAAC;MACzB;MACA,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,IAAI,IAAI,CAACC,UAAU,CAAC,CAAC,EAAE;MACrB,OAAO,MAAM,IAAI,CAACC,eAAe,CAACL,SAAS,CAAC;IAC9C;IAEA,OAAO,MAAM,IAAI,CAACM,WAAW,CAACN,SAAS,CAAC;EAC1C;;EAEA;EACAE,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACxB,KAAK,KAAKX,cAAc,CAACE,IAAI;EAC3C;;EAEA;EACAmC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC1B,KAAK,KAAKX,cAAc,CAACG,SAAS;EAChD;;EAEA;EACAqC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC7B,KAAK,KAAKX,cAAc,CAACC,MAAM;EAC7C;;EAEA;EACA,MAAMsC,WAAWA,CAACN,SAAS,EAAE;IAC3B,IAAI;MACF,IAAI,CAAClB,WAAW,GAAG0B,UAAU,CAAC,MAAM;QAClC,IAAI,CAACC,aAAa,CAAC,CAAC;QACpB,MAAM,IAAIN,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC,EAAE,IAAI,CAAC5B,OAAO,CAAC;MAEhB,MAAMmC,MAAM,GAAG,MAAMV,SAAS,CAAC,CAAC;MAEhCW,YAAY,CAAC,IAAI,CAAC7B,WAAW,CAAC;MAC9B,IAAI,CAAC8B,aAAa,CAAC,CAAC;MAEpB,OAAOF,MAAM;IACf,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,YAAY,CAAC,IAAI,CAAC7B,WAAW,CAAC;MAC9B,IAAI,CAAC2B,aAAa,CAAC,CAAC;MACpB,MAAMI,KAAK;IACb;EACF;;EAEA;EACA,MAAMR,eAAeA,CAACL,SAAS,EAAE;IAC/B,IAAI;MACF,MAAMU,MAAM,GAAG,MAAM,IAAI,CAACJ,WAAW,CAACN,SAAS,CAAC;MAChD,IAAI,CAACpB,YAAY,EAAE;MAEnB,IAAI,IAAI,CAACA,YAAY,IAAI,IAAI,CAACH,gBAAgB,EAAE;QAC9C,IAAI,CAACqC,KAAK,CAAC,CAAC;MACd;MAEA,OAAOJ,MAAM;IACf,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,IAAI,CAACJ,aAAa,CAACI,KAAK,CAAC;MACzB,MAAMA,KAAK;IACb;EACF;;EAEA;EACAD,aAAaA,CAAA,EAAG;IACd,IAAI,CAACjC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACF,KAAK,GAAGX,cAAc,CAACC,MAAM;EACpC;;EAEA;EACAyC,aAAaA,CAACI,KAAK,GAAG,IAAI,EAAE;IAC1B,IAAI,CAAClC,YAAY,EAAE;IACnB,IAAI,CAACC,YAAY,GAAG,CAAC;IAErB,IAAI,IAAI,CAACD,YAAY,IAAI,IAAI,CAACL,gBAAgB,EAAE;MAC9C,IAAI,CAACyC,IAAI,CAAC,CAAC;IACb;IAEA,IAAIF,KAAK,EAAE;MACT,IAAI,CAAC9B,MAAM,CAACiC,IAAI,CAAC,kCAAkC,EAAE;QACnDrC,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BsC,SAAS,EAAE,IAAI,CAAC3C,gBAAgB;QAChCuC,KAAK,EAAEA,KAAK,CAACK,OAAO;QACpB9B,SAAS,EAAE,IAAI+B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ;EACF;;EAEA;EACAL,IAAIA,CAAA,EAAG;IACL,IAAI,CAACrC,KAAK,GAAGX,cAAc,CAACE,IAAI;IAChC,IAAI,CAACY,WAAW,GAAGsC,IAAI,CAACE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC9C,OAAO;IAE5C,IAAI,CAACQ,MAAM,CAACiC,IAAI,CAAC,uCAAuC,EAAE;MACxDrC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BE,WAAW,EAAE,IAAIsC,IAAI,CAAC,IAAI,CAACtC,WAAW,CAAC,CAACuC,WAAW,CAAC,CAAC;MACrDhC,SAAS,EAAE,IAAI+B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;;EAEA;EACAN,KAAKA,CAAA,EAAG;IACN,IAAI,CAACpC,KAAK,GAAGX,cAAc,CAACC,MAAM;IAClC,IAAI,CAACW,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,YAAY,GAAG,CAAC;IAErB,IAAI,CAACG,MAAM,CAACuC,IAAI,CAAC,uCAAuC,EAAE;MACxDlC,SAAS,EAAE,IAAI+B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;;EAEA;EACAG,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACrB,MAAM,CAAC,CAAC,IAAIiB,IAAI,CAACE,GAAG,CAAC,CAAC,IAAI,IAAI,CAACxC,WAAW,EAAE;MACnD,IAAI,CAACH,KAAK,GAAGX,cAAc,CAACG,SAAS;MACrC,IAAI,CAACU,YAAY,GAAG,CAAC;MAErB,IAAI,CAACG,MAAM,CAACuC,IAAI,CAAC,iDAAiD,EAAE;QAClElC,SAAS,EAAE,IAAI+B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ;EACF;;EAEA;EACAtB,eAAeA,CAAA,EAAG;IAChB0B,WAAW,CAAC,MAAM;MAChB,IAAI,IAAI,CAACtB,MAAM,CAAC,CAAC,IAAIiB,IAAI,CAACE,GAAG,CAAC,CAAC,IAAI,IAAI,CAACxC,WAAW,EAAE;QACnD,IAAI,CAAC0C,OAAO,CAAC,CAAC;MAChB;;MAEA;MACA,IAAI,CAACxC,MAAM,CAAC0C,KAAK,CAAC,wBAAwB,EAAE;QAC1C/C,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BC,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BQ,SAAS,EAAE,IAAI+B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC5C,eAAe,CAAC;EAC1B;;EAEA;EACAkD,SAASA,CAAA,EAAG;IACV,OAAO;MACLhD,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BN,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCG,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCF,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBM,WAAW,EAAE,IAAI,CAACqB,MAAM,CAAC,CAAC,GAAG,IAAIiB,IAAI,CAAC,IAAI,CAACtC,WAAW,CAAC,CAACuC,WAAW,CAAC,CAAC,GAAG;IAC1E,CAAC;EACH;AACF;;AAEA;AACA,MAAMO,sBAAsB,CAAC;EAC3BvD,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACwD,YAAY,GAAG,IAAIzD,cAAc,CAAC;MACrCG,gBAAgB,EAAE,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACoD,YAAY,GAAG,IAAI1D,cAAc,CAAC;MACrCG,gBAAgB,EAAE,CAAC;MACnBC,OAAO,EAAE,IAAI;MACbC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACqD,eAAe,GAAG,IAAI3D,cAAc,CAAC;MACxCG,gBAAgB,EAAE,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,eAAe,EAAE,KAAK;MACtBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMsD,uBAAuBA,CAAC/B,SAAS,EAAE;IACvC,OAAO,MAAM,IAAI,CAAC4B,YAAY,CAAC7B,OAAO,CACpCC,SAAS,EACT,YAAY;MACV;MACAnC,OAAO,CAACmE,GAAG,CAAC,MAAM,EAAE,iDAAiD,CAAC;MACtE,OAAO;QAAEC,MAAM,EAAE,QAAQ;QAAEf,OAAO,EAAE;MAA4B,CAAC;IACnE,CACF,CAAC;EACH;;EAEA;EACA,MAAMgB,uBAAuBA,CAAClC,SAAS,EAAE;IACvC,OAAO,MAAM,IAAI,CAAC6B,YAAY,CAAC9B,OAAO,CACpCC,SAAS,EACT,YAAY;MACV;MACAnC,OAAO,CAACmE,GAAG,CAAC,MAAM,EAAE,gDAAgD,CAAC;MACrE,OAAO,IAAI;IACb,CACF,CAAC;EACH;;EAEA;EACA,MAAMG,0BAA0BA,CAACnC,SAAS,EAAE;IAC1C,OAAO,MAAM,IAAI,CAAC8B,eAAe,CAAC/B,OAAO,CACvCC,SAAS,EACT,YAAY;MACV;MACA,MAAM,IAAIG,KAAK,CAAC,2DAA2D,CAAC;IAC9E,CACF,CAAC;EACH;;EAEA;EACAiC,cAAcA,CAAA,EAAG;IACf,OAAO;MACLC,YAAY,EAAE,IAAI,CAACT,YAAY,CAACF,SAAS,CAAC,CAAC;MAC3CY,KAAK,EAAE,IAAI,CAACT,YAAY,CAACH,SAAS,CAAC,CAAC;MACpCa,QAAQ,EAAE,IAAI,CAACT,eAAe,CAACJ,SAAS,CAAC;IAC3C,CAAC;EACH;AACF;;AAEA;AACA,MAAMc,sBAAsB,GAAG,IAAIb,sBAAsB,CAAC,CAAC;;AAE3D;AACA,MAAMc,wBAAwB,GAAGA,CAACC,WAAW,GAAG,UAAU,KAAK;EAC7D,OAAO,OAAOC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;IAC/B,IAAI;MACF;MACAF,GAAG,CAACG,oBAAoB,GAAG,CAAC,CAAC;;MAE7B;MACAD,IAAI,CAAC,CAAC;IACR,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdhD,OAAO,CAACmE,GAAG,CAAC,OAAO,EAAE,kCAAkC,EAAE;QACvDnB,KAAK,EAAEA,KAAK,CAACK,OAAO;QACpBwB,WAAW;QACXK,QAAQ,EAAEJ,GAAG,CAACK,GAAG;QACjBC,MAAM,EAAEN,GAAG,CAACM;MACd,CAAC,CAAC;MACFJ,IAAI,CAAChC,KAAK,CAAC;IACb;EACF,CAAC;AACH,CAAC;;AAED;AACA,MAAMqC,aAAa,GAAGA,CAACC,EAAE,EAAE9E,OAAO,GAAG,CAAC,CAAC,KAAK;EAC1C,MAAM+E,WAAW,GAAG/E,OAAO,CAAC+E,WAAW,IAAI,CAAC;EAC5C,MAAM7E,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,KAAK;EAExC,IAAI8E,OAAO,GAAG,CAAC;EACf,MAAMC,KAAK,GAAG,EAAE;EAEhB,OAAO,gBAAgB,GAAGC,IAAI,EAAE;IAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAM3D,OAAO,GAAG,MAAAA,CAAA,KAAY;QAC1B,IAAIsD,OAAO,IAAID,WAAW,EAAE;UAC1BE,KAAK,CAACK,IAAI,CAAC;YAAEJ,IAAI;YAAEE,OAAO;YAAEC;UAAO,CAAC,CAAC;UACrC;QACF;QAEAL,OAAO,EAAE;QACT,MAAMO,SAAS,GAAGzC,IAAI,CAACE,GAAG,CAAC,CAAC;QAE5B,IAAI;UACF;UACA,MAAMwC,cAAc,GAAG,IAAIL,OAAO,CAAC,CAACM,CAAC,EAAEC,aAAa,KAAK;YACvDvD,UAAU,CAAC,MAAMuD,aAAa,CAAC,IAAI5D,KAAK,CAAC,mBAAmB,CAAC,CAAC,EAAE5B,OAAO,CAAC;UAC1E,CAAC,CAAC;UAEF,MAAMmC,MAAM,GAAG,MAAM8C,OAAO,CAACQ,IAAI,CAAC,CAACb,EAAE,CAACc,KAAK,CAAC,IAAI,EAAEV,IAAI,CAAC,EAAEM,cAAc,CAAC,CAAC;UACzE,MAAMK,aAAa,GAAG/C,IAAI,CAACE,GAAG,CAAC,CAAC,GAAGuC,SAAS;;UAE5C;UACA,IAAIM,aAAa,IAAI7F,OAAO,CAAC8F,aAAa,IAAI,IAAI,CAAC,EAAE;YACnDtG,OAAO,CAACmE,GAAG,CAAC,MAAM,EAAE,sBAAsB,EAAE;cAC1CkC,aAAa;cACbE,YAAY,EAAEjB,EAAE,CAACkB,IAAI;cACrBjF,SAAS,EAAE,IAAI+B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;YACpC,CAAC,CAAC;UACJ;UAEAqC,OAAO,CAAC/C,MAAM,CAAC;QACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;UACd6C,MAAM,CAAC7C,KAAK,CAAC;QACf,CAAC,SAAS;UACRwC,OAAO,EAAE;;UAET;UACA,IAAIC,KAAK,CAACgB,MAAM,GAAG,CAAC,EAAE;YACpB,MAAMzB,IAAI,GAAGS,KAAK,CAACiB,KAAK,CAAC,CAAC;YAC1BC,YAAY,CAACzE,OAAO,CAAC0E,IAAI,CAAC,IAAI,EAAE5B,IAAI,CAACU,IAAI,EAAEV,IAAI,CAACY,OAAO,EAAEZ,IAAI,CAACa,MAAM,CAAC,CAAC;UACxE;QACF;MACF,CAAC;MAED,IAAIL,OAAO,GAAGD,WAAW,EAAE;QACzBrD,OAAO,CAACkE,KAAK,CAAC,IAAI,EAAEV,IAAI,CAAC;MAC3B,CAAC,MAAM;QACLD,KAAK,CAACK,IAAI,CAAC;UAAEJ,IAAI;UAAEE,OAAO;UAAEC;QAAO,CAAC,CAAC;MACvC;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAEDgB,MAAM,CAACC,OAAO,GAAG;EACfxG,cAAc;EACdwD,sBAAsB;EACtBa,sBAAsB;EACtBC,wBAAwB;EACxBS,aAAa;EACb;EACA0B,YAAY,EAAGzB,EAAE,IAAKX,sBAAsB,CAACT,uBAAuB,CAACoB,EAAE,CAAC;EACxE0B,YAAY,EAAG1B,EAAE,IAAKX,sBAAsB,CAACN,uBAAuB,CAACiB,EAAE,CAAC;EACxE2B,eAAe,EAAG3B,EAAE,IAAKX,sBAAsB,CAACL,0BAA0B,CAACgB,EAAE,CAAC;EAC9E4B,yBAAyB,EAAEA,CAAA,KAAMvC,sBAAsB,CAACJ,cAAc,CAAC;AACzE,CAAC","ignoreList":[]}