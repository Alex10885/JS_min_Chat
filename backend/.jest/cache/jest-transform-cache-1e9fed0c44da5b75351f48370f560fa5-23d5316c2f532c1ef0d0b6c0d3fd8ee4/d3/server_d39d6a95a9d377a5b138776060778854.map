{"version":3,"names":["require","config","express","http","socketIo","jwt","cors","winston","swaggerJsdoc","swaggerUi","helmet","rateLimit","body","validationResult","mongoose","session","MongoStore","connectDB","closeDB","emailService","User","Message","Channel","logger","createLogger","level","format","combine","timestamp","errors","stack","json","defaultMeta","service","transports","File","filename","Console","colorize","simple","app","server","createServer","authRateLimiter","windowMs","max","process","env","NODE_ENV","CYPRESS_API_SKIP","message","error","standardHeaders","legacyHeaders","skip","req","get","includes","apiRateLimiter","generalRateLimiter","passwordResetRateLimiter","io","origin","methods","allowedHeaders","engine","on","err","console","log","code","httpStatus","status","headers","use","ALLOWED_ORIGINS","split","credentials","limit","sessionMiddleware","secret","SESSION_SECRET","resave","saveUninitialized","store","create","mongoUrl","MONGO_URI","collectionName","ttl","autoRemove","touchAfter","cookie","secure","httpOnly","maxAge","sameSite","name","rolling","unset","errorHandler","res","next","url","method","ip","userAgent","Object","values","map","e","field","path","value","details","keys","keyValue","requestId","id","start","Date","now","duration","info","statusCode","user","nickname","JSON","stringify","undefined","authenticateSession","sessionId","sessionID","authenticated","userId","findById","_id","sessionUser","warn","authenticateToken","authHeader","token","hasAuthHeader","hasToken","decoded","verify","JWT_SECRET","requireModerator","hasModeratorPrivileges","requireAdmin","hasAdminPrivileges","contentSecurityPolicy","directives","defaultSrc","styleSrc","fontSrc","imgSrc","scriptSrc","connectSrc","crossOriginEmbedderPolicy","swaggerOptions","definition","openapi","title","version","description","contact","servers","components","schemas","type","properties","minLength","maxLength","email","role","enum","default","createdAt","lastActive","required","createdBy","position","RegisterRequest","password","LoginRequest","identifier","AuthResponse","$ref","ChannelRequest","ErrorResponse","items","msg","param","location","securitySchemes","bearerAuth","scheme","bearerFormat","security","apis","swaggerSpec","removeHeader","serve","setup","page","parseInt","query","users","find","select","sort","total","countDocuments","adminId","pagination","pages","Math","ceil","post","isLength","min","trim","optional","isInt","isEmpty","array","params","reason","toString","ban","bannedUserId","bannedById","banned","banReason","banExpires","unban","unbannedUserId","unbannedById","save","warnedUserId","warnedById","warning","issuedBy","issuedAt","expires","warningsCount","getActiveWarningsCount","isIn","newRole","oldRole","changedUserId","changedById","mute","mutedUserId","mutedById","muteExpires","isMuted","unmute","unmutedUserId","unmutedById","totalUsers","length","setHeader","send","authLimiterStore","resetAll","success","toISOString","uptime","hasPassword","findOne","$or","isPasswordValid","comparePassword","csrfToken","loginTime","Promise","resolve","reject","sign","expiresIn","escape","isEmail","normalizeEmail","existingUser","conflictField","errorMessage","registrationTime","authorization","channels","channelCount","channel","channelId","sockets","onlineUsers","disconnectedCount","socketId","socketData","entries","socket","disconnect","findByIdAndUpdate","disconnectedSockets","hasJwtAuth","hasSessionAuth","sessionUserId","destroy","sessionDestroyed","jwtLogoutResult","sessionLogoutResult","jwtError","sessionError","overallSuccess","Map","userConnections","voiceChannels","handshake","auth","request","Error","connectionCount","newConnectionCount","set","isBanned","emit","updateResult","findOneAndUpdate","$set","new","runValidators","connections","address","cleanupInactiveConnections","timeout","lastHeartbeat","connectionsLeft","catch","delete","setInterval","room","size","updateHeartbeat","data","leave","previousRoomUsers","Array","from","filter","u","to","join","joinMessage","author","text","roomUsers","history","target","currentUser","messageData","debug","trimmedText","targetNickname","senderRoom","senderSocketId","targetUser","targetFound","targetRoom","onlineUsersInRoom","onlineUsersInSenderRoom","availableUsers","targetSocketId","sender","messageId","onlineUsersCount","messageLength","speaking","has","channelPeers","peerConnection","stream","voiceChannel","offer","fromNickname","answer","candidate","currentCount","newCount","leaveMessage","remainingConnections","initializeServer","defaultChannels","channelData","upsert","PORT","listen","exit","close"],"sources":["server.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst winston = require('winston');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoose = require('mongoose');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo');\nconst { connectDB, closeDB } = require('./db/connection');\nconst emailService = require('./services/emailService');\n\n// Import models\nconst User = require('./models/User');\nconst Message = require('./models/Message');\nconst Channel = require('./models/Channel');\n\n// Logger setup\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'chat-server' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/server.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\nconst app = express();\nconst server = http.createServer(app);\n\n// Rate limiting configuration\nconst authRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: process.env.NODE_ENV === 'test' || process.env.CYPRESS_API_SKIP ? 10000 : 5, // High limit for tests and Cypress\n  message: { error: 'Too many authentication attempts, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skip: (req) => {\n    // Skip rate limiting for Cypress tests (detected by user-agent or specific headers)\n    return req.get('User-Agent') && req.get('User-Agent').includes('Cypress');\n  }\n});\n\nconst apiRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 API requests per windowMs\n  message: { error: 'Too many requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst generalRateLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 1000, // Limit each IP to 1000 requests per windowMs\n  message: { error: 'Too many requests from this IP, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst passwordResetRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 3, // Limit each IP to 3 password reset requests per windowMs\n  message: { error: 'Too many password reset requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"],\n    allowedHeaders: [\"authorization\", \"content-type\"]\n  },\n  // Ensure both transports are supported\n  transports: ['websocket', 'polling']\n});\n\n// Log socket connection errors for debugging\nio.engine.on('connection_error', (err) => {\n  console.log('🔌 Socket engine connection error:', err.code, err.message);\n  logger.error('Socket connection error:', {\n    code: err.code,\n    message: err.message,\n    httpStatus: err.status,\n    headers: err.req?.headers\n  });\n});\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production'\n    ? process.env.ALLOWED_ORIGINS?.split(',') || false\n    : true,\n  credentials: true\n}));\n\napp.use(express.json({ limit: '10mb' })); // Add payload size limit\n\n// Session configuration with secure settings\nconst sessionMiddleware = session({\n  secret: process.env.SESSION_SECRET || 'your-very-long-secure-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  store: MongoStore.create({\n    mongoUrl: process.env.MONGO_URI || 'mongodb://localhost:27017/chat-app',\n    collectionName: 'sessions',\n    ttl: 24 * 60 * 60, // 1 day in seconds\n    autoRemove: 'native',\n    touchAfter: 24 * 3600 // Reduce DB load by limiting session saves\n  }),\n  cookie: {\n    secure: process.env.NODE_ENV === 'production', // HTTPS only in production\n    httpOnly: true, // Prevent XSS access to cookie\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'strict' // CSRF protection\n  },\n  name: 'chatSession', // Custom name to avoid default 'connect.sid'\n  rolling: false, // Don't extend cookie expiration on each request\n  unset: 'destroy' // Destroy session on logout\n});\n\napp.use(sessionMiddleware);\n\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n  logger.error('Unhandled error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  // Mongoose validation errors\n  if (err.name === 'ValidationError') {\n    const errors = Object.values(err.errors).map(e => ({\n      field: e.path,\n      message: e.message,\n      value: e.value\n    }));\n\n    return res.status(422).json({\n      error: 'Validation failed',\n      details: errors,\n      code: 'VALIDATION_ERROR'\n    });\n  }\n\n  // Mongoose duplicate key error\n  if (err.code === 11000) {\n    const field = Object.keys(err.keyValue)[0];\n    const value = err.keyValue[field];\n    return res.status(409).json({\n      error: `${field} '${value}' already exists`,\n      code: 'DUPLICATE_ERROR'\n    });\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      error: 'Invalid or expired token',\n      code: 'INVALID_TOKEN'\n    });\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      error: 'Token has expired',\n      code: 'TOKEN_EXPIRED'\n    });\n  }\n\n  // Default server error\n  res.status(500).json({\n    error: 'Internal server error',\n    code: 'INTERNAL_ERROR',\n    requestId: req.id || 'unknown'\n  });\n};\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    logger.info(`${req.method} ${req.url} - ${res.statusCode} (${duration}ms)`, {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      user: req.user?.nickname || 'anonymous',\n      body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined\n    });\n  });\n\n  next();\n});\n\n// Session authentication middleware (works parallel to JWT)\nconst authenticateSession = async (req, res, next) => {\n  try {\n    console.log('🔐 Session authentication middleware called:', { url: req.url, method: req.method, sessionId: req.sessionID });\n\n    // Check if session exists and has authenticated user\n    if (req.session && req.session.authenticated && req.session.userId) {\n      console.log('🎯 Found authenticated session for userId:', req.session.userId);\n\n      const user = await User.findById(req.session.userId);\n      if (user) {\n        console.log('✅ Session user found:', { nickname: user.nickname, id: user._id, status: user.status });\n        req.sessionUser = user; // Store in req.sessionUser to avoid conflict with JWT req.user\n      } else {\n        console.log('⚠️ Session user not found in DB, cleaning session:', req.session.userId);\n        // Clean invalid session\n        delete req.session.authenticated;\n        delete req.session.userId;\n      }\n    } else {\n      console.log('🔍 No authenticated session found or session not initialized');\n      req.sessionUser = null; // Explicitly set to null when no session\n    }\n    next();\n  } catch (error) {\n    logger.warn('Session authentication error:', {\n      error: error.message,\n      sessionId: req.sessionID,\n      ip: req.ip\n    });\n    req.sessionUser = null; // Set to null on error\n    next();\n  }\n};\n\n// JWT authentication middleware\nconst authenticateToken = async (req, res, next) => {\n  try {\n    console.log('🔐 JWT authentication middleware called:', { url: req.url, method: req.method });\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n    console.log('🔑 Token extraction result:', { hasAuthHeader: !!authHeader, hasToken: !!token });\n\n    if (!token) {\n      console.log('❌ No token provided');\n      return res.status(401).json({\n        error: 'Access token required',\n        code: 'NO_TOKEN'\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    console.log('✅ JWT decoded:', { userId: decoded.userId, nickname: decoded.nickname });\n    const user = await User.findById(decoded.userId);\n\n    if (!user) {\n      console.log('❌ User not found in DB for JWT userId:', decoded.userId);\n      return res.status(401).json({\n        error: 'User not found',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    req.user = user;\n    console.log('✅ JWT authentication successful for user:', user.nickname, { id: user._id, status: user.status });\n    next();\n  } catch (error) {\n    logger.warn('JWT authentication failed:', {\n      error: error.message,\n      ip: req.ip\n    });\n\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: 'Invalid token format',\n        code: 'INVALID_TOKEN_FORMAT'\n      });\n    }\n\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Token has expired',\n        code: 'TOKEN_EXPIRED'\n      });\n    }\n\n    return res.status(401).json({\n      error: 'Token verification failed',\n      code: 'TOKEN_VERIFICATION_FAILED'\n    });\n  }\n};\n\n// Role-based access control middleware\nconst requireModerator = async (req, res, next) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'AUTH_REQUIRED'\n      });\n    }\n\n    if (!req.user.hasModeratorPrivileges()) {\n      return res.status(403).json({\n        error: 'Moderator privileges required',\n        code: 'MODERATOR_REQUIRED'\n      });\n    }\n\n    next();\n  } catch (error) {\n    logger.error('Moderator check error:', error);\n    res.status(500).json({\n      error: 'Server error during authorization check',\n      code: 'AUTH_CHECK_ERROR'\n    });\n  }\n};\n\nconst requireAdmin = async (req, res, next) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'AUTH_REQUIRED'\n      });\n    }\n\n    if (!req.user.hasAdminPrivileges()) {\n      return res.status(403).json({\n        error: 'Administrator privileges required',\n        code: 'ADMIN_REQUIRED'\n      });\n    }\n\n    next();\n  } catch (error) {\n    logger.error('Admin check error:', error);\n    res.status(500).json({\n      error: 'Server error during authorization check',\n      code: 'AUTH_CHECK_ERROR'\n    });\n  }\n};\n\n// Error handling middleware\n\n// Session authentication middleware (run before rate limiting)\napp.use(authenticateSession);\n\n// General rate limiting (applied to all HTTP requests)\napp.use(generalRateLimiter);\n\n// Helmet security headers\napp.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        connectSrc: [\"'self'\"]\n      }\n    },\n    crossOriginEmbedderPolicy: false\n  })\n);\n\n// Swagger configuration\nconst swaggerOptions = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Chat-JS API',\n      version: '1.0.0',\n      description: 'REST API for Chat-JS application with real-time messaging and voice channels',\n      contact: {\n        name: 'Chat-JS Support'\n      }\n    },\n    servers: [\n      {\n        url: 'http://localhost:3001',\n        description: 'Development server'\n      }\n    ],\n    components: {\n      schemas: {\n        User: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'User unique identifier'\n            },\n            nickname: {\n              type: 'string',\n              description: 'User nickname',\n              minLength: 3,\n              maxLength: 50\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'User email address'\n            },\n            role: {\n              type: 'string',\n              enum: ['admin', 'member'],\n              default: 'member',\n              description: 'User role'\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              description: 'User creation timestamp'\n            },\n            lastActive: {\n              type: 'string',\n              format: 'date-time',\n              description: 'Last activity timestamp'\n            },\n            status: {\n              type: 'string',\n              enum: ['online', 'offline'],\n              description: 'User online status'\n            }\n          },\n          required: ['nickname', 'email', 'password', 'role']\n        },\n        Channel: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Channel unique identifier (auto-generated from name)'\n            },\n            name: {\n              type: 'string',\n              description: 'Channel display name',\n              minLength: 1,\n              maxLength: 100\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              description: 'Channel description',\n              maxLength: 500\n            },\n            createdBy: {\n              type: 'string',\n              description: 'Creator nickname'\n            },\n            position: {\n              type: 'number',\n              default: 0,\n              description: 'Channel display position'\n            }\n          },\n          required: ['id', 'name', 'type', 'createdBy']\n        },\n        RegisterRequest: {\n          type: 'object',\n          required: ['nickname', 'email', 'password'],\n          properties: {\n            nickname: {\n              type: 'string',\n              minLength: 3,\n              maxLength: 50,\n              description: 'Unique username'\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'Valid email address'\n            },\n            password: {\n              type: 'string',\n              minLength: 6,\n              description: 'User password'\n            }\n          }\n        },\n        LoginRequest: {\n          type: 'object',\n          required: ['identifier', 'password'],\n          properties: {\n            identifier: {\n              type: 'string',\n              description: 'Username or email'\n            },\n            password: {\n              type: 'string',\n              description: 'User password'\n            }\n          }\n        },\n        AuthResponse: {\n          type: 'object',\n          properties: {\n            token: {\n              type: 'string',\n              description: 'JWT access token'\n            },\n            user: {\n              $ref: '#/components/schemas/User'\n            }\n          }\n        },\n        ChannelRequest: {\n          type: 'object',\n          required: ['name', 'type'],\n          properties: {\n            name: {\n              type: 'string',\n              minLength: 1,\n              maxLength: 100,\n              description: 'Channel display name'\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              maxLength: 500,\n              description: 'Optional channel description'\n            }\n          }\n        },\n        ErrorResponse: {\n          type: 'object',\n          properties: {\n            error: {\n              type: 'string',\n              description: 'Error message'\n            },\n            errors: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  msg: { type: 'string' },\n                  param: { type: 'string' },\n                  location: { type: 'string' }\n                }\n              },\n              description: 'Validation errors array'\n            }\n          }\n        }\n      },\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT'\n        }\n      }\n    },\n    security: [\n      {\n        bearerAuth: []\n      }\n    ]\n  },\n  apis: ['./server.js'] // Path to the API routes\n};\n\nconst swaggerSpec = swaggerJsdoc(swaggerOptions);\n\n// Swagger UI with CSP disabled for this route\napp.use('/api-docs', (req, res, next) => {\n  // Disable CSP for Swagger UI\n  res.removeHeader('Content-Security-Policy');\n  next();\n}, swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n// Administrative endpoints - require moderator privileges\nconsole.log('🔧 Administrative API endpoints registered at startup');\n\n// GET /api/admin/users - List all users with moderation info\napp.get('/api/admin/users', authenticateToken, requireModerator, apiRateLimiter, async (req, res) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 50;\n    const skip = (page - 1) * limit;\n\n    const users = await User.find({})\n      .select('-password -resetPasswordToken -resetPasswordExpires -moderationToken -moderationTokenExpires')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await User.countDocuments();\n\n    logger.info(`Admin user list requested by ${req.user.nickname}`, {\n      adminId: req.user._id,\n      page,\n      limit,\n      total\n    });\n\n    res.json({\n      users,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    logger.error('Error fetching users for admin:', error);\n    res.status(500).json({ error: 'Failed to fetch users', code: 'DATABASE_ERROR' });\n  }\n});\n\n// POST /api/admin/users/:userId/ban - Ban a user\napp.post('/api/admin/users/:userId/ban', authenticateToken, requireModerator, apiRateLimiter, [\n  body('reason').isLength({ min: 1, max: 500 }).trim(),\n  body('duration').optional().isInt({ min: 1, max: 31536000 }) // Max 1 year in seconds\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { reason, duration } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Prevent banning yourself\n    if (user._id.toString() === req.user._id.toString()) {\n      return res.status(400).json({ error: 'Cannot ban yourself' });\n    }\n\n    // Prevent non-admin from banning admin\n    if (user.role === 'admin' && req.user.role !== 'admin') {\n      return res.status(403).json({ error: 'Cannot ban administrator' });\n    }\n\n    await user.ban(reason, duration, req.user._id);\n\n    logger.info(`User ${user.nickname} banned by ${req.user.nickname}`, {\n      bannedUserId: userId,\n      bannedById: req.user._id,\n      reason,\n      duration\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been banned`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        banned: true,\n        banReason: reason,\n        banExpires: user.banExpires\n      }\n    });\n  } catch (error) {\n    logger.error('Error banning user:', error);\n    res.status(500).json({ error: 'Failed to ban user' });\n  }\n});\n\n// POST /api/admin/users/:userId/unban - Unban a user\napp.post('/api/admin/users/:userId/unban', authenticateToken, requireModerator, apiRateLimiter, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    if (!user.banned) {\n      return res.status(400).json({ error: 'User is not banned' });\n    }\n\n    await user.unban();\n\n    logger.info(`User ${user.nickname} unbanned by ${req.user.nickname}`, {\n      unbannedUserId: userId,\n      unbannedById: req.user._id\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been unbanned`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        banned: false\n      }\n    });\n  } catch (error) {\n    logger.error('Error unbanning user:', error);\n    res.status(500).json({ error: 'Failed to unban user' });\n  }\n});\n\n// POST /api/admin/users/:userId/warn - Issue warning to user\napp.post('/api/admin/users/:userId/warn', authenticateToken, requireModerator, apiRateLimiter, [\n  body('reason').isLength({ min: 1, max: 500 }).trim(),\n  body('duration').optional().isInt({ min: 1, max: 31536000 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { reason, duration } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    await user.warn(reason, req.user._id, duration);\n    await user.save();\n\n    logger.info(`Warning issued to user ${user.nickname} by ${req.user.nickname}`, {\n      warnedUserId: userId,\n      warnedById: req.user._id,\n      reason,\n      duration\n    });\n\n    res.json({\n      message: `Warning issued to user ${user.nickname}`,\n      warning: {\n        reason,\n        issuedBy: req.user.nickname,\n        issuedAt: new Date(),\n        expires: duration ? new Date(Date.now() + duration) : null\n      },\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        warningsCount: user.getActiveWarningsCount()\n      }\n    });\n  } catch (error) {\n    logger.error('Error warning user:', error);\n    res.status(500).json({ error: 'Failed to warn user' });\n  }\n});\n\n// POST /api/admin/users/:userId/role - Change user role\napp.post('/api/admin/users/:userId/role', authenticateToken, requireAdmin, apiRateLimiter, [\n  body('role').isIn(['member', 'moderator', 'admin'])\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { role: newRole } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Prevent modifying your own role in potentially problematic ways\n    if (user._id.toString() === req.user._id.toString()) {\n      return res.status(400).json({ error: 'Cannot modify your own role' });\n    }\n\n    // Prevent non-admin from promoting to admin or demoting admin\n    if ((newRole === 'admin' || user.role === 'admin') && req.user.role !== 'admin') {\n      return res.status(403).json({ error: 'Only administrators can manage admin roles' });\n    }\n\n    const oldRole = user.role;\n    user.role = newRole;\n    await user.save();\n\n    logger.info(`User ${user.nickname} role changed from ${oldRole} to ${newRole} by ${req.user.nickname}`, {\n      changedUserId: userId,\n      changedById: req.user._id,\n      oldRole,\n      newRole\n    });\n\n    res.json({\n      message: `User ${user.nickname} role changed to ${newRole}`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        role: newRole\n      }\n    });\n  } catch (error) {\n    logger.error('Error changing user role:', error);\n    res.status(500).json({ error: 'Failed to change user role' });\n  }\n});\n\n// POST /api/admin/users/:userId/mute - Mute user\napp.post('/api/admin/users/:userId/mute', authenticateToken, requireModerator, apiRateLimiter, [\n  body('duration').isInt({ min: 60, max: 86400 }) // 1 minute to 24 hours\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { duration } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    await user.mute(duration);\n\n    logger.info(`User ${user.nickname} muted by ${req.user.nickname}`, {\n      mutedUserId: userId,\n      mutedById: req.user._id,\n      duration\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been muted`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        muteExpires: user.muteExpires\n      }\n    });\n  } catch (error) {\n    logger.error('Error muting user:', error);\n    res.status(500).json({ error: 'Failed to mute user' });\n  }\n});\n\n// POST /api/admin/users/:userId/unmute - Unmute user\napp.post('/api/admin/users/:userId/unmute', authenticateToken, requireModerator, apiRateLimiter, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    if (!user.isMuted()) {\n      return res.status(400).json({ error: 'User is not muted' });\n    }\n\n    await user.unmute();\n\n    logger.info(`User ${user.nickname} unmuted by ${req.user.nickname}`, {\n      unmutedUserId: userId,\n      unmutedById: req.user._id\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been unmuted`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        muteExpires: null\n      }\n    });\n  } catch (error) {\n    logger.error('Error unmuting user:', error);\n    res.status(500).json({ error: 'Failed to unmute user' });\n  }\n});\n\n/**\n * @swagger\n * /api/users:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get list of all registered users\n *     description: Retrieves a list of all users with their roles and online status\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of users successfully retrieved\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   id:\n *                     type: string\n *                     description: User's unique identifier\n *                   nickname:\n *                     type: string\n *                     description: User's display name\n *                   role:\n *                     type: string\n *                     enum: [admin, moderator, member]\n *                     description: User's role level\n *                   status:\n *                     type: string\n *                     enum: [online, offline]\n *                     description: User's online status\n *                   createdAt:\n *                     type: string\n *                     format: date-time\n *                     description: User registration date\n *                   lastActive:\n *                     type: string\n *                     format: date-time\n *                     description: Last activity timestamp\n *             example:\n *               - id: \"507f1f77bcf86cd799439011\"\n *                 nickname: \"john_doe\"\n *                 role: \"member\"\n *                 status: \"online\"\n *                 createdAt: \"2024-09-07T10:30:00Z\"\n *                 lastActive: \"2024-09-07T22:15:00Z\"\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       500:\n *         description: Server error\n */\nconsole.log('🔧 GET /api/users route registered at startup');\napp.get('/api/users', authenticateToken, apiRateLimiter, async (req, res) => {\n  try {\n    const users = await User.find({})\n      .select('_id nickname role status createdAt lastActive')\n      .sort({ nickname: 1 });\n\n    logger.info(`Users list requested by ${req.user.nickname}`, {\n      userId: req.user._id,\n      totalUsers: users.length\n    });\n\n    console.log('📤 Returning users data:', users.length);\n    res.json(users);\n  } catch (error) {\n    logger.error('Error fetching users:', error);\n    console.error('❌ Error in GET /api/users:', error.message);\n    res.status(500).json({ error: 'Failed to fetch users', code: 'DATABASE_ERROR' });\n  }\n});\n\n// Swagger JSON endpoint\napp.get('/api-docs.json', (req, res) => {\n  res.removeHeader('Content-Security-Policy');\n  res.setHeader('Content-Type', 'application/json');\n  res.send(swaggerSpec);\n});\n\n// Development and test endpoint to reset rate limiting\napp.post('/api/reset-ratelimit', (req, res) => {\n  // In a real application, you'd want to get the store from the limiter instance\n  // For express-rate-limit v7+, you can access the store like this:\n  try {\n    const authLimiterStore = authRateLimiter.store;\n    if (authLimiterStore && typeof authLimiterStore.resetAll === 'function') {\n      authLimiterStore.resetAll();\n      console.log('🔄 Rate limiting reset for testing purposes');\n      res.json({ success: true, message: 'Rate limiting has been reset' });\n    } else {\n      // If store doesn't expose resetAll, create a temporary workaround\n      console.log('⚠️ Rate limiter store doesn\\'t support resetAll - rate limiting will expire naturally');\n      res.json({ success: false, message: 'Cannot reset rate limiting automatically, wait for timeout' });\n    }\n  } catch (error) {\n    console.log('❌ Error resetting rate limiting:', error.message);\n    res.status(500).json({ success: false, error: 'Failed to reset rate limiting' });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Log middleware to check incoming requests\napp.use((req, res, next) => {\n  logger.info(`🔍 Incoming request: ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    headers: req.headers\n  });\n  next();\n});\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n   * @swagger\n   * /api/login:\n   *   post:\n   *     tags:\n   *       - Authentication\n   *     summary: Login existing user\n   *     description: Authenticates and logs in an existing user with JWT token\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             $ref: '#/components/schemas/LoginRequest'\n   *     responses:\n   *       200:\n   *         description: Login successful\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/AuthResponse'\n   *             example:\n   *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n   *               user:\n   *                 id: \"507f1f77bcf86cd799439011\"\n   *                 nickname: \"john_doe\"\n   *                 email: \"john@example.com\"\n   *                 role: \"member\"\n   *       400:\n   *         description: Invalid credentials or validation errors\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/ErrorResponse'\n   *             example:\n   *               error: \"Invalid credentials\"\n   *       500:\n   *         description: Server error\n   */\nconsole.log('🔧 POST /api/login route registered at startup');\napp.post('/api/login', [\n  body('identifier').isLength({ min: 1, max: 50 }).trim(),\n  body('password').isLength({ min: 6, max: 100 })\n], async (req, res) => {\n  try {\n    console.log('🔑 Incoming login request:', { identifier: req.body.identifier, hasPassword: !!req.body.password, ip: req.ip });\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      console.log('❌ Login validation errors:', errors.array());\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { identifier, password } = req.body;\n    console.log('🔍 Searching for user with identifier:', identifier);\n\n    // Find user by nickname or email\n    const user = await User.findOne({\n      $or: [{ nickname: identifier }, { email: identifier }]\n    });\n\n    if (!user) {\n      console.log('❌ User not found:', identifier);\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    console.log('✅ User found:', { nickname: user.nickname, email: user.email, status: user.status });\n\n    // Compare password\n    const isPasswordValid = await user.comparePassword(password);\n    console.log('🔑 Password validation result:', isPasswordValid);\n\n    if (!isPasswordValid) {\n      console.log('❌ Invalid password for user:', user.nickname);\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    // Update user status to online\n    user.status = 'online';\n    await user.save();\n\n    // Store user in session for parallel authentication\n    console.log('🔏 Storing user in session for user:', user.nickname);\n    req.session.authenticated = true;\n    req.session.userId = user._id.toString();\n    req.session.nickname = user.nickname; // Store additional info for convenience\n    req.session.role = user.role;\n    req.session.csrfToken = process.env.JWT_SECRET; // Simple CSRF protection using JWT_SECRET\n    req.session.loginTime = new Date().toISOString();\n    req.session.userAgent = req.get('User-Agent'); // Store user agent for additional security\n\n    // Save session before JWT generation\n    await new Promise((resolve, reject) => {\n      req.session.save((err) => {\n        if (err) {\n          console.error('❌ Session save error:', err);\n          reject(err);\n        } else {\n          console.log('✅ Session saved successfully with CSRF protection');\n          resolve();\n        }\n      });\n    });\n\n    // Generate JWT token\n    console.log('🔏 Generating JWT token for user:', user.nickname);\n    const token = jwt.sign(\n      {\n        userId: user._id,\n        nickname: user.nickname,\n        role: user.role,\n        csrfToken: req.session.csrfToken,\n        sessionId: req.sessionId\n      },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n    console.log('✅ JWT token generated successfully');\n\n    logger.info(`User logged in: ${user.nickname}`);\n\n    console.log('📤 Sending login response');\n    res.json({\n      token, // JWT for API calls and WebSockets\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      },\n      session: {\n        authenticated: true,\n        id: req.sessionId,\n        expires: req.session.cookie.expires\n      }\n    });\n  } catch (error) {\n    logger.error('Login error:', error);\n    res.status(500).json({ error: 'Server error during login' });\n  }\n});\n\n/**\n   * @swagger\n   * /api/register:\n  *   post:\n  *     tags:\n  *       - Authentication\n  *     summary: Register new user\n  *     description: Creates a new user account and returns JWT token\n  *     requestBody:\n  *       required: true\n  *       content:\n  *         application/json:\n  *           schema:\n  *             $ref: '#/components/schemas/RegisterRequest'\n  *           example:\n  *             nickname: \"john_doe\"\n  *             email: \"john@example.com\"\n  *             password: \"securePass123\"\n  *     responses:\n  *       201:\n  *         description: Registration successful\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/AuthResponse'\n  *             example:\n  *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  *               user:\n  *                 id: \"507f1f77bcf86cd799439011\"\n  *                 nickname: \"john_doe\"\n  *                 email: \"john@example.com\"\n  *                 role: \"member\"\n  *       400:\n  *         description: Validation errors or user already exists\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/ErrorResponse'\n  *             example:\n  *               error: \"Nickname already taken\"\n  *       500:\n  *         description: Server error\n  */\napp.post('/api/register', authRateLimiter, [\n  body('nickname').isLength({ min: 3, max: 50 }).trim().escape(),\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { nickname, email, password } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({\n      $or: [{ nickname }, { email }]\n    });\n\n    if (existingUser) {\n      const conflictField = existingUser.nickname === nickname ? 'nickname' : 'email';\n      const errorMessage = conflictField === 'nickname' ? 'Nickname already taken' : 'Email already registered';\n      return res.status(409).json({ error: errorMessage });\n    }\n\n    // Create user\n    const user = new User({ nickname, email, password, role: 'member', status: 'online' });\n    await user.save();\n\n    console.log('🔏 Storing registered user in session');\n    // Store user in session for parallel authentication during registration\n    req.session.authenticated = true;\n    req.session.userId = user._id.toString();\n    req.session.nickname = user.nickname;\n    req.session.role = user.role;\n    req.session.csrfToken = process.env.JWT_SECRET; // CSRF protection\n    req.session.registrationTime = new Date().toISOString();\n    req.session.userAgent = req.get('User-Agent'); // Additional security tracking\n\n    // Save session before JWT generation\n    await new Promise((resolve, reject) => {\n      req.session.save((err) => {\n        if (err) {\n          console.error('❌ Session save error during registration:', err);\n          reject(err);\n        } else {\n          console.log('✅ Session saved successfully during registration with security features');\n          resolve();\n        }\n      });\n    });\n\n    console.log('JWT_SECRET present:', !!process.env.JWT_SECRET);\n    const token = jwt.sign(\n      {\n        userId: user._id,\n        nickname: user.nickname,\n        role: user.role,\n        csrfToken: req.session.csrfToken,\n        sessionId: req.sessionId\n      },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    console.log('JWT token generated successfully');\n    logger.info(`User registered: ${user.nickname}`);\n\n    res.status(201).json({\n      token, // JWT for API calls and WebSockets\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      },\n      session: {\n        authenticated: true,\n        id: req.sessionId,\n        expires: req.session.cookie.expires\n      }\n    });\n  } catch (error) {\n    logger.error('Registration error:', error);\n    res.status(500).json({ error: 'Server error during registration' });\n  }\n});\n\n/**\n * @swagger\n * /api/channels:\n *   get:\n *     tags:\n *       - Channels\n *     summary: Get list of channels\n *     description: Retrieves a list of all available channels\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of channels\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Channel'\n *             example:\n *               - id: \"general\"\n *                 name: \"General\"\n *                 type: \"text\"\n *                 description: \"\"\n *                 createdBy: \"system\"\n *                 position: 0\n *       401:\n *         description: Unauthorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *             example:\n *               error: \"Access token required\"\n *       500:\n *         description: Internal server error\n */\nconsole.log('🔧 GET /api/channels route registered at startup');\napp.get('/api/channels', authenticateToken, apiRateLimiter, async (req, res) => {\n  console.log('🚀 GET /api/channels endpoint called', { method: req.method, url: req.url, headers: req.headers.authorization ? 'auth header present' : 'no auth header' });\n  try {\n    const channels = await Channel.find({})\n      .select('-_id id name type description createdBy position')\n      .sort({ position: 1 });\n\n    logger.info(`Channels list requested by ${req.user.nickname}`, {\n      userId: req.user._id,\n      channelCount: channels.length\n    });\n\n    console.log('📤 Returning channels data:', channels.length);\n    res.json(channels);\n  } catch (error) {\n    logger.error('Error fetching channels:', error);\n    console.error('❌ Error in GET /api/channels:', error.message);\n    res.status(500).json({ error: 'Failed to fetch channels', code: 'DATABASE_ERROR' });\n  }\n});\n\nconsole.log('🔧 POST /api/channels route registered at startup');\n\n/**\n * @swagger\n * /api/channels:\n *   post:\n *     tags:\n *       - Channels\n *     summary: Create a new channel\n *     description: Creates a new text or voice channel\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/ChannelRequest'\n *           example:\n *             name: \"NewChannel\"\n *             type: \"text\"\n *             description: \"Description of the new channel\"\n *     responses:\n *       201:\n *         description: Channel created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Channel'\n *             example:\n *               id: \"newchannel\"\n *               name: \"NewChannel\"\n *               type: \"text\"\n *               description: \"Description of the new channel\"\n *               createdBy: \"john_doe\"\n *               position: 10\n *       400:\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       401:\n *         description: Unauthorized\n *       409:\n *         description: Channel name already exists\n *       500:\n *         description: Server error\n */\napp.post('/api/channels', authenticateToken, apiRateLimiter, [\n  body('name').isLength({ min: 1, max: 100 }).trim().escape(),\n  body('type').isIn(['text', 'voice']).trim(),\n  body('description').optional().isLength({ max: 500 }).trim()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { name, type, description } = req.body;\n    const createdBy = req.user.nickname;\n\n    // Create new channel (ID will be auto-generated in pre-save middleware)\n    const channel = new Channel({\n      name,\n      type,\n      description,\n      createdBy\n    });\n\n    await channel.save();\n\n    logger.info(`Channel '${name}' created by ${createdBy}`, {\n      channelId: channel.id,\n      type,\n      userId: req.user._id\n    });\n\n    res.status(201).json({\n      id: channel.id,\n      name: channel.name,\n      type: channel.type,\n      description: channel.description,\n      createdBy: channel.createdBy,\n      position: channel.position\n    });\n\n  } catch (error) {\n    logger.error('Error creating channel:', error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        error: 'Invalid channel data',\n        details: error.message\n      });\n    }\n\n    if (error.code === 11000) {\n      return res.status(409).json({\n        error: 'Channel name already exists',\n        code: 'DUPLICATE_CHANNEL'\n      });\n    }\n\n    res.status(500).json({\n      error: 'Failed to create channel',\n      code: 'DATABASE_ERROR'\n    });\n  }\n});\n\nconsole.log('🔧 POST /api/logout route registered at startup');\napp.post('/api/logout', authenticateToken, apiRateLimiter, async (req, res) => {\n  try {\n    console.log('🚪 Logout request from user:', req.user.nickname, { userId: req.user._id });\n\n    // Disconnect all Socket.IO connections for this user\n    const sockets = onlineUsers;\n    let disconnectedCount = 0;\n    for (const [socketId, socketData] of sockets.entries()) {\n      if (socketData.userId === req.user._id.toString()) {\n        const socket = io.sockets.sockets.get(socketId);\n        if (socket) {\n          socket.disconnect();\n          disconnectedCount++;\n        }\n      }\n    }\n\n    // Update user status to offline\n    await User.findByIdAndUpdate(req.user._id, {\n      status: 'offline',\n      lastActive: new Date()\n    });\n\n    console.log(`✅ User ${req.user.nickname} logged out successfully, ${disconnectedCount} connections disconnected`);\n    logger.info(`User logged out: ${req.user.nickname}`, {\n      userId: req.user._id,\n      disconnectedSockets: disconnectedCount\n    });\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully',\n      disconnectedCount\n    });\n  } catch (error) {\n    logger.error('Logout error:', error);\n    res.status(500).json({ error: 'Server error during logout' });\n  }\n});\n\n/**\n * Session logout endpoint - destroys session\n * This complements JWT logout to handle session-based authentication\n */\napp.post('/api/logout_session', apiRateLimiter, async (req, res) => {\n  try {\n    console.log('🚪 Session logout request, sessionId:', req.sessionId);\n\n    // Check if there's an authenticated session or JWT user\n    const hasJwtAuth = !!req.user; // From JWT middleware\n    const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n    const sessionUserId = req.session && req.session.userId;\n\n    console.log('🤔 Session logout check:', {\n      hasJwtAuth,\n      hasSessionAuth,\n      sessionUserId,\n      sessionId: req.sessionId\n    });\n\n    if (hasSessionAuth) {\n      const sessionUser = sessionUserId ? await User.findById(sessionUserId) : null;\n      const nickname = sessionUser ? sessionUser.nickname : 'unknown';\n\n      console.log('✅ Session logout: Destroying session for user:', nickname);\n\n      // Disconnect Socket.IO connections for this session user\n      if (sessionUserId) {\n        const sockets = onlineUsers;\n        let disconnectedCount = 0;\n        for (const [socketId, socketData] of sockets.entries()) {\n          if (socketData.userId === sessionUserId) {\n            const socket = io.sockets.sockets.get(socketId);\n            if (socket) {\n              socket.disconnect();\n              disconnectedCount++;\n            }\n          }\n        }\n\n        console.log(`🗑️ Session logout: Disconnected ${disconnectedCount} socket connections`);\n      }\n\n      // Destroy the session\n      await new Promise((resolve, reject) => {\n        req.session.destroy((err) => {\n          if (err) {\n            console.error('❌ Session destroy error:', err);\n            reject(err);\n          } else {\n            console.log('✅ Session destroyed successfully');\n            resolve();\n          }\n        });\n      });\n\n      logger.info(`Session logged out: ${nickname}`, {\n        sessionId: req.sessionId,\n        ip: req.ip\n      });\n\n      res.json({\n        success: true,\n        message: 'Session logged out successfully',\n        type: 'session_logout',\n        sessionDestroyed: true\n      });\n    } else {\n      console.log('⚠️ Session logout: No authenticated session to destroy');\n      res.json({\n        success: true,\n        message: 'No active session to log out',\n        type: 'session_logout',\n        sessionDestroyed: false\n      });\n    }\n\n  } catch (error) {\n    logger.error('Session logout error:', error);\n    res.status(500).json({\n      error: 'Server error during session logout',\n      code: 'SESSION_LOGOUT_ERROR'\n    });\n  }\n});\n\n// Hybrid logout endpoint - handles both JWT and session logout\napp.post('/api/logout_complete', apiRateLimiter, async (req, res) => {\n  try {\n    console.log('🚪 Complete logout request (JWT + Session), sessionId:', req.sessionId);\n\n    const hasJwtAuth = !!req.user;\n    const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n    const sessionUserId = req.session && req.session.userId;\n\n    let jwtLogoutResult = null;\n    let sessionLogoutResult = null;\n\n    // Handle JWT logout if JWT is provided\n    if (hasJwtAuth) {\n      try {\n        const sockets = onlineUsers;\n        let disconnectedCount = 0;\n        for (const [socketId, socketData] of sockets.entries()) {\n          if (socketData.userId === req.user._id.toString()) {\n            const socket = io.sockets.sockets.get(socketId);\n            if (socket) {\n              socket.disconnect();\n              disconnectedCount++;\n            }\n          }\n        }\n\n        await User.findByIdAndUpdate(req.user._id, {\n          status: 'offline',\n          lastActive: new Date()\n        });\n\n        jwtLogoutResult = {\n          success: true,\n          disconnectedCount\n        };\n      } catch (jwtError) {\n        jwtLogoutResult = {\n          success: false,\n          error: jwtError.message\n        };\n      }\n    }\n\n    // Handle session logout if session exists\n    if (hasSessionAuth) {\n      try {\n        if (sessionUserId) {\n          const sessionUser = await User.findById(sessionUserId);\n          console.log('✅ Session logout: Destroying session for user:', sessionUser ? sessionUser.nickname : 'unknown');\n\n          // Disconnect Socket.IO connections for this session user\n          const sockets = onlineUsers;\n          let disconnectedCount = 0;\n          for (const [socketId, socketData] of sockets.entries()) {\n            if (socketData.userId === sessionUserId) {\n              const socket = io.sockets.sockets.get(socketId);\n              if (socket) {\n                socket.disconnect();\n                disconnectedCount++;\n              }\n            }\n          }\n          console.log(`🗑️ Session logout: Disconnected ${disconnectedCount} socket connections`);\n        }\n\n        // Destroy the session\n        await new Promise((resolve, reject) => {\n          req.session.destroy((err) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        });\n\n        sessionLogoutResult = {\n          success: true,\n          sessionDestroyed: true\n        };\n      } catch (sessionError) {\n        sessionLogoutResult = {\n          success: false,\n          error: sessionError.message\n        };\n      }\n    }\n\n    const overallSuccess = (!jwtLogoutResult || jwtLogoutResult.success) &&\n                          (!sessionLogoutResult || sessionLogoutResult.success);\n\n    res.json({\n      success: overallSuccess,\n      message: 'Complete logout processed',\n      type: 'complete_logout',\n      jwt: jwtLogoutResult,\n      session: sessionLogoutResult\n    });\n\n  } catch (error) {\n    logger.error('Complete logout error:', error);\n    res.status(500).json({\n      error: 'Server error during complete logout',\n      code: 'COMPLETE_LOGOUT_ERROR'\n    });\n  }\n});\n\n//  404 handler (must be before global error handler)\napp.use((req, res) => {\n  console.warn('❌ Final 404 handler executed - route not found!', { method: req.method, url: req.url });\n  logger.warn(`404 - ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  res.status(404).json({\n    error: 'Endpoint not found',\n    path: req.url,\n    method: req.method,\n    code: 'NOT_FOUND'\n  });\n});\n\n// Global error handling middleware (must be last)\napp.use(errorHandler);\n\n\n\n\n\n\n\n\n\n// Global users map for socket management {socketId: {userId, nickname, room}}\nlet onlineUsers = new Map();\n\n// User connection counter {userId: connectionCount}\nlet userConnections = new Map();\n\n// Voice channels management\nconst voiceChannels = new Map(); // channelId -> { socketId: { peerConnection, stream } }\n\n// Enable session support for Socket.IO\nio.use(sessionMiddleware);\n\n// Socket.IO authentication middleware\nio.use(async (socket, next) => {\n  const { sessionId, csrfToken } = socket.handshake.auth;\n  const session = socket.request.session;\n\n  console.log('🔑 Socket authentication attempt with session and CSRF');\n\n  // Validate session exists and has authentication\n  if (!session || !session.authenticated || !session.userId) {\n    console.log('❌ Socket authentication failed: No authenticated session');\n    return next(new Error('Session authentication required'));\n  }\n\n  // Validate CSRF token for additional security (simplified for now - use JWT_SECRET)\n  if (!csrfToken || csrfToken !== process.env.JWT_SECRET) {\n    console.log('❌ Socket authentication failed: Invalid CSRF token');\n    return next(new Error('CSRF validation failed'));\n  }\n\n  try {\n    // Verify user exists in database\n    const user = await User.findById(session.userId);\n    if (!user) {\n      console.log('❌ Socket authentication failed: User not found in DB');\n      return next(new Error('User not found in session'));\n    }\n\n    // Handle user status update based on connection count\n    const userId = session.userId;\n    const connectionCount = userConnections.get(userId) || 0;\n    const newConnectionCount = connectionCount + 1;\n    userConnections.set(userId, newConnectionCount);\n\n    // Check if user is banned\n    if (user.isBanned()) {\n      console.log('❌ Socket authentication failed: User is banned', {\n        userId: userId,\n        nickname: user.nickname,\n        banReason: user.banReason,\n        banExpires: user.banExpires\n      });\n      socket.emit('banned', {\n        reason: user.banReason || 'You have been banned from the server',\n        expires: user.banExpires\n      });\n      return next(new Error('User is banned'));\n    }\n\n    // Check if user is muted and enforce mute in chat\n    const isMuted = user.isMuted();\n    console.log('🔇 User mute status checked:', { nickname: user.nickname, isMuted, muteExpires: user.muteExpires });\n\n    // Update user status with connection count tracking\n    const updateResult = await User.findOneAndUpdate(\n      { _id: userId },\n      {\n        $set: {\n          status: newConnectionCount > 0 ? 'online' : 'offline',\n          lastActive: new Date()\n        }\n      },\n      {\n        new: true,\n        runValidators: true\n      }\n    );\n\n    if (updateResult) {\n      console.log(`🔄 Socket auth: User ${user.nickname} status set to online (connections: ${newConnectionCount})`);\n      logger.info(`User status updated to online via socket auth`, {\n        userId: userId,\n        nickname: user.nickname,\n        connections: newConnectionCount,\n        socketId: socket.id,\n        timestamp: new Date()\n      });\n    }\n\n    // Override local user object with updated data\n    user.status = updateResult ? updateResult.status : 'online';\n    user.lastActive = updateResult ? updateResult.lastActive : new Date();\n\n    // Set socket properties for authenticated user\n    socket.userId = session.userId;\n    socket.nickname = session.nickname;\n    socket.role = session.role || 'member';\n    console.log(`🎉 Socket authenticated via session: ${socket.nickname} (userId: ${socket.userId})`);\n    return next();\n\n  } catch (error) {\n    console.error('❌ Socket authentication error:', error.message);\n    logger.error(`Socket auth failed: ${error.message}`, {\n      socketId: socket.id,\n      sessionId: session?.id,\n      ip: socket.handshake.address\n    });\n    return next(new Error('Socket authentication failed'));\n  }\n});\n\n/**\n * Cleanup inactive connections based on heartbeat\n */\nfunction cleanupInactiveConnections() {\n  const now = Date.now();\n  const timeout = 60000; // 60 seconds timeout\n\n  for (const [socketId, user] of onlineUsers.entries()) {\n    if (now - user.lastHeartbeat > timeout) {\n      console.log(`🧹 Cleansing dead connection for user ${user.nickname}`);\n\n      // Force disconnect socket\n      const socket = io.sockets.sockets.get(socketId);\n      if (socket) {\n        socket.disconnect(true);\n      }\n\n      // Update user connections count\n      const connectionsLeft = (userConnections.get(user.userId) || 0) - 1;\n      userConnections.set(user.userId, Math.max(0, connectionsLeft));\n\n      // Set status to offline if last connection\n      if (connectionsLeft <= 0) {\n        User.findByIdAndUpdate(user.userId, {\n          status: 'offline',\n          lastActive: new Date()\n        }).catch(err => logger.error('Error updating status on cleanup:', err));\n\n        console.log(`🔄 User ${user.nickname} status set to offline (dead connection)`);\n        logger.info(`User status set to offline due to dead connection`, {\n          userId: user.userId,\n          nickname: user.nickname,\n          socketId: socketId\n        });\n      }\n\n      onlineUsers.delete(socketId);\n    }\n  }\n}\n\n// Run cleanup every 30 seconds - DISABLED for test environment\nif (process.env.NODE_ENV !== 'test') {\n  setInterval(cleanupInactiveConnections, 30000);\n}\n\nio.on('connection', async (socket) => {\n  console.log('🚀 Socket connection established');\n  console.log(`👤 User ${socket.nickname} connected`);\n\n  // Track online user\n  onlineUsers.set(socket.id, {\n    userId: socket.userId,\n    nickname: socket.nickname,\n    role: socket.role,\n    room: null,\n    lastHeartbeat: Date.now()\n  });\n\n  // Log current active connections count\n  console.log(`📊 Active socket connections: ${onlineUsers.size} - auth success for ${socket.nickname}`);\n\n  // Heartbeat mechanism\n  socket.on('heartbeat', () => {\n    const user = onlineUsers.get(socket.id);\n    if (user) {\n      user.lastHeartbeat = Date.now();\n      console.log(`💓 Heartbeat received from user ${socket.nickname}`);\n    }\n  });\n\n  // Update heartbeat on user activity\n  const updateHeartbeat = () => {\n    const user = onlineUsers.get(socket.id);\n    if (user) {\n      user.lastHeartbeat = Date.now();\n    }\n  };\n\n  socket.on('join_room', async (data) => {\n    updateHeartbeat();\n    const { room } = data;\n    if (!room) {\n      logger.warn('Join room failed: No room specified', {\n        userId: socket.userId,\n        nickname: socket.nickname\n      });\n      socket.emit('error', {\n        message: 'Room name is required',\n        code: 'MISSING_ROOM',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    if (typeof room !== 'string' || room.trim().length === 0) {\n      logger.warn('Join room failed: Invalid room format', {\n        userId: socket.userId,\n        nickname: socket.nickname,\n        room\n      });\n      socket.emit('error', {\n        message: 'Invalid room name format',\n        code: 'INVALID_ROOM_FORMAT',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    try {\n      // Verify channel exists\n      const channel = await Channel.findOne({ id: room });\n      if (!channel) {\n        logger.warn('Join room failed: Channel not found', {\n          userId: socket.userId,\n          nickname: socket.nickname,\n          room\n        });\n        socket.emit('error', {\n          message: `Channel '${room}' not found`,\n          code: 'CHANNEL_NOT_FOUND',\n          room,\n          timestamp: new Date().toISOString()\n        });\n        return;\n      }\n\n      // Leave previous room\n      if (socket.room) {\n        socket.leave(socket.room);\n        onlineUsers.set(socket.id, { ...onlineUsers.get(socket.id), room: null });\n\n        // Update online users in previous room\n        const previousRoomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', previousRoomUsers);\n      }\n\n      socket.room = room;\n      socket.join(socket.room);\n\n      // Update user tracking\n      onlineUsers.set(socket.id, {\n        ...onlineUsers.get(socket.id),\n        room: socket.room\n      });\n\n      logger.info(`User ${socket.nickname} joined room ${socket.room}`);\n\n      // Send system message about joining\n      const joinMessage = new Message({\n        author: 'System',\n        channel: socket.room,\n        text: `${socket.nickname} joined the channel.`,\n        type: 'system'\n      });\n      await joinMessage.save();\n\n      io.to(socket.room).emit('message', {\n        author: joinMessage.author,\n        channel: joinMessage.channel,\n        text: joinMessage.text,\n        type: joinMessage.type,\n        timestamp: joinMessage.timestamp\n      });\n\n      // Send online users in current room\n      const roomUsers = Array.from(onlineUsers.values())\n        .filter(u => u.room === socket.room)\n        .map(u => ({ nickname: u.nickname, role: u.role }));\n      io.to(socket.room).emit('online_users', roomUsers);\n\n      // Send message history\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n\n    } catch (error) {\n      logger.error('Error in join_room:', error);\n      socket.emit('error', { message: 'Failed to join room' });\n    }\n  });\n\n  // Load history (fallback, if needed)\n  socket.on('get_history', async () => {\n    if (!socket.room) {\n      socket.emit('history', []);\n      return;\n    }\n\n    try {\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel, // Using channel instead of room for consistency\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n    } catch (error) {\n      logger.error('Error getting history:', error);\n      socket.emit('error', { message: 'Failed to load message history' });\n    }\n  });\n\n  // Public message\n  socket.on('message', async (data) => {\n    updateHeartbeat();\n    if (!socket.room || !data.text?.trim()) return;\n\n    // Check if user is muted\n    const currentUser = await User.findById(socket.userId);\n    if (currentUser && currentUser.isMuted()) {\n      socket.emit('error', {\n        message: 'You are muted and cannot send messages',\n        code: 'USER_MUTED',\n        muteExpires: currentUser.muteExpires\n      });\n      return;\n    }\n\n    try {\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: data.text.trim(),\n        type: 'public'\n      });\n\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel, // Keeping 'room' for frontend compatibility\n        text: message.text,\n        timestamp: message.timestamp,\n        status: 'delivered',\n        type: message.type\n      };\n\n      io.to(socket.room).emit('message', messageData);\n      logger.debug(`Message saved from ${socket.nickname} in ${socket.room}`);\n    } catch (error) {\n      logger.error('Error saving message:', error);\n      socket.emit('error', { message: 'Failed to send message' });\n    }\n  });\n\n  // Private message\n  socket.on('private_message', async (data) => {\n    updateHeartbeat();\n    if (!socket.room || !data.to || !data.text?.trim()) return;\n\n    const trimmedText = data.text.trim();\n    const targetNickname = data.to.trim();\n\n    try {\n      logger.debug(`Private message attempt from ${socket.nickname} to ${targetNickname}`, {\n        senderRoom: socket.room,\n        senderSocketId: socket.id,\n        userId: socket.userId\n      });\n\n      // Validate target nickname format\n      if (targetNickname.length === 0 || targetNickname.length > 50) {\n        socket.emit('error', {\n          message: 'Invalid target user nickname',\n          code: 'INVALID_TARGET_NICKNAME'\n        });\n        return;\n      }\n\n      // Prevent self-messaging\n      if (targetNickname === socket.nickname) {\n        socket.emit('error', {\n          message: 'Cannot send private message to yourself',\n          code: 'SELF_MESSAGE_NOT_ALLOWED'\n        });\n        return;\n      }\n\n      // Find target user in same room with detailed logging\n      const targetUser = Array.from(onlineUsers.values()).find(\n        u => u.nickname === targetNickname && u.room === socket.room\n      );\n\n      logger.debug(`Private message target search result for ${targetNickname}`, {\n        targetFound: !!targetUser,\n        targetRoom: targetUser?.room,\n        senderRoom: socket.room,\n        onlineUsersInRoom: Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, room: u.room }))\n      });\n\n      if (!targetUser) {\n        // Enhanced error message with more context\n        const onlineUsersInSenderRoom = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => u.nickname);\n\n        socket.emit('error', {\n          message: `User '${targetNickname}' is not available in this channel. Available users: ${onlineUsersInSenderRoom.join(', ') || 'none'}`,\n          code: 'TARGET_USER_NOT_IN_ROOM',\n          target: targetNickname,\n          availableUsers: onlineUsersInSenderRoom,\n          senderRoom: socket.room\n        });\n        return;\n      }\n\n      // Create message object\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'private',\n        target: targetNickname\n      });\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: message.target,\n        status: 'delivered'\n      };\n\n      // Send to target user with error handling\n      const targetSocketId = Array.from(onlineUsers.keys()).find(\n        id => onlineUsers.get(id).nickname === targetNickname\n      );\n\n      if (targetSocketId) {\n        io.to(targetSocketId).emit('private_message', messageData);\n        logger.debug(`Private message sent to target ${targetNickname}`, {\n          targetSocketId: targetSocketId,\n          sender: socket.nickname,\n          room: socket.room,\n          messageId: message._id\n        });\n      } else {\n        logger.warn(`Target user ${targetNickname} found in onlineUsers but socket ID not found`, {\n          targetNickname,\n          room: socket.room,\n          onlineUsersCount: onlineUsers.size,\n          messageId: message._id\n        });\n        // Message still saved to database for later delivery if user reconnects\n      }\n\n      // Send confirmation to sender (without target for privacy)\n      socket.emit('private_message', {\n        author: message.author,\n        room: message.room,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: null, // Hide target from sender's confirmation\n        status: 'sent'\n      });\n\n      logger.info(`Private message sent successfully`, {\n        sender: socket.nickname,\n        target: targetNickname,\n        room: socket.room,\n        messageId: message._id,\n        messageLength: trimmedText.length\n      });\n\n    } catch (error) {\n      logger.error('Error sending private message:', {\n        error: error.message,\n        sender: socket.nickname,\n        target: data.to,\n        room: socket.room,\n        userId: socket.userId,\n        stack: error.stack\n      });\n      socket.emit('error', {\n        message: 'Failed to send private message',\n        code: 'PRIVATE_MESSAGE_FAILED'\n      });\n    }\n  });\n\n  // Speaking\n  socket.on('speaking', (data) => {\n    updateHeartbeat();\n    socket.to(socket.room).emit('speaking', { nickname: socket.nickname, speaking: data.speaking });\n  });\n\n  // Voice channel events\n  socket.on('join_voice_channel', async (data) => {\n    updateHeartbeat();\n    const { channelId } = data;\n    if (!channelId) return;\n\n    try {\n      // Verify channel exists and is voice\n      const channel = await Channel.findOne({ id: channelId, type: 'voice' });\n      if (!channel) {\n        socket.emit('voice_error', { message: 'Voice channel not found' });\n        return;\n      }\n\n      // Initialize voice channel if not exists\n      if (!voiceChannels.has(channelId)) {\n        voiceChannels.set(channelId, new Map());\n      }\n\n      const channelPeers = voiceChannels.get(channelId);\n\n      // Notify others in the channel\n      socket.to(channelId).emit('user_joined_voice', { nickname: socket.nickname, socketId: socket.id });\n\n      // Add socket to voice channel room\n      socket.join(channelId);\n      channelPeers.set(socket.id, { peerConnection: null, stream: null });\n\n      // Update user's voice channel status\n      socket.voiceChannel = channelId;\n\n      logger.info(`User ${socket.nickname} joined voice channel ${channelId}`);\n      socket.emit('voice_joined', { channelId });\n\n    } catch (error) {\n      logger.error('Error joining voice channel:', error);\n      socket.emit('voice_error', { message: 'Failed to join voice channel' });\n    }\n  });\n\n  socket.on('leave_voice_channel', () => {\n    updateHeartbeat();\n    if (!socket.voiceChannel) return;\n\n    const channelId = socket.voiceChannel;\n    const channelPeers = voiceChannels.get(channelId);\n\n    if (channelPeers) {\n      channelPeers.delete(socket.id);\n      if (channelPeers.size === 0) {\n        voiceChannels.delete(channelId);\n      }\n    }\n\n    // Notify others\n    socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n\n    socket.leave(channelId);\n    socket.voiceChannel = null;\n\n    logger.info(`User ${socket.nickname} left voice channel ${channelId}`);\n    socket.emit('voice_left');\n  });\n\n  socket.on('voice_offer', (data) => {\n    const { offer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_offer', {\n      offer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('voice_answer', (data) => {\n    const { answer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_answer', {\n      answer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('ice_candidate', (data) => {\n    const { candidate, targetSocketId } = data;\n    socket.to(targetSocketId).emit('ice_candidate', {\n      candidate,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  // Disconnect\n  socket.on('disconnect', async () => {\n    logger.info(`User ${socket.nickname} disconnected`);\n\n    try {\n      const userId = socket.userId;\n\n      // Decrease connection count for this user\n      if (userId) {\n        const currentCount = userConnections.get(userId) || 0;\n        const newCount = Math.max(0, currentCount - 1);\n        userConnections.set(userId, newCount);\n\n        logger.info(`User ${socket.nickname} disconnected (remaining connections: ${newCount})`, {\n          userId: userId,\n          socketId: socket.id,\n          connectionsLeft: newCount\n        });\n      }\n\n      // Leave voice channel if in one\n      if (socket.voiceChannel) {\n        const channelId = socket.voiceChannel;\n        const channelPeers = voiceChannels.get(channelId);\n\n        if (channelPeers) {\n          channelPeers.delete(socket.id);\n          if (channelPeers.size === 0) {\n            voiceChannels.delete(channelId);\n          }\n        }\n\n        // Notify others\n        socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n      }\n\n      if (socket.room) {\n        socket.leave(socket.room);\n\n        // Create leave message\n        const leaveMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} left the channel.`,\n          type: 'system'\n        });\n        await leaveMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: leaveMessage.author,\n          room: leaveMessage.channel,\n          text: leaveMessage.text,\n          type: leaveMessage.type,\n          timestamp: leaveMessage.timestamp\n        });\n\n        // Update online users list\n        const roomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room && u.userId !== socket.userId)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', roomUsers);\n      }\n\n      // Remove from tracking\n      onlineUsers.delete(socket.id);\n\n      // Log current connections after disconnect\n      logger.info(`After disconnect, active socket connections: ${onlineUsers.size}`);\n\n      // Update user status in database if this was the last connection\n      if (userId) {\n        const remainingConnections = userConnections.get(userId) || 0;\n        if (remainingConnections === 0) {\n          await User.findByIdAndUpdate(userId, {\n            status: 'offline',\n            lastActive: new Date()\n          });\n          console.log(`🔄 User ${socket.nickname} status set to offline (last connection)`);\n          logger.info(`User status set to offline (last connection)`, {\n            userId: userId,\n            nickname: socket.nickname\n          });\n        } else {\n          // Update lastActive but keep status online\n          await User.findByIdAndUpdate(userId, {\n            lastActive: new Date()\n          });\n          console.log(`✅ User ${socket.nickname} still online (${remainingConnections} connections left)`);\n          logger.info(`User remains online`, {\n            userId: userId,\n            nickname: socket.nickname,\n            connectionsLeft: remainingConnections\n          });\n        }\n      }\n\n    } catch (error) {\n      logger.error('Error in disconnect handler:', error);\n    }\n });\n});\n\n// Initialize database and start server (duplicate removed)\nconst initializeServer = async () => {\n  try {\n    // Connect to MongoDB\n    await connectDB();\n\n    // Create default channels if they don't exist\n    const defaultChannels = [\n      { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n      { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' }\n    ];\n\n    for (const channelData of defaultChannels) {\n      await Channel.findOneAndUpdate(\n        { id: channelData.id },\n        channelData,\n        { upsert: true, new: true }\n      );\n    }\n\n    logger.info('Default channels initialized');\n\n    // Start server\n    const PORT = process.env.PORT || 3001;\n    server.listen(PORT, '0.0.0.0', () => {\n      logger.info(`Server running on port ${PORT}`);\n      console.log(`Server running on port ${PORT}`);\n    });\n\n  } catch (error) {\n    logger.error('Failed to initialize server:', error);\n    process.exit(1);\n  }\n};\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  logger.info('Received SIGINT, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGTERM', async () => {\n  logger.info('Received SIGTERM, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\n// Start the server\ninitializeServer().catch(err => {\n  logger.error('Unhandled error during server startup:', err);\n  process.exit(1);\n});\n"],"mappings":"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","ignoreList":[]}