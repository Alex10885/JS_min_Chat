{"version":3,"names":["cov_21u3q33p0c","actualCoverage","winston","s","require","CIRCUIT_STATES","CLOSED","OPEN","HALF_OPEN","CircuitBreaker","constructor","options","b","f","failureThreshold","timeout","monitorInterval","successThreshold","state","failureCount","successCount","nextAttempt","callTimeout","logger","createLogger","level","format","combine","timestamp","errors","stack","json","transports","File","filename","Console","colorize","simple","startMonitoring","execute","operation","fallback","isOpen","Error","isHalfOpen","attemptRecovery","safeExecute","isClosed","setTimeout","recordFailure","result","clearTimeout","recordSuccess","error","reset","trip","warn","threshold","message","Date","toISOString","now","info","attempt","setInterval","debug","getStatus","ExternalServiceBreaker","emailBreaker","redisBreaker","databaseBreaker","executeWithEmailBreaker","log","status","executeWithRedisBreaker","executeWithDatabaseBreaker","getAllStatuses","emailService","redis","database","externalServiceBreaker","circuitBreakerMiddleware","breakerType","req","res","next","circuitBreakerStatus","endpoint","url","method","asyncOptimize","fn","concurrency","running","queue","args","Promise","resolve","reject","push","startTime","timeoutPromise","_","timeoutReject","race","apply","executionTime","slowThreshold","functionName","name","length","shift","setImmediate","bind","module","exports","protectEmail","protectRedis","protectDatabase","getCircuitBreakerStatuses"],"sources":["circuitBreaker.js"],"sourcesContent":["const winston = require('winston');\n\n// Circuit breaker states\nconst CIRCUIT_STATES = {\n  CLOSED: 'closed',\n  OPEN: 'open',\n  HALF_OPEN: 'half-open'\n};\n\n// Circuit breaker class for protecting external services\nclass CircuitBreaker {\n  constructor(options = {}) {\n    this.failureThreshold = options.failureThreshold || 5;\n    this.timeout = options.timeout || 10000;\n    this.monitorInterval = options.monitorInterval || 60000; // 1 minute\n    this.successThreshold = options.successThreshold || 2;\n\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.nextAttempt = 0;\n\n    this.callTimeout = null;\n\n    // Logger setup\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n      ),\n      transports: [\n        new winston.transports.File({ filename: 'logs/circuit-breaker.log' }),\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        })\n      ]\n    });\n\n    this.startMonitoring();\n  }\n\n  // Execute function with circuit breaker protection\n  async execute(operation, fallback = null) {\n    if (this.isOpen()) {\n      if (fallback) {\n        return await fallback();\n      }\n      throw new Error('Circuit breaker is OPEN');\n    }\n\n    if (this.isHalfOpen()) {\n      return await this.attemptRecovery(operation);\n    }\n\n    return await this.safeExecute(operation);\n  }\n\n  // Check if circuit is open (rejecting requests)\n  isOpen() {\n    return this.state === CIRCUIT_STATES.OPEN;\n  }\n\n  // Check if circuit is half-open (testing recovery)\n  isHalfOpen() {\n    return this.state === CIRCUIT_STATES.HALF_OPEN;\n  }\n\n  // Check if circuit is closed (normal operation)\n  isClosed() {\n    return this.state === CIRCUIT_STATES.CLOSED;\n  }\n\n  // Safe execute with failure tracking\n  async safeExecute(operation) {\n    try {\n      this.callTimeout = setTimeout(() => {\n        this.recordFailure();\n        throw new Error('Circuit breaker timeout');\n      }, this.timeout);\n\n      const result = await operation();\n\n      clearTimeout(this.callTimeout);\n      this.recordSuccess();\n\n      return result;\n    } catch (error) {\n      clearTimeout(this.callTimeout);\n      this.recordFailure();\n      throw error;\n    }\n  }\n\n  // Attempt recovery when circuit is half-open\n  async attemptRecovery(operation) {\n    try {\n      const result = await this.safeExecute(operation);\n      this.successCount++;\n\n      if (this.successCount >= this.successThreshold) {\n        this.reset();\n      }\n\n      return result;\n    } catch (error) {\n      this.recordFailure(error);\n      throw error;\n    }\n  }\n\n  // Record successful operation\n  recordSuccess() {\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.state = CIRCUIT_STATES.CLOSED;\n  }\n\n  // Record failed operation\n  recordFailure(error = null) {\n    this.failureCount++;\n    this.successCount = 0;\n\n    if (this.failureCount >= this.failureThreshold) {\n      this.trip();\n    }\n\n    if (error) {\n      this.logger.warn('Circuit breaker failure recorded', {\n        failureCount: this.failureCount,\n        threshold: this.failureThreshold,\n        error: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  // Trip circuit to open state\n  trip() {\n    this.state = CIRCUIT_STATES.OPEN;\n    this.nextAttempt = Date.now() + this.timeout;\n\n    this.logger.warn('Circuit breaker tripped to OPEN state', {\n      failureCount: this.failureCount,\n      nextAttempt: new Date(this.nextAttempt).toISOString(),\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Reset circuit breaker\n  reset() {\n    this.state = CIRCUIT_STATES.CLOSED;\n    this.failureCount = 0;\n    this.successCount = 0;\n\n    this.logger.info('Circuit breaker reset to CLOSED state', {\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Force attempt recovery (move to half-open)\n  attempt() {\n    if (this.isOpen() && Date.now() >= this.nextAttempt) {\n      this.state = CIRCUIT_STATES.HALF_OPEN;\n      this.successCount = 0;\n\n      this.logger.info('Circuit breaker attempting recovery (HALF-OPEN)', {\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  // Start monitoring circuit state\n  startMonitoring() {\n    setInterval(() => {\n      if (this.isOpen() && Date.now() >= this.nextAttempt) {\n        this.attempt();\n      }\n\n      // Log current state\n      this.logger.debug('Circuit breaker status', {\n        state: this.state,\n        failureCount: this.failureCount,\n        successCount: this.successCount,\n        timestamp: new Date().toISOString()\n      });\n    }, this.monitorInterval);\n  }\n\n  // Get current status\n  getStatus() {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      failureThreshold: this.failureThreshold,\n      successThreshold: this.successThreshold,\n      timeout: this.timeout,\n      nextAttempt: this.isOpen() ? new Date(this.nextAttempt).toISOString() : null\n    };\n  }\n}\n\n// Service-specific circuit breakers\nclass ExternalServiceBreaker {\n  constructor() {\n    // Circuit breaker for email service\n    this.emailBreaker = new CircuitBreaker({\n      failureThreshold: 3,\n      timeout: 30000,\n      monitorInterval: 30000,\n      successThreshold: 2\n    });\n\n    // Circuit breaker for Redis\n    this.redisBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      timeout: 5000,\n      monitorInterval: 15000,\n      successThreshold: 3\n    });\n\n    // Circuit breaker for database operations\n    this.databaseBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      timeout: 15000,\n      monitorInterval: 20000,\n      successThreshold: 3\n    });\n  }\n\n  // Email service protection\n  async executeWithEmailBreaker(operation) {\n    return await this.emailBreaker.execute(\n      operation,\n      async () => {\n        // Fallback: queue email for later retry\n        winston.log('warn', 'Email service is unavailable, queuing for retry');\n        return { status: 'queued', message: 'Email service unavailable' };\n      }\n    );\n  }\n\n  // Redis protection\n  async executeWithRedisBreaker(operation) {\n    return await this.redisBreaker.execute(\n      operation,\n      async () => {\n        // Fallback: skip caching\n        winston.log('warn', 'Redis is unavailable, skipping cache operation');\n        return null;\n      }\n    );\n  }\n\n  // Database protection\n  async executeWithDatabaseBreaker(operation) {\n    return await this.databaseBreaker.execute(\n      operation,\n      async () => {\n        // Fallback: throw error\n        throw new Error('Database is unavailable due to circuit breaker protection');\n      }\n    );\n  }\n\n  // Get status of all circuit breakers\n  getAllStatuses() {\n    return {\n      emailService: this.emailBreaker.getStatus(),\n      redis: this.redisBreaker.getStatus(),\n      database: this.databaseBreaker.getStatus()\n    };\n  }\n}\n\n// Singleton instance\nconst externalServiceBreaker = new ExternalServiceBreaker();\n\n// Middleware for protecting API endpoints with circuit breaker\nconst circuitBreakerMiddleware = (breakerType = 'database') => {\n  return async (req, res, next) => {\n    try {\n      // Add circuit breaker status to request\n      req.circuitBreakerStatus = {};\n\n      // Execute request normally\n      next();\n    } catch (error) {\n      winston.log('error', 'Circuit breaker middleware error', {\n        error: error.message,\n        breakerType,\n        endpoint: req.url,\n        method: req.method\n      });\n      next(error);\n    }\n  };\n};\n\n// Async optimization wrapper\nconst asyncOptimize = (fn, options = {}) => {\n  const concurrency = options.concurrency || 5;\n  const timeout = options.timeout || 30000;\n\n  let running = 0;\n  const queue = [];\n\n  return async function (...args) {\n    return new Promise((resolve, reject) => {\n      const execute = async () => {\n        if (running >= concurrency) {\n          queue.push({ args, resolve, reject });\n          return;\n        }\n\n        running++;\n        const startTime = Date.now();\n\n        try {\n          // Set timeout for operation\n          const timeoutPromise = new Promise((_, timeoutReject) => {\n            setTimeout(() => timeoutReject(new Error('Operation timeout')), timeout);\n          });\n\n          const result = await Promise.race([fn.apply(this, args), timeoutPromise]);\n          const executionTime = Date.now() - startTime;\n\n          // Log slow operations\n          if (executionTime > (options.slowThreshold || 5000)) {\n            winston.log('warn', 'Slow async operation', {\n              executionTime,\n              functionName: fn.name,\n              timestamp: new Date().toISOString()\n            });\n          }\n\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        } finally {\n          running--;\n\n          // Process next item in queue\n          if (queue.length > 0) {\n            const next = queue.shift();\n            setImmediate(execute.bind(this, next.args, next.resolve, next.reject));\n          }\n        }\n      };\n\n      if (running < concurrency) {\n        execute.apply(this, args);\n      } else {\n        queue.push({ args, resolve, reject });\n      }\n    });\n  };\n};\n\nmodule.exports = {\n  CircuitBreaker,\n  ExternalServiceBreaker,\n  externalServiceBreaker,\n  circuitBreakerMiddleware,\n  asyncOptimize,\n  // Convenience exports\n  protectEmail: (fn) => externalServiceBreaker.executeWithEmailBreaker(fn),\n  protectRedis: (fn) => externalServiceBreaker.executeWithRedisBreaker(fn),\n  protectDatabase: (fn) => externalServiceBreaker.executeWithDatabaseBreaker(fn),\n  getCircuitBreakerStatuses: () => externalServiceBreaker.getAllStatuses()\n};"],"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","ignoreList":[]}