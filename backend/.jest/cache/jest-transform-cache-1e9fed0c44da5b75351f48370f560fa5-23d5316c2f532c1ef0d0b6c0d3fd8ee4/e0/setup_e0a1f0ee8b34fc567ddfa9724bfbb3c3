45a64be4698da5f53ff39690d7dac8e9
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
let mongod;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Start in-memory MongoDB server for tests (allow it to auto-detect platform and version)
  mongod = await MongoMemoryServer.create();
  const mongoUri = mongod.getUri();

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = mongoUri;
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to in-memory test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues
  await TestFixtures.cleanup();
  await closeDB();

  // Stop the in-memory MongoDB server
  if (mongod) {
    await mongod.stop();
  }

  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test
  if (mongoose.connection.readyState === 1) {
    // Connected
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      await collections[key].deleteMany({});
    }
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsImNvbm5lY3REQiIsImNsb3NlREIiLCJUZXN0Rml4dHVyZXMiLCJvcmlnaW5hbE1vbmdvVXJpIiwibW9uZ29kIiwiYmVmb3JlQWxsIiwiZ2xvYmFsIiwiZ2MiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJjcmVhdGUiLCJtb25nb1VyaSIsImdldFVyaSIsIk5PREVfRU5WIiwiSldUX1NFQ1JFVCIsImNvbnNvbGUiLCJsb2ciLCJzZXR1cCIsImFmdGVyQWxsIiwiY2xlYW51cCIsInN0b3AiLCJhZnRlckVhY2giLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbGxlY3Rpb25zIiwia2V5IiwiZGVsZXRlTWFueSIsImplc3QiLCJzZXRUaW1lb3V0IiwiTk9ERV9URVNUX1RJTUVPVVQiLCJzZXQiXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gPSByZXF1aXJlKCdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInKTtcbmNvbnN0IHsgY29ubmVjdERCLCBjbG9zZURCIH0gPSByZXF1aXJlKCcuLi9kYi9jb25uZWN0aW9uJyk7XG5jb25zdCB7IFRlc3RGaXh0dXJlcyB9ID0gcmVxdWlyZSgnLi9zaGFyZWQvdGVzdEZpeHR1cmVzJyk7XG5cbmxldCBvcmlnaW5hbE1vbmdvVXJpO1xubGV0IG1vbmdvZDtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAvLyBFbmFibGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIG9yaWdpbmFsIE1vbmdvREIgVVJJXG4gICAgb3JpZ2luYWxNb25nb1VyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJO1xuXG4gICAgLy8gU3RhcnQgaW4tbWVtb3J5IE1vbmdvREIgc2VydmVyIGZvciB0ZXN0cyAoYWxsb3cgaXQgdG8gYXV0by1kZXRlY3QgcGxhdGZvcm0gYW5kIHZlcnNpb24pXG4gICAgbW9uZ29kID0gYXdhaXQgTW9uZ29NZW1vcnlTZXJ2ZXIuY3JlYXRlKCk7XG4gICAgY29uc3QgbW9uZ29VcmkgPSBtb25nb2QuZ2V0VXJpKCk7XG5cbiAgICAvLyBTZXQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgICBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSA9IG1vbmdvVXJpO1xuICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAneW91cl9zdXBlcl9zZWN1cmVfand0X3NlY3JldF9rZXlfaGVyZV9yZXBsYWNlX2luX3Byb2R1Y3Rpb24nO1xuXG4gICAgLy8gQ29ubmVjdCB0byBpbi1tZW1vcnkgdGVzdCBkYXRhYmFzZVxuICAgIGF3YWl0IGNvbm5lY3REQigpO1xuXG4gICAgLy8gU2V0dXAgcmV1c2FibGUgZml4dHVyZXMgZm9yIGZhc3RlciB0ZXN0IGV4ZWN1dGlvblxuICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIHVwIHRlc3QgZml4dHVyZXMuLi4nKTtcbiAgICBhd2FpdCBUZXN0Rml4dHVyZXMuc2V0dXAoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgIC8vIGNvbnNvbGUubG9nKCdDbGVhbmluZyB1cCB0ZXN0IGZpeHR1cmVzLi4uJyk7IC8vIERpc2FibGVkIHRvIGF2b2lkIG1vY2tpbmcgaXNzdWVzXG4gICAgIGF3YWl0IFRlc3RGaXh0dXJlcy5jbGVhbnVwKCk7XG4gICAgIGF3YWl0IGNsb3NlREIoKTtcblxuICAgICAvLyBTdG9wIHRoZSBpbi1tZW1vcnkgTW9uZ29EQiBzZXJ2ZXJcbiAgICAgaWYgKG1vbmdvZCkge1xuICAgICAgIGF3YWl0IG1vbmdvZC5zdG9wKCk7XG4gICAgIH1cblxuICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIFVSSSBpZiBuZWVkZWRcbiAgICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgPSBvcmlnaW5hbE1vbmdvVXJpO1xuXG4gICAgIC8vIEZpbmFsIGdhcmJhZ2UgY29sbGVjdGlvblxuICAgICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgIH1cbiB9KTtcblxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBDbGVhciBhbGwgY29sbGVjdGlvbnMgYWZ0ZXIgZWFjaCB0ZXN0XG4gICAgaWYgKG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSA9PT0gMSkgeyAvLyBDb25uZWN0ZWRcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gbW9uZ29vc2UuY29ubmVjdGlvbi5jb2xsZWN0aW9ucztcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbGxlY3Rpb25zKSB7XG4gICAgICAgIGF3YWl0IGNvbGxlY3Rpb25zW2tleV0uZGVsZXRlTWFueSh7fSk7XG4gICAgICB9XG4gICAgfVxuIH0pO1xuXG4vLyBHbG9iYWwgdGVzdCB0aW1lb3V0cyBhbmQgc3RhYmlsaXphdGlvblxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTsgIC8vIDMwIHNlY29uZCBnbG9iYWwgdGltZW91dFxucHJvY2Vzcy5lbnYuTk9ERV9URVNUX1RJTUVPVVQgPSAyNTAwMDsgIC8vIEN1c3RvbSBlbnYgZm9yIEhUVFAgdGVzdHNcblxuLy8gSW5jcmVhc2Ugc29ja2V0IHRpbWVvdXQgZm9yIGRhdGFiYXNlIG9wZXJhdGlvbnNcbm1vbmdvb3NlLnNldCgnYnVmZmVyQ29tbWFuZHMnLCBmYWxzZSk7ICAvLyBEaXNhYmxlIG1vbmdvb3NlIGJ1ZmZlcmluZ1xubW9uZ29vc2Uuc2V0KCdtYXhUaW1lTVMnLCAyMDAwMCk7ICAgICAgLy8gMjAgc2Vjb25kIGxpbWl0IGZvciBvcGVyYXRpb25zIl0sIm1hcHBpbmdzIjoiQUFB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