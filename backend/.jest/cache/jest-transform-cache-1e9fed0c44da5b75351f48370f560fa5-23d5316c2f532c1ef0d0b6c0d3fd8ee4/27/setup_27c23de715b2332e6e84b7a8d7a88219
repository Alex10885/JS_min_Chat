25ac7e25cd4d3a6158524e134a6e355e
const mongoose = require('mongoose');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Use test database (assuming MongoDB is running locally)
  // In production CI/CD, you would set this to a test MongoDB instance
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/chat_js_test';
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  console.log('Cleaning up test fixtures...');
  await TestFixtures.cleanup();
  await closeDB();
  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test
  const collections = mongoose.connection.collections;
  for (const key in collections) {
    await collections[key].deleteMany({});
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJjb25uZWN0REIiLCJjbG9zZURCIiwiVGVzdEZpeHR1cmVzIiwib3JpZ2luYWxNb25nb1VyaSIsImJlZm9yZUFsbCIsImdsb2JhbCIsImdjIiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJJIiwiTk9ERV9FTlYiLCJKV1RfU0VDUkVUIiwiY29uc29sZSIsImxvZyIsInNldHVwIiwiYWZ0ZXJBbGwiLCJjbGVhbnVwIiwiYWZ0ZXJFYWNoIiwiY29sbGVjdGlvbnMiLCJjb25uZWN0aW9uIiwia2V5IiwiZGVsZXRlTWFueSIsImplc3QiLCJzZXRUaW1lb3V0IiwiTk9ERV9URVNUX1RJTUVPVVQiLCJzZXQiXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IGNvbm5lY3REQiwgY2xvc2VEQiB9ID0gcmVxdWlyZSgnLi4vZGIvY29ubmVjdGlvbicpO1xuY29uc3QgeyBUZXN0Rml4dHVyZXMgfSA9IHJlcXVpcmUoJy4vc2hhcmVkL3Rlc3RGaXh0dXJlcycpO1xuXG5sZXQgb3JpZ2luYWxNb25nb1VyaTtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgIC8vIEVuYWJsZSBnYXJiYWdlIGNvbGxlY3Rpb24gZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICAgaWYgKGdsb2JhbC5nYykge1xuICAgICBnbG9iYWwuZ2MoKTtcbiAgIH1cblxuICAgLy8gU2F2ZSBvcmlnaW5hbCBNb25nb0RCIFVSSVxuICAgb3JpZ2luYWxNb25nb1VyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJO1xuXG4gICAvLyBVc2UgdGVzdCBkYXRhYmFzZSAoYXNzdW1pbmcgTW9uZ29EQiBpcyBydW5uaW5nIGxvY2FsbHkpXG4gICAvLyBJbiBwcm9kdWN0aW9uIENJL0NELCB5b3Ugd291bGQgc2V0IHRoaXMgdG8gYSB0ZXN0IE1vbmdvREIgaW5zdGFuY2VcbiAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSB8fCAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9jaGF0X2pzX3Rlc3QnO1xuICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd5b3VyX3N1cGVyX3NlY3VyZV9qd3Rfc2VjcmV0X2tleV9oZXJlX3JlcGxhY2VfaW5fcHJvZHVjdGlvbic7XG5cbiAgIC8vIENvbm5lY3QgdG8gdGVzdCBkYXRhYmFzZVxuICAgYXdhaXQgY29ubmVjdERCKCk7XG5cbiAgIC8vIFNldHVwIHJldXNhYmxlIGZpeHR1cmVzIGZvciBmYXN0ZXIgdGVzdCBleGVjdXRpb25cbiAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIHVwIHRlc3QgZml4dHVyZXMuLi4nKTtcbiAgIGF3YWl0IFRlc3RGaXh0dXJlcy5zZXR1cCgpO1xufSk7XG5cbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnQ2xlYW5pbmcgdXAgdGVzdCBmaXh0dXJlcy4uLicpO1xuICAgIGF3YWl0IFRlc3RGaXh0dXJlcy5jbGVhbnVwKCk7XG4gICAgYXdhaXQgY2xvc2VEQigpO1xuICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgVVJJIGlmIG5lZWRlZFxuICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJID0gb3JpZ2luYWxNb25nb1VyaTtcblxuICAgIC8vIEZpbmFsIGdhcmJhZ2UgY29sbGVjdGlvblxuICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgIGdsb2JhbC5nYygpO1xuICAgIH1cbn0pO1xuXG5hZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgLy8gQ2xlYXIgYWxsIGNvbGxlY3Rpb25zIGFmdGVyIGVhY2ggdGVzdFxuICAgY29uc3QgY29sbGVjdGlvbnMgPSBtb25nb29zZS5jb25uZWN0aW9uLmNvbGxlY3Rpb25zO1xuICAgZm9yIChjb25zdCBrZXkgaW4gY29sbGVjdGlvbnMpIHtcbiAgICAgYXdhaXQgY29sbGVjdGlvbnNba2V5XS5kZWxldGVNYW55KHt9KTtcbiAgIH1cbn0pO1xuXG4vLyBHbG9iYWwgdGVzdCB0aW1lb3V0cyBhbmQgc3RhYmlsaXphdGlvblxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTsgIC8vIDMwIHNlY29uZCBnbG9iYWwgdGltZW91dFxucHJvY2Vzcy5lbnYuTk9ERV9URVNUX1RJTUVPVVQgPSAyNTAwMDsgIC8vIEN1c3RvbSBlbnYgZm9yIEhUVFAgdGVzdHNcblxuLy8gSW5jcmVhc2Ugc29ja2V0IHRpbWVvdXQgZm9yIGRhdGFiYXNlIG9wZXJhdGlvbnNcbm1vbmdvb3NlLnNldCgnYnVmZmVyQ29tbWFuZHMnLCBmYWxzZSk7ICAvLyBEaXNhYmxlIG1vbmdvb3NlIGJ1ZmZlcmluZ1xubW9uZ29vc2Uuc2V0KCdtYXhUaW1lTVMnLCAyMDAwMCk7ICAgICAgLy8gMjAgc2Vjb25kIGxpbWl0IGZvciBvcGVyYXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTTtFQUFFQyxTQUFTO0VBQUVDO0FBQVEsQ0FBQyxHQUFHRixPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDMUQsTUFBTTtFQUFFRztBQUFhLENBQUMsR0FBR0gsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBRXpELElBQUlJLGdCQUFnQjtBQUVwQkMsU0FBUyxDQUFDLFlBQVk7RUFDbkI7RUFDQSxJQUFJQyxNQUFNLENBQUNDLEVBQUUsRUFBRTtJQUNiRCxNQUFNLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2I7O0VBRUE7RUFDQUgsZ0JBQWdCLEdBQUdJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxXQUFXOztFQUUxQztFQUNBO0VBQ0FGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxRQUFRLEdBQUcsTUFBTTtFQUM3QkgsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsR0FBR0YsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsSUFBSSx3Q0FBd0M7RUFDN0ZGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxVQUFVLEdBQUcsNkRBQTZEOztFQUV0RjtFQUNBLE1BQU1YLFNBQVMsQ0FBQyxDQUFDOztFQUVqQjtFQUNBWSxPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQztFQUMxQyxNQUFNWCxZQUFZLENBQUNZLEtBQUssQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQUVGQyxRQUFRLENBQUMsWUFBWTtFQUNqQkgsT0FBTyxDQUFDQyxHQUFHLENBQUMsOEJBQThCLENBQUM7RUFDM0MsTUFBTVgsWUFBWSxDQUFDYyxPQUFPLENBQUMsQ0FBQztFQUM1QixNQUFNZixPQUFPLENBQUMsQ0FBQztFQUNmO0VBQ0FNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxXQUFXLEdBQUdOLGdCQUFnQjs7RUFFMUM7RUFDQSxJQUFJRSxNQUFNLENBQUNDLEVBQUUsRUFBRTtJQUNiRCxNQUFNLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2I7QUFDSixDQUFDLENBQUM7QUFFRlcsU0FBUyxDQUFDLFlBQVk7RUFDbkI7RUFDQSxNQUFNQyxXQUFXLEdBQUdwQixRQUFRLENBQUNxQixVQUFVLENBQUNELFdBQVc7RUFDbkQsS0FBSyxNQUFNRSxHQUFHLElBQUlGLFdBQVcsRUFBRTtJQUM3QixNQUFNQSxXQUFXLENBQUNFLEdBQUcsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdkM7QUFDSCxDQUFDLENBQUM7O0FBRUY7QUFDQUMsSUFBSSxDQUFDQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRTtBQUN6QmhCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDZ0IsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLENBQUU7O0FBRXhDO0FBQ0ExQixRQUFRLENBQUMyQixHQUFHLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBRTtBQUN4QzNCLFFBQVEsQ0FBQzJCLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBTSIsImlnbm9yZUxpc3QiOltdfQ==