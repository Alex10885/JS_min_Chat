{"version":3,"names":["io","require","axios","expect","BASE_URL","ioClient","create","baseURL","withCredentials","headers","describe","testUser","jwtToken","csrfToken","sessionId","socket","beforeAll","nickname","Date","now","email","password","it","console","log","registerResponse","post","status","hasToken","data","token","hasUser","user","hasSession","session","toBe","toBeDefined","id","userId","loginTime","Promise","resolve","setTimeout","error","response","message","defaults","common","firstResponse","get","secondResponse","connect","forceNew","transports","auth","extraHeaders","cookie","reject","on","Error","logoutResponse","disconnect","loginResponse","identifier","newSessionId","originalSessionId","sessionsDifferent","not","afterAll","connected","module","exports"],"sources":["session-persistence.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst axios = require('axios');\nconst { expect } = require('expect'); // Jest expect\n\nconst BASE_URL = 'http://localhost:3001';\nconst ioClient = axios.create({\n  baseURL: BASE_URL,\n  withCredentials: true,\n  headers: {\n    'User-Agent': 'Session-Test-Agent/1.0'\n  }\n});\n\ndescribe('Session Persistence Full Cycle Test', () => {\n  let testUser;\n  let jwtToken;\n  let csrfToken;\n  let sessionId;\n  let socket;\n\n  beforeAll(() => {\n    testUser = {\n      nickname: `testuser_${Date.now()}`,\n      email: `test_${Date.now()}@example.com`,\n      password: 'TestPass123!'\n    };\n  });\n\n  it('1. Register new user and check session creation', async () => {\n    console.log('🧪 TEST 1: Starting user registration...');\n\n    try {\n      const registerResponse = await ioClient.post('/api/register', testUser);\n      console.log('📥 Registration response:', {\n        status: registerResponse.status,\n        hasToken: !!registerResponse.data.token,\n        hasUser: !!registerResponse.data.user,\n        hasSession: !!registerResponse.data.session\n      });\n\n      expect(registerResponse.status).toBe(201);\n      expect(registerResponse.data.token).toBeDefined();\n      expect(registerResponse.data.user).toBeDefined();\n      expect(registerResponse.data.session).toBeDefined();\n\n      jwtToken = registerResponse.data.token;\n      csrfToken = registerResponse.data.session.csrfToken;\n      sessionId = registerResponse.data.session.id;\n\n      console.log('✅ Registration successful:', {\n        userId: registerResponse.data.user.id,\n        nickname: registerResponse.data.user.nickname,\n        sessionId: sessionId,\n        loginTime: registerResponse.data.session.loginTime\n      });\n\n      // Wait a moment for logs to appear\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n    } catch (error) {\n      console.error('❌ Registration failed:', error.response?.data || error.message);\n      throw error;\n    }\n  });\n\n  it('2. Check session persistence - same session across multiple requests', async () => {\n    console.log('🧪 TEST 2: Testing session persistence between requests...');\n\n    try {\n      // Set authorization header for subsequent requests\n      ioClient.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;\n\n      // Make first request - should use existing session\n      console.log('🌐 Making first API request (users list)...');\n      const firstResponse = await ioClient.get('/api/users');\n      expect(firstResponse.status).toBe(200);\n\n      console.log('✅ First request successful');\n\n      // Wait a moment\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Make second request - should reuse same session\n      console.log('🌐 Making second API request (channels list)...');\n      const secondResponse = await ioClient.get('/api/channels');\n      expect(secondResponse.status).toBe(200);\n\n      console.log('✅ Second request successful');\n      console.log('🔄 Both requests should have used the same persistent session');\n\n    } catch (error) {\n      console.error('❌ Session persistence test failed:', error.response?.data || error.message);\n      throw error;\n    }\n  });\n\n  it('3. Test Socket.IO authentication with session fingerprint', async () => {\n    console.log('🧪 TEST 3: Testing Socket.IO authentication with session fingerprint...');\n\n    try {\n      // Connect to Socket.IO with session data\n      socket = io.connect(BASE_URL, {\n        forceNew: true,\n        transports: ['websocket', 'polling'],\n        auth: {\n          csrfToken: csrfToken\n        },\n        extraHeaders: {\n          cookie: ioClient.defaults.headers?.cookie\n        }\n      });\n\n      // Wait for connection\n      await new Promise((resolve, reject) => {\n        socket.on('connect', () => {\n          console.log('🔌 Socket connected successfully');\n          console.log('🎉 Socket fingerprint authentication successful with CSRF token');\n          resolve();\n        });\n\n        socket.on('connect_error', (error) => {\n          console.error('❌ Socket connection failed:', error.message);\n          reject(error);\n        });\n\n        // Timeout after 10 seconds\n        setTimeout(() => {\n          reject(new Error('Socket connection timeout'));\n        }, 10000);\n      });\n\n    } catch (error) {\n      console.error('❌ Socket.IO authentication test failed:', error.message);\n      throw error;\n    }\n  });\n\n  it('4. Test session logout persistence', async () => {\n    console.log('🧪 TEST 4: Testing session logout and cleanup...');\n\n    try {\n      // Logout\n      const logoutResponse = await ioClient.post('/api/logout_complete');\n      expect(logoutResponse.status).toBe(200);\n\n      console.log('🚪 Complete logout successful:', logoutResponse.data);\n\n      // Socket should be disconnected after logout\n      socket.disconnect();\n      console.log('🔌 Socket disconnected after logout');\n\n    } catch (error) {\n      console.error('❌ Session logout test failed:', error.response?.data || error.message);\n      throw error;\n    }\n  });\n\n  it('5. Test session persistence after logout - new session should be created', async () => {\n    console.log('🧪 TEST 5: Testing that logout properly clears session and new login creates new session...');\n\n    try {\n      // Try to login again - should create new session\n      const loginResponse = await ioClient.post('/api/login', {\n        identifier: testUser.email,\n        password: testUser.password\n      });\n\n      expect(loginResponse.status).toBe(200);\n\n      const newSessionId = loginResponse.data.session.id;\n\n      console.log('🔑 Second login successful:', {\n        originalSessionId: sessionId,\n        newSessionId: newSessionId,\n        sessionsDifferent: sessionId !== newSessionId\n      });\n\n      // Sessions should be different\n      expect(sessionId).not.toBe(newSessionId);\n\n      console.log('✅ Session lifecycle complete: logout cleared session, new login created new session');\n\n    } catch (error) {\n      console.error('❌ New session creation test failed:', error.response?.data || error.message);\n      throw error;\n    }\n  });\n\n  afterAll(async () => {\n    if (socket && socket.connected) {\n      socket.disconnect();\n    }\n  });\n});\n\nmodule.exports = { describe, it };"],"mappings":"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","ignoreList":[]}