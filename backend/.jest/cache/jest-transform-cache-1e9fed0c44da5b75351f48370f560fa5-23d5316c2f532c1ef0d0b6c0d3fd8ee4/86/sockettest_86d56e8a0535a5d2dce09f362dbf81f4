d73593b99354b0dae9766e1042e05f1c
const io = require('socket.io-client');
const request = require('supertest');
const jwt = require('jsonwebtoken');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const User = require('../models/User');
const Message = require('../models/Message');
const Channel = require('../models/Channel');
const SocketTestServer = require('./socket-server.test');
let testServer;
let testUser;
let testToken;
let clientSocket;
const PORT = 3003; // Use running server port

let serverPort;
describe('Socket.IO Integration Tests', () => {
  beforeAll(async () => {
    // Connect to test database
    await connectDB();

    // Create test server
    testServer = new SocketTestServer();
    serverPort = await testServer.start();

    // Create test user
    testUser = new User({
      nickname: 'socketTestUser',
      email: 'socket@test.com',
      password: 'testpass123',
      status: 'online'
    });
    await testUser.save();

    // Get JWT token
    const expressApp = testServer.app; // Access test server's express app
    const response = await request(expressApp).post('/test-login').send({
      nickname: 'socketTestUser'
    });
    testToken = response.body.token;
  });
  afterAll(async () => {
    if (clientSocket) {
      clientSocket.disconnect();
    }
    if (testServer) {
      await testServer.stop();
    }
    await closeDB();
  });
  beforeEach(done => {
    clientSocket = io(`http://localhost:${serverPort}`, {
      auth: {
        token: testToken
      },
      forceNew: true
    });
    clientSocket.on('connect', () => {
      done();
    });
    clientSocket.on('connect_error', error => {
      console.error('Connection error:', error.message);
      done.fail(new Error(`Failed to connect: ${error.message}`));
    });
  });
  afterEach(() => {
    if (clientSocket) {
      clientSocket.disconnect();
    }
  });
  describe('Authentication', () => {
    test('should connect with valid token', done => {
      expect(clientSocket.connected).toBe(true);
      done();
    });
    test('should receive user data on connection', done => {
      const newSocket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      newSocket.on('connect', () => {
        expect(newSocket.id).toBeDefined();
        newSocket.disconnect();
        done();
      });
      newSocket.on('connect_error', error => {
        done.fail(new Error(`Connection failed: ${error.message}`));
      });
    });
  });
  describe('Channel Joining', () => {
    test('should join text channel', done => {
      clientSocket.emit('join_room', {
        room: 'general'
      });
      clientSocket.on('message', data => {
        if (data.author === 'System' && data.text.includes('joined the channel')) {
          expect(data.author).toBe('System');
          expect(data.room || data.channel).toBe('general');
          done();
        }
      });
    });
    test('should receive online users list', done => {
      clientSocket.emit('join_room', {
        room: 'general'
      });
      clientSocket.on('online_users', users => {
        expect(Array.isArray(users)).toBe(true);
        expect(users.length).toBeGreaterThan(0);
        expect(users[0]).toHaveProperty('nickname');
        expect(users[0]).toHaveProperty('role');
        done();
      });
    });
    test('should handle invalid room name', done => {
      clientSocket.emit('join_room', {
        room: ''
      });
      clientSocket.on('error', data => {
        expect(data.code).toBe('INVALID_ROOM_FORMAT');
        done();
      });
    });
    test('should handle non-existent channel', done => {
      clientSocket.emit('join_room', {
        room: 'nonexistent-channel'
      });
      clientSocket.on('error', data => {
        expect(data.code).toBe('CHANNEL_NOT_FOUND');
        done();
      });
    });
  });
  describe('Message Handling', () => {
    beforeEach(done => {
      clientSocket.emit('join_room', {
        room: 'general'
      });
      setTimeout(done, 100); // Wait for room join
    });
    test('should send public message', done => {
      const messageText = 'Hello from Socket.IO test!';
      clientSocket.emit('message', {
        text: messageText
      });
      clientSocket.on('message', data => {
        if (data.author === testUser.nickname && data.text === messageText) {
          expect(data.author).toBe(testUser.nickname);
          expect(data.room || data.channel).toBe('general');
          expect(data.text).toBe(messageText);
          done();
        }
      });
    });
    test('should receive message history', done => {
      clientSocket.emit('join_room', {
        room: 'general'
      });
      clientSocket.on('history', messages => {
        expect(Array.isArray(messages)).toBe(true);
        done();
      });
    });
  });
  describe('Private Messages', () => {
    let secondClient;
    beforeEach(done => {
      // Create second test user
      const secondUser = new User({
        nickname: 'socketTestUser2',
        email: 'socket2@test.com',
        password: 'testpass123',
        status: 'online'
      });
      secondUser.save().then(() => {
        const secondToken = jwt.sign({
          id: secondUser._id,
          nickname: secondUser.nickname,
          role: secondUser.role
        }, process.env.JWT_SECRET, {
          expiresIn: '24h'
        });
        secondClient = io(`http://localhost:${serverPort}`, {
          auth: {
            token: secondToken
          },
          forceNew: true
        });
        secondClient.on('connect', () => {
          secondClient.emit('join_room', {
            room: 'general'
          });
          done();
        });
        secondClient.on('connect_error', error => {
          done.fail(new Error(`Second client connection failed: ${error.message}`));
        });
      });
    });
    afterEach(() => {
      if (secondClient) {
        secondClient.disconnect();
      }
    });
    test('should send private message', done => {
      const privateMessage = 'Private message from Socket.IO test';
      clientSocket.emit('private_message', {
        to: 'socketTestUser2',
        text: privateMessage
      });

      // Check if sent message is received by sender (without target)
      clientSocket.on('private_message', data => {
        if (data.text === privateMessage) {
          expect(data.author).toBe(testUser.nickname);
          expect(data.room || data.channel).toBe('general');
          expect(data.text).toBe(privateMessage);
          expect(data.target).toBeUndefined(); // Should be null for sender
          done();
        }
      });

      // Check if target receives the message
      secondClient.on('private_message', data => {
        if (data.text === privateMessage) {
          expect(data.author).toBe(testUser.nickname);
          expect(data.target).toBe('socketTestUser2');
          done();
        }
      });
    });
  });
  describe('Voice Channels', () => {
    test('should join voice channel', done => {
      clientSocket.emit('join_voice_channel', {
        channelId: 'voice-chat'
      });
      clientSocket.on('voice_joined', data => {
        expect(data.channelId).toBe('voice-chat');
        done();
      });
    });
    test('should leave voice channel', done => {
      // First join
      clientSocket.emit('join_voice_channel', {
        channelId: 'voice-chat'
      });
      clientSocket.on('voice_joined', () => {
        // Then leave
        clientSocket.emit('leave_voice_channel');
        clientSocket.on('voice_left', () => {
          done();
        });
      });
    });
    test('should handle user joined/left voice events', done => {
      let secondClient;

      // Create second user
      const secondUser = new User({
        nickname: 'voiceTestUser2',
        email: 'voice2@test.com',
        password: 'testpass123',
        status: 'online'
      });
      secondUser.save().then(() => {
        const secondToken = jwt.sign({
          id: secondUser._id,
          nickname: secondUser.nickname,
          role: secondUser.role
        }, process.env.JWT_SECRET, {
          expiresIn: '24h'
        });
        secondClient = io(`http://localhost:${serverPort}`, {
          auth: {
            token: secondToken
          },
          forceNew: true
        });
        secondClient.on('connect', () => {
          clientSocket.emit('join_voice_channel', {
            channelId: 'voice-chat'
          });
          clientSocket.on('voice_joined', () => {
            // Second user joins
            secondClient.emit('join_voice_channel', {
              channelId: 'voice-chat'
            });

            // First user should see second user joining
            clientSocket.on('user_joined_voice', data => {
              expect(data.nickname).toBe('voiceTestUser2');
              secondClient.disconnect();
              done();
            });
          });
        });
        secondClient.on('connect_error', error => {
          done.fail(new Error(`Voice client connection failed: ${error.message}`));
        });
      });
    });
  });
  describe('Speaking Events', () => {
    test('should broadcast speaking status', done => {
      const secondUser = new User({
        nickname: 'speakingTestUser',
        email: 'speaking@test.com',
        password: 'test123',
        status: 'online'
      });
      secondUser.save().then(() => {
        const secondToken = jwt.sign({
          id: secondUser._id,
          nickname: secondUser.nickname,
          role: secondUser.role
        }, process.env.JWT_SECRET, {
          expiresIn: '24h'
        });
        const listenerClient = io(`http://localhost:${serverPort}`, {
          auth: {
            token: secondToken
          },
          forceNew: true
        });
        listenerClient.on('connect', () => {
          listenerClient.emit('join_room', {
            room: 'general'
          });
          listenerClient.on('online_users', () => {
            clientSocket.emit('speaking', {
              speaking: true
            });
            listenerClient.on('speaking', data => {
              expect(data.nickname).toBe(testUser.nickname);
              expect(data.speaking).toBe(true);
              listenerClient.disconnect();
              done();
            });
          });
        });
        listenerClient.on('connect_error', error => {
          done.fail(new Error(`Speaking client connection failed: ${error.message}`));
        });
      });
    });
  });
  describe('Disconnect Handling', () => {
    test('should handle disconnect gracefully', done => {
      clientSocket.on('disconnect', () => {
        done();
      });
      clientSocket.disconnect();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbyIsInJlcXVpcmUiLCJyZXF1ZXN0Iiwiand0IiwiY29ubmVjdERCIiwiY2xvc2VEQiIsIlVzZXIiLCJNZXNzYWdlIiwiQ2hhbm5lbCIsIlNvY2tldFRlc3RTZXJ2ZXIiLCJ0ZXN0U2VydmVyIiwidGVzdFVzZXIiLCJ0ZXN0VG9rZW4iLCJjbGllbnRTb2NrZXQiLCJQT1JUIiwic2VydmVyUG9ydCIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwic3RhcnQiLCJuaWNrbmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJzdGF0dXMiLCJzYXZlIiwiZXhwcmVzc0FwcCIsImFwcCIsInJlc3BvbnNlIiwicG9zdCIsInNlbmQiLCJib2R5IiwidG9rZW4iLCJhZnRlckFsbCIsImRpc2Nvbm5lY3QiLCJzdG9wIiwiYmVmb3JlRWFjaCIsImRvbmUiLCJhdXRoIiwiZm9yY2VOZXciLCJvbiIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJmYWlsIiwiRXJyb3IiLCJhZnRlckVhY2giLCJ0ZXN0IiwiZXhwZWN0IiwiY29ubmVjdGVkIiwidG9CZSIsIm5ld1NvY2tldCIsImlkIiwidG9CZURlZmluZWQiLCJlbWl0Iiwicm9vbSIsImRhdGEiLCJhdXRob3IiLCJ0ZXh0IiwiaW5jbHVkZXMiLCJjaGFubmVsIiwidXNlcnMiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJ0b0hhdmVQcm9wZXJ0eSIsImNvZGUiLCJzZXRUaW1lb3V0IiwibWVzc2FnZVRleHQiLCJtZXNzYWdlcyIsInNlY29uZENsaWVudCIsInNlY29uZFVzZXIiLCJ0aGVuIiwic2Vjb25kVG9rZW4iLCJzaWduIiwiX2lkIiwicm9sZSIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwiZXhwaXJlc0luIiwicHJpdmF0ZU1lc3NhZ2UiLCJ0byIsInRhcmdldCIsInRvQmVVbmRlZmluZWQiLCJjaGFubmVsSWQiLCJsaXN0ZW5lckNsaWVudCIsInNwZWFraW5nIl0sInNvdXJjZXMiOlsic29ja2V0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW8gPSByZXF1aXJlKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IHsgY29ubmVjdERCLCBjbG9zZURCIH0gPSByZXF1aXJlKCcuLi9kYi9jb25uZWN0aW9uJyk7XG5jb25zdCBVc2VyID0gcmVxdWlyZSgnLi4vbW9kZWxzL1VzZXInKTtcbmNvbnN0IE1lc3NhZ2UgPSByZXF1aXJlKCcuLi9tb2RlbHMvTWVzc2FnZScpO1xuY29uc3QgQ2hhbm5lbCA9IHJlcXVpcmUoJy4uL21vZGVscy9DaGFubmVsJyk7XG5jb25zdCBTb2NrZXRUZXN0U2VydmVyID0gcmVxdWlyZSgnLi9zb2NrZXQtc2VydmVyLnRlc3QnKTtcblxubGV0IHRlc3RTZXJ2ZXI7XG5sZXQgdGVzdFVzZXI7XG5sZXQgdGVzdFRva2VuO1xubGV0IGNsaWVudFNvY2tldDtcbmNvbnN0IFBPUlQgPSAzMDAzOyAvLyBVc2UgcnVubmluZyBzZXJ2ZXIgcG9ydFxuXG5sZXQgc2VydmVyUG9ydDtcblxuXG5cbmRlc2NyaWJlKCdTb2NrZXQuSU8gSW50ZWdyYXRpb24gVGVzdHMnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgLy8gQ29ubmVjdCB0byB0ZXN0IGRhdGFiYXNlXG4gICAgYXdhaXQgY29ubmVjdERCKCk7XG5cbiAgICAvLyBDcmVhdGUgdGVzdCBzZXJ2ZXJcbiAgICB0ZXN0U2VydmVyID0gbmV3IFNvY2tldFRlc3RTZXJ2ZXIoKTtcbiAgICBzZXJ2ZXJQb3J0ID0gYXdhaXQgdGVzdFNlcnZlci5zdGFydCgpO1xuXG4gICAgLy8gQ3JlYXRlIHRlc3QgdXNlclxuICAgIHRlc3RVc2VyID0gbmV3IFVzZXIoe1xuICAgICAgbmlja25hbWU6ICdzb2NrZXRUZXN0VXNlcicsXG4gICAgICBlbWFpbDogJ3NvY2tldEB0ZXN0LmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Rlc3RwYXNzMTIzJyxcbiAgICAgIHN0YXR1czogJ29ubGluZSdcbiAgICB9KTtcbiAgICBhd2FpdCB0ZXN0VXNlci5zYXZlKCk7XG5cbiAgICAvLyBHZXQgSldUIHRva2VuXG4gICAgY29uc3QgZXhwcmVzc0FwcCA9IHRlc3RTZXJ2ZXIuYXBwOyAvLyBBY2Nlc3MgdGVzdCBzZXJ2ZXIncyBleHByZXNzIGFwcFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChleHByZXNzQXBwKVxuICAgICAgLnBvc3QoJy90ZXN0LWxvZ2luJylcbiAgICAgIC5zZW5kKHsgbmlja25hbWU6ICdzb2NrZXRUZXN0VXNlcicgfSk7XG5cbiAgICB0ZXN0VG9rZW4gPSByZXNwb25zZS5ib2R5LnRva2VuO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgaWYgKGNsaWVudFNvY2tldCkge1xuICAgICAgY2xpZW50U29ja2V0LmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgaWYgKHRlc3RTZXJ2ZXIpIHtcbiAgICAgIGF3YWl0IHRlc3RTZXJ2ZXIuc3RvcCgpO1xuICAgIH1cbiAgICBhd2FpdCBjbG9zZURCKCk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKGRvbmUpID0+IHtcbiAgICBjbGllbnRTb2NrZXQgPSBpbyhgaHR0cDovL2xvY2FsaG9zdDoke3NlcnZlclBvcnR9YCwge1xuICAgICAgYXV0aDogeyB0b2tlbjogdGVzdFRva2VuIH0sXG4gICAgICBmb3JjZU5ldzogdHJ1ZVxuICAgIH0pO1xuXG4gICAgY2xpZW50U29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuXG4gICAgY2xpZW50U29ja2V0Lm9uKCdjb25uZWN0X2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb25uZWN0aW9uIGVycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgZG9uZS5mYWlsKG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbm5lY3Q6ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgaWYgKGNsaWVudFNvY2tldCkge1xuICAgICAgY2xpZW50U29ja2V0LmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBdXRoZW50aWNhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY29ubmVjdCB3aXRoIHZhbGlkIHRva2VuJywgKGRvbmUpID0+IHtcbiAgICAgIGV4cGVjdChjbGllbnRTb2NrZXQuY29ubmVjdGVkKS50b0JlKHRydWUpO1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlY2VpdmUgdXNlciBkYXRhIG9uIGNvbm5lY3Rpb24nLCAoZG9uZSkgPT4ge1xuICAgICAgY29uc3QgbmV3U29ja2V0ID0gaW8oYGh0dHA6Ly9sb2NhbGhvc3Q6JHtzZXJ2ZXJQb3J0fWAsIHtcbiAgICAgICAgYXV0aDogeyB0b2tlbjogdGVzdFRva2VuIH0sXG4gICAgICAgIGZvcmNlTmV3OiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgbmV3U29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobmV3U29ja2V0LmlkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBuZXdTb2NrZXQuZGlzY29ubmVjdCgpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgbmV3U29ja2V0Lm9uKCdjb25uZWN0X2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgIGRvbmUuZmFpbChuZXcgRXJyb3IoYENvbm5lY3Rpb24gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDaGFubmVsIEpvaW5pbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGpvaW4gdGV4dCBjaGFubmVsJywgKGRvbmUpID0+IHtcbiAgICAgIGNsaWVudFNvY2tldC5lbWl0KCdqb2luX3Jvb20nLCB7IHJvb206ICdnZW5lcmFsJyB9KTtcblxuICAgICAgY2xpZW50U29ja2V0Lm9uKCdtZXNzYWdlJywgKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGRhdGEuYXV0aG9yID09PSAnU3lzdGVtJyAmJiBkYXRhLnRleHQuaW5jbHVkZXMoJ2pvaW5lZCB0aGUgY2hhbm5lbCcpKSB7XG4gICAgICAgICAgZXhwZWN0KGRhdGEuYXV0aG9yKS50b0JlKCdTeXN0ZW0nKTtcbiAgICAgICAgICBleHBlY3QoZGF0YS5yb29tIHx8IGRhdGEuY2hhbm5lbCkudG9CZSgnZ2VuZXJhbCcpO1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVjZWl2ZSBvbmxpbmUgdXNlcnMgbGlzdCcsIChkb25lKSA9PiB7XG4gICAgICBjbGllbnRTb2NrZXQuZW1pdCgnam9pbl9yb29tJywgeyByb29tOiAnZ2VuZXJhbCcgfSk7XG5cbiAgICAgIGNsaWVudFNvY2tldC5vbignb25saW5lX3VzZXJzJywgKHVzZXJzKSA9PiB7XG4gICAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHVzZXJzKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHVzZXJzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgICBleHBlY3QodXNlcnNbMF0pLnRvSGF2ZVByb3BlcnR5KCduaWNrbmFtZScpO1xuICAgICAgICBleHBlY3QodXNlcnNbMF0pLnRvSGF2ZVByb3BlcnR5KCdyb2xlJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIHJvb20gbmFtZScsIChkb25lKSA9PiB7XG4gICAgICBjbGllbnRTb2NrZXQuZW1pdCgnam9pbl9yb29tJywgeyByb29tOiAnJyB9KTtcblxuICAgICAgY2xpZW50U29ja2V0Lm9uKCdlcnJvcicsIChkYXRhKSA9PiB7XG4gICAgICAgIGV4cGVjdChkYXRhLmNvZGUpLnRvQmUoJ0lOVkFMSURfUk9PTV9GT1JNQVQnKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG5vbi1leGlzdGVudCBjaGFubmVsJywgKGRvbmUpID0+IHtcbiAgICAgIGNsaWVudFNvY2tldC5lbWl0KCdqb2luX3Jvb20nLCB7IHJvb206ICdub25leGlzdGVudC1jaGFubmVsJyB9KTtcblxuICAgICAgY2xpZW50U29ja2V0Lm9uKCdlcnJvcicsIChkYXRhKSA9PiB7XG4gICAgICAgIGV4cGVjdChkYXRhLmNvZGUpLnRvQmUoJ0NIQU5ORUxfTk9UX0ZPVU5EJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTWVzc2FnZSBIYW5kbGluZycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKChkb25lKSA9PiB7XG4gICAgICBjbGllbnRTb2NrZXQuZW1pdCgnam9pbl9yb29tJywgeyByb29tOiAnZ2VuZXJhbCcgfSk7XG4gICAgICBzZXRUaW1lb3V0KGRvbmUsIDEwMCk7IC8vIFdhaXQgZm9yIHJvb20gam9pblxuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgcHVibGljIG1lc3NhZ2UnLCAoZG9uZSkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZVRleHQgPSAnSGVsbG8gZnJvbSBTb2NrZXQuSU8gdGVzdCEnO1xuXG4gICAgICBjbGllbnRTb2NrZXQuZW1pdCgnbWVzc2FnZScsIHsgdGV4dDogbWVzc2FnZVRleHQgfSk7XG5cbiAgICAgIGNsaWVudFNvY2tldC5vbignbWVzc2FnZScsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLmF1dGhvciA9PT0gdGVzdFVzZXIubmlja25hbWUgJiYgZGF0YS50ZXh0ID09PSBtZXNzYWdlVGV4dCkge1xuICAgICAgICAgIGV4cGVjdChkYXRhLmF1dGhvcikudG9CZSh0ZXN0VXNlci5uaWNrbmFtZSk7XG4gICAgICAgICAgZXhwZWN0KGRhdGEucm9vbSB8fCBkYXRhLmNoYW5uZWwpLnRvQmUoJ2dlbmVyYWwnKTtcbiAgICAgICAgICBleHBlY3QoZGF0YS50ZXh0KS50b0JlKG1lc3NhZ2VUZXh0KTtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlY2VpdmUgbWVzc2FnZSBoaXN0b3J5JywgKGRvbmUpID0+IHtcbiAgICAgIGNsaWVudFNvY2tldC5lbWl0KCdqb2luX3Jvb20nLCB7IHJvb206ICdnZW5lcmFsJyB9KTtcblxuICAgICAgY2xpZW50U29ja2V0Lm9uKCdoaXN0b3J5JywgKG1lc3NhZ2VzKSA9PiB7XG4gICAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG1lc3NhZ2VzKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQcml2YXRlIE1lc3NhZ2VzJywgKCkgPT4ge1xuICAgIGxldCBzZWNvbmRDbGllbnQ7XG5cbiAgICBiZWZvcmVFYWNoKChkb25lKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgc2Vjb25kIHRlc3QgdXNlclxuICAgICAgY29uc3Qgc2Vjb25kVXNlciA9IG5ldyBVc2VyKHtcbiAgICAgICAgbmlja25hbWU6ICdzb2NrZXRUZXN0VXNlcjInLFxuICAgICAgICBlbWFpbDogJ3NvY2tldDJAdGVzdC5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Rlc3RwYXNzMTIzJyxcbiAgICAgICAgc3RhdHVzOiAnb25saW5lJ1xuICAgICAgfSk7XG5cbiAgICAgIHNlY29uZFVzZXIuc2F2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWNvbmRUb2tlbiA9IGp3dC5zaWduKFxuICAgICAgICAgIHsgaWQ6IHNlY29uZFVzZXIuX2lkLCBuaWNrbmFtZTogc2Vjb25kVXNlci5uaWNrbmFtZSwgcm9sZTogc2Vjb25kVXNlci5yb2xlIH0sXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCxcbiAgICAgICAgICB7IGV4cGlyZXNJbjogJzI0aCcgfVxuICAgICAgICApO1xuXG4gICAgICAgIHNlY29uZENsaWVudCA9IGlvKGBodHRwOi8vbG9jYWxob3N0OiR7c2VydmVyUG9ydH1gLCB7XG4gICAgICAgICAgYXV0aDogeyB0b2tlbjogc2Vjb25kVG9rZW4gfSxcbiAgICAgICAgICBmb3JjZU5ldzogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWNvbmRDbGllbnQub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgICAgc2Vjb25kQ2xpZW50LmVtaXQoJ2pvaW5fcm9vbScsIHsgcm9vbTogJ2dlbmVyYWwnIH0pO1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2Vjb25kQ2xpZW50Lm9uKCdjb25uZWN0X2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgZG9uZS5mYWlsKG5ldyBFcnJvcihgU2Vjb25kIGNsaWVudCBjb25uZWN0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBpZiAoc2Vjb25kQ2xpZW50KSB7XG4gICAgICAgIHNlY29uZENsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc2VuZCBwcml2YXRlIG1lc3NhZ2UnLCAoZG9uZSkgPT4ge1xuICAgICAgY29uc3QgcHJpdmF0ZU1lc3NhZ2UgPSAnUHJpdmF0ZSBtZXNzYWdlIGZyb20gU29ja2V0LklPIHRlc3QnO1xuXG4gICAgICBjbGllbnRTb2NrZXQuZW1pdCgncHJpdmF0ZV9tZXNzYWdlJywge1xuICAgICAgICB0bzogJ3NvY2tldFRlc3RVc2VyMicsXG4gICAgICAgIHRleHQ6IHByaXZhdGVNZXNzYWdlXG4gICAgICB9KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgc2VudCBtZXNzYWdlIGlzIHJlY2VpdmVkIGJ5IHNlbmRlciAod2l0aG91dCB0YXJnZXQpXG4gICAgICBjbGllbnRTb2NrZXQub24oJ3ByaXZhdGVfbWVzc2FnZScsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnRleHQgPT09IHByaXZhdGVNZXNzYWdlKSB7XG4gICAgICAgICAgZXhwZWN0KGRhdGEuYXV0aG9yKS50b0JlKHRlc3RVc2VyLm5pY2tuYW1lKTtcbiAgICAgICAgICBleHBlY3QoZGF0YS5yb29tIHx8IGRhdGEuY2hhbm5lbCkudG9CZSgnZ2VuZXJhbCcpO1xuICAgICAgICAgIGV4cGVjdChkYXRhLnRleHQpLnRvQmUocHJpdmF0ZU1lc3NhZ2UpO1xuICAgICAgICAgIGV4cGVjdChkYXRhLnRhcmdldCkudG9CZVVuZGVmaW5lZCgpOyAvLyBTaG91bGQgYmUgbnVsbCBmb3Igc2VuZGVyXG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IHJlY2VpdmVzIHRoZSBtZXNzYWdlXG4gICAgICBzZWNvbmRDbGllbnQub24oJ3ByaXZhdGVfbWVzc2FnZScsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnRleHQgPT09IHByaXZhdGVNZXNzYWdlKSB7XG4gICAgICAgICAgZXhwZWN0KGRhdGEuYXV0aG9yKS50b0JlKHRlc3RVc2VyLm5pY2tuYW1lKTtcbiAgICAgICAgICBleHBlY3QoZGF0YS50YXJnZXQpLnRvQmUoJ3NvY2tldFRlc3RVc2VyMicpO1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdWb2ljZSBDaGFubmVscycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgam9pbiB2b2ljZSBjaGFubmVsJywgKGRvbmUpID0+IHtcbiAgICAgIGNsaWVudFNvY2tldC5lbWl0KCdqb2luX3ZvaWNlX2NoYW5uZWwnLCB7IGNoYW5uZWxJZDogJ3ZvaWNlLWNoYXQnIH0pO1xuXG4gICAgICBjbGllbnRTb2NrZXQub24oJ3ZvaWNlX2pvaW5lZCcsIChkYXRhKSA9PiB7XG4gICAgICAgIGV4cGVjdChkYXRhLmNoYW5uZWxJZCkudG9CZSgndm9pY2UtY2hhdCcpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBsZWF2ZSB2b2ljZSBjaGFubmVsJywgKGRvbmUpID0+IHtcbiAgICAgIC8vIEZpcnN0IGpvaW5cbiAgICAgIGNsaWVudFNvY2tldC5lbWl0KCdqb2luX3ZvaWNlX2NoYW5uZWwnLCB7IGNoYW5uZWxJZDogJ3ZvaWNlLWNoYXQnIH0pO1xuXG4gICAgICBjbGllbnRTb2NrZXQub24oJ3ZvaWNlX2pvaW5lZCcsICgpID0+IHtcbiAgICAgICAgLy8gVGhlbiBsZWF2ZVxuICAgICAgICBjbGllbnRTb2NrZXQuZW1pdCgnbGVhdmVfdm9pY2VfY2hhbm5lbCcpO1xuXG4gICAgICAgIGNsaWVudFNvY2tldC5vbigndm9pY2VfbGVmdCcsICgpID0+IHtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHVzZXIgam9pbmVkL2xlZnQgdm9pY2UgZXZlbnRzJywgKGRvbmUpID0+IHtcbiAgICAgIGxldCBzZWNvbmRDbGllbnQ7XG5cbiAgICAgIC8vIENyZWF0ZSBzZWNvbmQgdXNlclxuICAgICAgY29uc3Qgc2Vjb25kVXNlciA9IG5ldyBVc2VyKHtcbiAgICAgICAgbmlja25hbWU6ICd2b2ljZVRlc3RVc2VyMicsXG4gICAgICAgIGVtYWlsOiAndm9pY2UyQHRlc3QuY29tJyxcbiAgICAgICAgcGFzc3dvcmQ6ICd0ZXN0cGFzczEyMycsXG4gICAgICAgIHN0YXR1czogJ29ubGluZSdcbiAgICAgIH0pO1xuXG4gICAgICBzZWNvbmRVc2VyLnNhdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vjb25kVG9rZW4gPSBqd3Quc2lnbihcbiAgICAgICAgICB7IGlkOiBzZWNvbmRVc2VyLl9pZCwgbmlja25hbWU6IHNlY29uZFVzZXIubmlja25hbWUsIHJvbGU6IHNlY29uZFVzZXIucm9sZSB9LFxuICAgICAgICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQsXG4gICAgICAgICAgeyBleHBpcmVzSW46ICcyNGgnIH1cbiAgICAgICAgKTtcblxuICAgICAgICBzZWNvbmRDbGllbnQgPSBpbyhgaHR0cDovL2xvY2FsaG9zdDoke3NlcnZlclBvcnR9YCwge1xuICAgICAgICAgIGF1dGg6IHsgdG9rZW46IHNlY29uZFRva2VuIH0sXG4gICAgICAgICAgZm9yY2VOZXc6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2Vjb25kQ2xpZW50Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgIGNsaWVudFNvY2tldC5lbWl0KCdqb2luX3ZvaWNlX2NoYW5uZWwnLCB7IGNoYW5uZWxJZDogJ3ZvaWNlLWNoYXQnIH0pO1xuXG4gICAgICAgICAgY2xpZW50U29ja2V0Lm9uKCd2b2ljZV9qb2luZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBTZWNvbmQgdXNlciBqb2luc1xuICAgICAgICAgICAgc2Vjb25kQ2xpZW50LmVtaXQoJ2pvaW5fdm9pY2VfY2hhbm5lbCcsIHsgY2hhbm5lbElkOiAndm9pY2UtY2hhdCcgfSk7XG5cbiAgICAgICAgICAgIC8vIEZpcnN0IHVzZXIgc2hvdWxkIHNlZSBzZWNvbmQgdXNlciBqb2luaW5nXG4gICAgICAgICAgICBjbGllbnRTb2NrZXQub24oJ3VzZXJfam9pbmVkX3ZvaWNlJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgZXhwZWN0KGRhdGEubmlja25hbWUpLnRvQmUoJ3ZvaWNlVGVzdFVzZXIyJyk7XG4gICAgICAgICAgICAgIHNlY29uZENsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBzZWNvbmRDbGllbnQub24oJ2Nvbm5lY3RfZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICBkb25lLmZhaWwobmV3IEVycm9yKGBWb2ljZSBjbGllbnQgY29ubmVjdGlvbiBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTcGVha2luZyBFdmVudHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGJyb2FkY2FzdCBzcGVha2luZyBzdGF0dXMnLCAoZG9uZSkgPT4ge1xuICAgICAgY29uc3Qgc2Vjb25kVXNlciA9IG5ldyBVc2VyKHtcbiAgICAgICAgbmlja25hbWU6ICdzcGVha2luZ1Rlc3RVc2VyJyxcbiAgICAgICAgZW1haWw6ICdzcGVha2luZ0B0ZXN0LmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAndGVzdDEyMycsXG4gICAgICAgIHN0YXR1czogJ29ubGluZSdcbiAgICAgIH0pO1xuXG4gICAgICBzZWNvbmRVc2VyLnNhdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vjb25kVG9rZW4gPSBqd3Quc2lnbihcbiAgICAgICAgICB7IGlkOiBzZWNvbmRVc2VyLl9pZCwgbmlja25hbWU6IHNlY29uZFVzZXIubmlja25hbWUsIHJvbGU6IHNlY29uZFVzZXIucm9sZSB9LFxuICAgICAgICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQsXG4gICAgICAgICAgeyBleHBpcmVzSW46ICcyNGgnIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBsaXN0ZW5lckNsaWVudCA9IGlvKGBodHRwOi8vbG9jYWxob3N0OiR7c2VydmVyUG9ydH1gLCB7XG4gICAgICAgICAgYXV0aDogeyB0b2tlbjogc2Vjb25kVG9rZW4gfSxcbiAgICAgICAgICBmb3JjZU5ldzogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBsaXN0ZW5lckNsaWVudC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICBsaXN0ZW5lckNsaWVudC5lbWl0KCdqb2luX3Jvb20nLCB7IHJvb206ICdnZW5lcmFsJyB9KTtcblxuICAgICAgICAgIGxpc3RlbmVyQ2xpZW50Lm9uKCdvbmxpbmVfdXNlcnMnLCAoKSA9PiB7XG4gICAgICAgICAgICBjbGllbnRTb2NrZXQuZW1pdCgnc3BlYWtpbmcnLCB7IHNwZWFraW5nOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBsaXN0ZW5lckNsaWVudC5vbignc3BlYWtpbmcnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICBleHBlY3QoZGF0YS5uaWNrbmFtZSkudG9CZSh0ZXN0VXNlci5uaWNrbmFtZSk7XG4gICAgICAgICAgICAgIGV4cGVjdChkYXRhLnNwZWFraW5nKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICBsaXN0ZW5lckNsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBsaXN0ZW5lckNsaWVudC5vbignY29ubmVjdF9lcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICAgIGRvbmUuZmFpbChuZXcgRXJyb3IoYFNwZWFraW5nIGNsaWVudCBjb25uZWN0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Rpc2Nvbm5lY3QgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBkaXNjb25uZWN0IGdyYWNlZnVsbHknLCAoZG9uZSkgPT4ge1xuICAgICAgY2xpZW50U29ja2V0Lm9uKCdkaXNjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgY2xpZW50U29ja2V0LmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ3RDLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDbkMsTUFBTTtFQUFFRyxTQUFTO0VBQUVDO0FBQVEsQ0FBQyxHQUFHSixPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDMUQsTUFBTUssSUFBSSxHQUFHTCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFDdEMsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDNUMsTUFBTU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDNUMsTUFBTVEsZ0JBQWdCLEdBQUdSLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUV4RCxJQUFJUyxVQUFVO0FBQ2QsSUFBSUMsUUFBUTtBQUNaLElBQUlDLFNBQVM7QUFDYixJQUFJQyxZQUFZO0FBQ2hCLE1BQU1DLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFFbkIsSUFBSUMsVUFBVTtBQUlkQyxRQUFRLENBQUMsNkJBQTZCLEVBQUUsTUFBTTtFQUM1Q0MsU0FBUyxDQUFDLFlBQVk7SUFDcEI7SUFDQSxNQUFNYixTQUFTLENBQUMsQ0FBQzs7SUFFakI7SUFDQU0sVUFBVSxHQUFHLElBQUlELGdCQUFnQixDQUFDLENBQUM7SUFDbkNNLFVBQVUsR0FBRyxNQUFNTCxVQUFVLENBQUNRLEtBQUssQ0FBQyxDQUFDOztJQUVyQztJQUNBUCxRQUFRLEdBQUcsSUFBSUwsSUFBSSxDQUFDO01BQ2xCYSxRQUFRLEVBQUUsZ0JBQWdCO01BQzFCQyxLQUFL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