{"version":3,"names":["request","require","mongoose","TestFixtures","app","closeDB","beforeAll","serverModule","closeDBFn","afterAll","describe","validUser","accessToken","regResponse","post","send","nickname","email","password","body","user","token","it","originalConnection","connection","readyState","disconnect","response","get","set","timeout","expect","toContain","status","toHaveProperty","connect","process","env","MONGODB_URI","Array","isArray","toBe","startTime","Date","now","duration","toBeLessThan","timedOut","error","code","concurrentRequests","fill","map","responses","Promise","all","forEach","requests","identifier","allSettled","fulfilled","filter","r","length","toBeGreaterThan","result","index","value","rapidRequests","limitedRequest","initialMemory","memoryUsage","heapUsed","largeRequests","_","i","repeat","finalMemory","memoryIncrease","cpuIntensiveTask","start","Math","random","cpuPromises","resolve","setImmediate","requestPromises","cpuResults","requestResults","consecutiveErrors","maxErrors","longRequest","emit"],"sources":["network-error.test.js"],"sourcesContent":["const request = require('supertest');\nconst mongoose = require('mongoose');\nconst { TestFixtures } = require('../shared/testFixtures');\n\nlet app, closeDB;\n\nbeforeAll(async () => {\n  const serverModule = require('../../server');\n  app = require('../../server.js');\n\n  const { closeDB: closeDBFn } = require('../../db/connection');\n  closeDB = closeDBFn;\n});\n\nafterAll(async () => {\n  if (closeDB) {\n    await closeDB();\n  }\n});\n\ndescribe('Error Recovery and Network Interruption Tests', () => {\n  let validUser, accessToken;\n\n  beforeAll(async () => {\n    // Create test user\n    const regResponse = await request(app)\n      .post('/api/register')\n      .send({\n        nickname: 'error_recovery_test',\n        email: 'error_recovery@example.com',\n        password: 'testpass123'\n      });\n\n    validUser = regResponse.body.user;\n    accessToken = regResponse.body.token;\n  });\n\n  describe('Database Connection Disruption', () => {\n    it('should handle database disconnection gracefully', async () => {\n      // Simulate database disconnection by closing MongoDB connection\n      const originalConnection = mongoose.connection.readyState;\n\n      try {\n        // Force database disconnect\n        await mongoose.disconnect();\n\n        // Attempt API request during disconnection\n        const response = await request(app)\n          .get('/api/channels')\n          .set('Authorization', `Bearer ${accessToken}`)\n          .timeout(5000);\n\n        // Should return database error\n        expect([500, 503]).toContain(response.status);\n        expect(response.body).toHaveProperty('code', 'DATABASE_ERROR');\n\n      } finally {\n        // Reconnect database for other tests\n        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chat_js_test');\n      }\n    });\n\n    it('should recover after database reconnection', async () => {\n      // Ensure database is connected\n      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chat_js_test');\n\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n\n  describe('Network Timeout Handling', () => {\n    it('should handle slow database queries with timeout', async () => {\n      // This test would require artificially slow database operations\n      // For now, test the timeout configuration\n\n      const startTime = Date.now();\n\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .timeout(30000); // Set explicit timeout\n\n      const duration = Date.now() - startTime;\n\n      // Response should complete within reasonable time\n      expect(duration).toBeLessThan(30000);\n      expect(response.status).toBe(200);\n    });\n\n    it('should handle client-side timeout', async () => {\n      // Test client timeout behavior\n      let timedOut = false;\n\n      try {\n        await request(app)\n          .get('/api/channels')\n          .set('Authorization', `Bearer ${accessToken}`)\n          .timeout(1); // Very short timeout\n      } catch (error) {\n        timedOut = true;\n        expect(error.code).toBe('ECONNABORTED');\n      }\n\n      expect(timedOut).toBe(true);\n    });\n  });\n\n  describe('Concurrent Request Handling', () => {\n    it('should handle multiple concurrent requests without errors', async () => {\n      const concurrentRequests = Array(10).fill().map(() =>\n        request(app)\n          .get('/api/channels')\n          .set('Authorization', `Bearer ${accessToken}`)\n      );\n\n      const responses = await Promise.all(concurrentRequests);\n\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(Array.isArray(response.body)).toBe(true);\n      });\n    });\n\n    it('should handle mixed request types concurrently', async () => {\n      const requests = [\n        // Authentication request\n        request(app).post('/api/login').send({\n          identifier: 'error_recovery_test',\n          password: 'testpass123'\n        }),\n        // Channel list request\n        request(app)\n          .get('/api/channels')\n          .set('Authorization', `Bearer ${accessToken}`),\n        // Health check\n        request(app).get('/health'),\n        // Invalid endpoint\n        request(app).get('/api/nonexistent')\n      ];\n\n      const responses = await Promise.allSettled(requests);\n\n      const fulfilled = responses.filter(r => r.status === 'fulfilled');\n      expect(fulfilled.length).toBeGreaterThan(0);\n\n      fulfilled.forEach((result, index) => {\n        const response = result.value;\n        switch (index) {\n          case 0: // Login\n            expect(response.status).toBe(200);\n            break;\n          case 1: // Channels\n            expect(response.status).toBe(200);\n            break;\n          case 2: // Health\n            expect(response.status).toBe(200);\n            break;\n          case 3: // Invalid endpoint\n            expect(response.status).toBe(404);\n            break;\n        }\n      });\n    });\n  });\n\n  describe('Rate Limit Recovery', () => {\n    it('should recover from rate limiting after timeout period', async () => {\n      // Get current timestamp for rate limit window\n      const startTime = Date.now();\n\n      // Send multiple requests to trigger rate limiting\n      const rapidRequests = Array(15).fill().map(() =>\n        request(app)\n          .post('/api/login')\n          .send({\n            identifier: 'test',\n            password: 'test'\n          })\n      );\n\n      // Execute all requests (some will be rate limited)\n      await Promise.allSettled(rapidRequests);\n\n      // Wait for rate limit to expire (15+ minutes would be needed for full recovery)\n      // For testing, just verify rate limiting is working\n      const limitedRequest = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'test',\n          password: 'test'\n        });\n\n      // Should be rate limited\n      expect([400, 429]).toContain(limitedRequest.status);\n    });\n  });\n\n  describe('Memory Leak Prevention', () => {\n    it('should handle memory-intensive operations without leaks', async () => {\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      // Simulate multiple large requests\n      const largeRequests = Array(50).fill().map((_, i) =>\n        request(app)\n          .get('/api/channels')\n          .set('Authorization', `Bearer ${accessToken}`)\n          // Add large payload to simulate memory usage\n          .set('User-Agent', 'a'.repeat(1000))\n      );\n\n      await Promise.all(largeRequests);\n\n      const finalMemory = process.memoryUsage().heapUsed;\n\n      // Memory usage should not increase dramatically\n      const memoryIncrease = finalMemory - initialMemory;\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024); // Less than 50MB increase\n    });\n  });\n\n  describe('Service Degradation', () => {\n    it('should handle requests during high CPU usage simulation', async () => {\n      // Simulate CPU intensive operation\n      const cpuIntensiveTask = () => {\n        const start = Date.now();\n        while (Date.now() - start < 1000) {\n          Math.random() * Math.random();\n        }\n      };\n\n      // Start CPU intensive operations\n      const cpuPromises = Array(4).fill().map(() => new Promise(resolve => {\n        setImmediate(() => {\n          cpuIntensiveTask();\n          resolve();\n        });\n      }));\n\n      // Send request during CPU load\n      const requestPromises = Array(5).fill().map(() =>\n        request(app)\n          .get('/health')\n          .timeout(10000)\n      );\n\n      const [cpuResults, requestResults] = await Promise.all([\n        Promise.all(cpuPromises),\n        Promise.all(requestPromises)\n      ]);\n\n      // All requests should complete successfully\n      requestResults.forEach(response => {\n        expect([200, 503]).toContain(response.status);\n      });\n    });\n  });\n\n  describe('Circuit Breaker Pattern', () => {\n    it('should implement basic circuit breaker for database failures', async () => {\n      // This would require custom circuit breaker implementation\n      // For now, test database error handling\n\n      // Force database error by dropping connection\n      const originalConnection = mongoose.connection;\n      await mongoose.disconnect();\n\n      let consecutiveErrors = 0;\n      const maxErrors = 5;\n\n      for (let i = 0; i < maxErrors + 1; i++) {\n        const response = await request(app)\n          .get('/api/channels')\n          .set('Authorization', `Bearer ${accessToken}`)\n          .timeout(5000);\n\n        if (response.status === 500 || response.status === 503) {\n          consecutiveErrors++;\n        }\n      }\n\n      // Should have consecutive database errors\n      expect(consecutiveErrors).toBeGreaterThan(0);\n\n      // Reconnect for other tests\n      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chat_js_test');\n    });\n  });\n\n  describe('Graceful Shutdown Scenarios', () => {\n    it('should handle requests during application shutdown', async () => {\n      // Start a long-running request\n      const longRequest = request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .timeout(60000); // Long timeout for graceful shutdown test\n\n      // Simulate shutdown signal\n      // In real scenario, this would trigger graceful shutdown\n      process.emit('SIGTERM');\n\n      const response = await longRequest;\n\n      // Request should either complete or be rejected gracefully\n      expect([200, 503, 'ECONNABORTED']).toContain(response.status || response.code);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}