{"version":3,"names":["io","require","request","jwt","connectDB","closeDB","User","Message","Channel","SocketTestServer","testServer","testUser","testToken","clientSocket","PORT","serverPort","describe","beforeAll","start","nickname","email","password","status","save","expressApp","app","response","post","send","body","token","afterAll","disconnect","stop","beforeEach","done","auth","forceNew","on","error","console","message","fail","Error","afterEach","test","expect","connected","toBe","newSocket","id","toBeDefined","emit","room","data","author","text","includes","channel","users","Array","isArray","length","toBeGreaterThan","toHaveProperty","code","setTimeout","messageText","messages","secondClient","secondUser","then","secondToken","sign","_id","role","process","env","JWT_SECRET","expiresIn","privateMessage","to","target","toBeUndefined","channelId","listenerClient","speaking"],"sources":["socket.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst request = require('supertest');\nconst jwt = require('jsonwebtoken');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Message = require('../models/Message');\nconst Channel = require('../models/Channel');\nconst SocketTestServer = require('./socket-server.test');\n\nlet testServer;\nlet testUser;\nlet testToken;\nlet clientSocket;\nconst PORT = 3003; // Use running server port\n\nlet serverPort;\n\n\n\ndescribe('Socket.IO Integration Tests', () => {\n  beforeAll(async () => {\n    // Connect to test database\n    await connectDB();\n\n    // Create test server\n    testServer = new SocketTestServer();\n    serverPort = await testServer.start();\n\n    // Create test user\n    testUser = new User({\n      nickname: 'socketTestUser',\n      email: 'socket@test.com',\n      password: 'testpass123',\n      status: 'online'\n    });\n    await testUser.save();\n\n    // Get JWT token\n    const expressApp = testServer.app; // Access test server's express app\n    const response = await request(expressApp)\n      .post('/test-login')\n      .send({ nickname: 'socketTestUser' });\n\n    testToken = response.body.token;\n  });\n\n  afterAll(async () => {\n    if (clientSocket) {\n      clientSocket.disconnect();\n    }\n    if (testServer) {\n      await testServer.stop();\n    }\n    await closeDB();\n  });\n\n  beforeEach((done) => {\n    clientSocket = io(`http://localhost:${serverPort}`, {\n      auth: { token: testToken },\n      forceNew: true\n    });\n\n    clientSocket.on('connect', () => {\n      done();\n    });\n\n    clientSocket.on('connect_error', (error) => {\n      console.error('Connection error:', error.message);\n      done.fail(new Error(`Failed to connect: ${error.message}`));\n    });\n  });\n\n  afterEach(() => {\n    if (clientSocket) {\n      clientSocket.disconnect();\n    }\n  });\n\n  describe('Authentication', () => {\n    test('should connect with valid token', (done) => {\n      expect(clientSocket.connected).toBe(true);\n      done();\n    });\n\n    test('should receive user data on connection', (done) => {\n      const newSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      newSocket.on('connect', () => {\n        expect(newSocket.id).toBeDefined();\n        newSocket.disconnect();\n        done();\n      });\n\n      newSocket.on('connect_error', (error) => {\n        done.fail(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Channel Joining', () => {\n    test('should join text channel', (done) => {\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('message', (data) => {\n        if (data.author === 'System' && data.text.includes('joined the channel')) {\n          expect(data.author).toBe('System');\n          expect(data.room || data.channel).toBe('general');\n          done();\n        }\n      });\n    });\n\n    test('should receive online users list', (done) => {\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('online_users', (users) => {\n        expect(Array.isArray(users)).toBe(true);\n        expect(users.length).toBeGreaterThan(0);\n        expect(users[0]).toHaveProperty('nickname');\n        expect(users[0]).toHaveProperty('role');\n        done();\n      });\n    });\n\n    test('should handle invalid room name', (done) => {\n      clientSocket.emit('join_room', { room: '' });\n\n      clientSocket.on('error', (data) => {\n        expect(data.code).toBe('INVALID_ROOM_FORMAT');\n        done();\n      });\n    });\n\n    test('should handle non-existent channel', (done) => {\n      clientSocket.emit('join_room', { room: 'nonexistent-channel' });\n\n      clientSocket.on('error', (data) => {\n        expect(data.code).toBe('CHANNEL_NOT_FOUND');\n        done();\n      });\n    });\n  });\n\n  describe('Message Handling', () => {\n    beforeEach((done) => {\n      clientSocket.emit('join_room', { room: 'general' });\n      setTimeout(done, 100); // Wait for room join\n    });\n\n    test('should send public message', (done) => {\n      const messageText = 'Hello from Socket.IO test!';\n\n      clientSocket.emit('message', { text: messageText });\n\n      clientSocket.on('message', (data) => {\n        if (data.author === testUser.nickname && data.text === messageText) {\n          expect(data.author).toBe(testUser.nickname);\n          expect(data.room || data.channel).toBe('general');\n          expect(data.text).toBe(messageText);\n          done();\n        }\n      });\n    });\n\n    test('should receive message history', (done) => {\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        done();\n      });\n    });\n  });\n\n  describe('Private Messages', () => {\n    let secondClient;\n\n    beforeEach((done) => {\n      // Create second test user\n      const secondUser = new User({\n        nickname: 'socketTestUser2',\n        email: 'socket2@test.com',\n        password: 'testpass123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        secondClient = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        secondClient.on('connect', () => {\n          secondClient.emit('join_room', { room: 'general' });\n          done();\n        });\n\n        secondClient.on('connect_error', (error) => {\n          done.fail(new Error(`Second client connection failed: ${error.message}`));\n        });\n      });\n    });\n\n    afterEach(() => {\n      if (secondClient) {\n        secondClient.disconnect();\n      }\n    });\n\n    test('should send private message', (done) => {\n      const privateMessage = 'Private message from Socket.IO test';\n\n      clientSocket.emit('private_message', {\n        to: 'socketTestUser2',\n        text: privateMessage\n      });\n\n      // Check if sent message is received by sender (without target)\n      clientSocket.on('private_message', (data) => {\n        if (data.text === privateMessage) {\n          expect(data.author).toBe(testUser.nickname);\n          expect(data.room || data.channel).toBe('general');\n          expect(data.text).toBe(privateMessage);\n          expect(data.target).toBeUndefined(); // Should be null for sender\n          done();\n        }\n      });\n\n      // Check if target receives the message\n      secondClient.on('private_message', (data) => {\n        if (data.text === privateMessage) {\n          expect(data.author).toBe(testUser.nickname);\n          expect(data.target).toBe('socketTestUser2');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('Voice Channels', () => {\n    test('should join voice channel', (done) => {\n      clientSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n      clientSocket.on('voice_joined', (data) => {\n        expect(data.channelId).toBe('voice-chat');\n        done();\n      });\n    });\n\n    test('should leave voice channel', (done) => {\n      // First join\n      clientSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n      clientSocket.on('voice_joined', () => {\n        // Then leave\n        clientSocket.emit('leave_voice_channel');\n\n        clientSocket.on('voice_left', () => {\n          done();\n        });\n      });\n    });\n\n    test('should handle user joined/left voice events', (done) => {\n      let secondClient;\n\n      // Create second user\n      const secondUser = new User({\n        nickname: 'voiceTestUser2',\n        email: 'voice2@test.com',\n        password: 'testpass123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        secondClient = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        secondClient.on('connect', () => {\n          clientSocket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n          clientSocket.on('voice_joined', () => {\n            // Second user joins\n            secondClient.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n            // First user should see second user joining\n            clientSocket.on('user_joined_voice', (data) => {\n              expect(data.nickname).toBe('voiceTestUser2');\n              secondClient.disconnect();\n              done();\n            });\n          });\n        });\n\n        secondClient.on('connect_error', (error) => {\n          done.fail(new Error(`Voice client connection failed: ${error.message}`));\n        });\n      });\n    });\n  });\n\n  describe('Speaking Events', () => {\n    test('should broadcast speaking status', (done) => {\n      const secondUser = new User({\n        nickname: 'speakingTestUser',\n        email: 'speaking@test.com',\n        password: 'test123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        const listenerClient = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        listenerClient.on('connect', () => {\n          listenerClient.emit('join_room', { room: 'general' });\n\n          listenerClient.on('online_users', () => {\n            clientSocket.emit('speaking', { speaking: true });\n\n            listenerClient.on('speaking', (data) => {\n              expect(data.nickname).toBe(testUser.nickname);\n              expect(data.speaking).toBe(true);\n              listenerClient.disconnect();\n              done();\n            });\n          });\n        });\n\n        listenerClient.on('connect_error', (error) => {\n          done.fail(new Error(`Speaking client connection failed: ${error.message}`));\n        });\n      });\n    });\n  });\n\n  describe('Disconnect Handling', () => {\n    test('should handle disconnect gracefully', (done) => {\n      clientSocket.on('disconnect', () => {\n        done();\n      });\n\n      clientSocket.disconnect();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}