{"version":3,"names":["cov_1697khua35","actualCoverage","User","s","require","chatService","channelService","logger","SocketService","constructor","io","f","onlineUsers","Map","userConnections","voiceChannels","setupSocketHandlers","setupCleanup","on","socket","console","log","nickname","set","id","userId","role","room","lastHeartbeat","Date","now","size","setupHeartbeat","registerPublicMessageHandler","registerPrivateMessageHandler","registerJoinRoomHandler","registerGetHistoryHandler","registerVoiceChannelHandlers","registerSpeakinHandler","registerDisconnectHandler","heartbeatInterval","setInterval","connected","b","emit","user","get","toISOString","warn","clearInterval","data","updateHeartbeat","text","trim","messageData","sendPublicMessage","debug","error","message","sendPrivateMessage","code","timestamp","length","channel","history","joinChannel","map","msg","author","type","target","getOnlineUsers","info","getUserChannelHistory","channelId","getChannelById","has","channelPeers","to","socketId","join","peerConnection","stream","voiceChannel","delete","leave","offer","targetSocketId","from","fromNickname","answer","candidate","speaking","currentCount","newCount","Math","max","connectionsLeft","leaveChannel","remainingConnections","findByIdAndUpdate","status","lastActive","process","env","NODE_ENV","cleanupInactiveConnections","timeout","entries","sockets","disconnect","catch","err","module","exports"],"sources":["socketService.js"],"sourcesContent":["const User = require('../models/User');\nconst chatService = require('./chatService');\nconst channelService = require('./channelService');\nconst { logger } = require('../middleware/auth');\n\nclass SocketService {\n  constructor(io) {\n    this.io = io;\n    this.onlineUsers = new Map();\n    this.userConnections = new Map();\n    this.voiceChannels = new Map();\n\n    // Setup socket handlers\n    this.setupSocketHandlers();\n    this.setupCleanup();\n  }\n\n  setupSocketHandlers() {\n    this.io.on('connection', (socket) => {\n      console.log('ðŸš€ Socket connection established');\n      console.log(`ðŸ‘¤ User ${socket.nickname} connected`);\n\n      // Track online user\n      this.onlineUsers.set(socket.id, {\n        userId: socket.userId,\n        nickname: socket.nickname,\n        role: socket.role,\n        room: null,\n        lastHeartbeat: Date.now()\n      });\n\n      // Log current active connections count\n      console.log(`ðŸ“Š Active socket connections: ${this.onlineUsers.size} - auth success for ${socket.nickname}`);\n\n      // Setup heartbeat\n      this.setupHeartbeat(socket);\n\n      // Register event handlers\n      this.registerPublicMessageHandler(socket);\n      this.registerPrivateMessageHandler(socket);\n      this.registerJoinRoomHandler(socket);\n      this.registerGetHistoryHandler(socket);\n      this.registerVoiceChannelHandlers(socket);\n      this.registerSpeakinHandler(socket);\n      this.registerDisconnectHandler(socket);\n    });\n  }\n\n  setupHeartbeat(socket) {\n    const heartbeatInterval = setInterval(() => {\n      if (socket.connected) {\n        socket.emit('heartbeat_request');\n      }\n    }, 15000);\n\n    socket.on('heartbeat', () => {\n      const user = this.onlineUsers.get(socket.id);\n      if (user) {\n        const now = Date.now();\n        user.lastHeartbeat = now;\n        console.log(`ðŸ’“ Heartbeat received from user ${socket.nickname} at ${new Date(now).toISOString()}`);\n      }\n    });\n\n    // Handle heartbeat response from client (required for lower level heartbeat)\n    socket.on('heartbeat_response', () => {\n      const user = this.onlineUsers.get(socket.id);\n      if (user) {\n        const now = Date.now();\n        user.lastHeartbeat = now;\n        console.log(`ðŸ’“ Heartbeat response received from user ${socket.nickname} at ${new Date(now).toISOString()}`);\n      } else {\n        logger.warn(`Heartbeat response received from unknown socket: ${socket.id}`);\n      }\n    });\n\n    socket.on('disconnect', () => {\n      clearInterval(heartbeatInterval);\n    });\n  }\n\n  registerPublicMessageHandler(socket) {\n    socket.on('message', async (data) => {\n      this.updateHeartbeat(socket);\n      if (!socket.room || !data.text?.trim()) return;\n\n      try {\n        const messageData = await chatService.sendPublicMessage(socket, data, this.io);\n        if (messageData) {\n          logger.debug(`Message sent from ${socket.nickname} in ${socket.room}`);\n        }\n      } catch (error) {\n        logger.error('Error in public message handler:', error);\n        socket.emit('error', { message: error.message });\n      }\n    });\n  }\n\n  registerPrivateMessageHandler(socket) {\n    socket.on('private_message', async (data) => {\n      this.updateHeartbeat(socket);\n\n      try {\n        const messageData = await chatService.sendPrivateMessage(socket, data, this.onlineUsers, this.io);\n        if (messageData) {\n          logger.debug(`Private message sent by ${socket.nickname}`);\n        }\n      } catch (error) {\n        logger.error('Error in private message handler:', error);\n        socket.emit('error', { message: error.message });\n      }\n    });\n  }\n\n  registerJoinRoomHandler(socket) {\n    socket.on('join_room', async (data) => {\n      this.updateHeartbeat(socket);\n      const { room } = data;\n\n      if (!room) {\n        socket.emit('error', {\n          message: 'Room name is required',\n          code: 'MISSING_ROOM',\n          timestamp: new Date().toISOString()\n        });\n        return;\n      }\n\n      if (typeof room !== 'string' || room.trim().length === 0) {\n        socket.emit('error', {\n          message: 'Invalid room name format',\n          code: 'INVALID_ROOM_FORMAT',\n          timestamp: new Date().toISOString()\n        });\n        return;\n      }\n\n      try {\n        const { channel, history } = await chatService.joinChannel(socket, room, this.io);\n\n        // Update tracking\n        const user = this.onlineUsers.get(socket.id);\n        if (user) {\n          user.room = room;\n        }\n\n        socket.emit('history', history.map(msg => ({\n          author: msg.author,\n          room: msg.channel,\n          text: msg.text,\n          type: msg.type,\n          target: msg.target,\n          timestamp: msg.timestamp\n        })));\n\n        socket.emit('online_users', await chatService.getOnlineUsers(this.onlineUsers, socket.room));\n        logger.info(`User ${socket.nickname} joined room ${room}`);\n\n      } catch (error) {\n        logger.error('Error joining room:', error);\n        socket.emit('error', {\n          message: error.message,\n          code: 'JOIN_ROOM_FAILED',\n          timestamp: new Date().toISOString()\n        });\n      }\n    });\n  }\n\n  registerGetHistoryHandler(socket) {\n    socket.on('get_history', async () => {\n      if (!socket.room) {\n        socket.emit('history', []);\n        return;\n      }\n\n      try {\n        const history = await chatService.getUserChannelHistory(socket.room, socket.nickname);\n        socket.emit('history', history);\n      } catch (error) {\n        logger.error('Error getting history:', error);\n        socket.emit('error', { message: 'Failed to load message history' });\n      }\n    });\n  }\n\n  registerVoiceChannelHandlers(socket) {\n    socket.on('join_voice_channel', async (data) => {\n      this.updateHeartbeat(socket);\n      const { channelId } = data;\n      if (!channelId) return;\n\n      try {\n        const channel = await channelService.getChannelById(channelId);\n        if (!channel || channel.type !== 'voice') {\n          socket.emit('voice_error', { message: 'Voice channel not found' });\n          return;\n        }\n\n        if (!this.voiceChannels.has(channelId)) {\n          this.voiceChannels.set(channelId, new Map());\n        }\n\n        const channelPeers = this.voiceChannels.get(channelId);\n        socket.to(channelId).emit('user_joined_voice', { nickname: socket.nickname, socketId: socket.id });\n\n        socket.join(channelId);\n        channelPeers.set(socket.id, { peerConnection: null, stream: null });\n        socket.voiceChannel = channelId;\n\n        socket.emit('voice_joined', { channelId });\n        logger.info(`User ${socket.nickname} joined voice channel ${channelId}`);\n\n      } catch (error) {\n        logger.error('Error joining voice channel:', error);\n        socket.emit('voice_error', { message: 'Failed to join voice channel' });\n      }\n    });\n\n    socket.on('leave_voice_channel', () => {\n      this.updateHeartbeat(socket);\n      if (!socket.voiceChannel) return;\n\n      const channelId = socket.voiceChannel;\n      const channelPeers = this.voiceChannels.get(channelId);\n\n      if (channelPeers) {\n        channelPeers.delete(socket.id);\n        if (channelPeers.size === 0) {\n          this.voiceChannels.delete(channelId);\n        }\n      }\n\n      socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n      socket.leave(channelId);\n      socket.voiceChannel = null;\n\n      socket.emit('voice_left');\n      logger.info(`User ${socket.nickname} left voice channel ${channelId}`);\n    });\n\n    // WebRTC signaling\n    socket.on('voice_offer', (data) => {\n      const { offer, targetSocketId } = data;\n      socket.to(targetSocketId).emit('voice_offer', {\n        offer,\n        from: socket.id,\n        fromNickname: socket.nickname\n      });\n    });\n\n    socket.on('voice_answer', (data) => {\n      const { answer, targetSocketId } = data;\n      socket.to(targetSocketId).emit('voice_answer', {\n        answer,\n        from: socket.id,\n        fromNickname: socket.nickname\n      });\n    });\n\n    socket.on('ice_candidate', (data) => {\n      const { candidate, targetSocketId } = data;\n      socket.to(targetSocketId).emit('ice_candidate', {\n        candidate,\n        from: socket.id,\n        fromNickname: socket.nickname\n      });\n    });\n  }\n\n  registerSpeakinHandler(socket) {\n    socket.on('speaking', (data) => {\n      this.updateHeartbeat(socket);\n      socket.to(socket.room).emit('speaking', { nickname: socket.nickname, speaking: data.speaking });\n    });\n  }\n\n  registerDisconnectHandler(socket) {\n    socket.on('disconnect', async () => {\n      logger.info(`User ${socket.nickname} disconnected`);\n\n      try {\n        const userId = socket.userId;\n\n        // Decrease connection count\n        if (userId) {\n          const currentCount = this.userConnections.get(userId) || 0;\n          const newCount = Math.max(0, currentCount - 1);\n          this.userConnections.set(userId, newCount);\n\n          logger.info(`User ${socket.nickname} disconnected (remaining connections: ${newCount})`, {\n            userId: userId,\n            socketId: socket.id,\n            connectionsLeft: newCount\n          });\n        }\n\n        // Leave voice channel\n        if (socket.voiceChannel) {\n          const channelId = socket.voiceChannel;\n          const channelPeers = this.voiceChannels.get(channelId);\n\n          if (channelPeers) {\n            channelPeers.delete(socket.id);\n            if (channelPeers.size === 0) {\n              this.voiceChannels.delete(channelId);\n            }\n          }\n\n          socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n        }\n\n        // Leave room\n        await chatService.leaveChannel(socket, this.io);\n\n        // Remove from tracking\n        this.onlineUsers.delete(socket.id);\n\n        logger.info(`After disconnect, active socket connections: ${this.onlineUsers.size}`);\n\n        // Update user status\n        if (userId) {\n          const remainingConnections = this.userConnections.get(userId) || 0;\n          if (remainingConnections === 0) {\n            await User.findByIdAndUpdate(userId, {\n              status: 'offline',\n              lastActive: new Date()\n            });\n            console.log(`ðŸ”„ User ${socket.nickname} status set to offline (last connection)`);\n            logger.info(`User status set to offline (last connection)`, {\n              userId: userId,\n              nickname: socket.nickname\n            });\n          } else {\n            await User.findByIdAndUpdate(userId, {\n              lastActive: new Date()\n            });\n            console.log(`âœ… User ${socket.nickname} still online (${remainingConnections} connections left)`);\n          }\n        }\n\n      } catch (error) {\n        logger.error('Error in disconnect handler:', error);\n      }\n    });\n  }\n\n  updateHeartbeat(socket) {\n    const user = this.onlineUsers.get(socket.id);\n    if (user) {\n      user.lastHeartbeat = Date.now();\n    }\n  }\n\n  setupCleanup() {\n    // Cleanup inactive connections every 30 seconds\n    if (process.env.NODE_ENV !== 'test') {\n      setInterval(() => {\n        this.cleanupInactiveConnections();\n      }, 30000);\n    }\n  }\n\n  cleanupInactiveConnections() {\n    const now = Date.now();\n    const timeout = 60000; // 60 seconds timeout\n\n    for (const [socketId, user] of this.onlineUsers.entries()) {\n      if (now - user.lastHeartbeat > timeout) {\n        console.log(`ðŸ§¹ Cleansing dead connection for user ${user.nickname}`);\n\n        const socket = this.io.sockets.sockets.get(socketId);\n        if (socket) {\n          socket.disconnect(true);\n        }\n\n        const connectionsLeft = (this.userConnections.get(user.userId) || 0) - 1;\n        this.userConnections.set(user.userId, Math.max(0, connectionsLeft));\n\n        if (connectionsLeft <= 0) {\n          User.findByIdAndUpdate(user.userId, {\n            status: 'offline',\n            lastActive: new Date()\n          }).catch(err => logger.error('Error updating status on cleanup:', err));\n\n          console.log(`ðŸ”„ User ${user.nickname} status set to offline (dead connection)`);\n        }\n\n        this.onlineUsers.delete(socketId);\n      }\n    }\n  }\n}\n\nmodule.exports = SocketService;"],"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","ignoreList":[]}