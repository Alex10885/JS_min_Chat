19386f5d2cb2b40e20f5d86ab8102c0d
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
let mongod;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Start in-memory MongoDB server for tests with default settings
  mongod = await MongoMemoryServer.create();
  const mongoUri = mongod.getUri();

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = mongoUri;
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to in-memory test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues
  await TestFixtures.cleanup();
  await closeDB();

  // Stop the in-memory MongoDB server
  if (mongod) {
    await mongod.stop();
  }

  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test
  if (mongoose.connection.readyState === 1) {
    // Connected
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      await collections[key].deleteMany({});
    }
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsImNvbm5lY3REQiIsImNsb3NlREIiLCJUZXN0Rml4dHVyZXMiLCJvcmlnaW5hbE1vbmdvVXJpIiwibW9uZ29kIiwiYmVmb3JlQWxsIiwiZ2xvYmFsIiwiZ2MiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJjcmVhdGUiLCJtb25nb1VyaSIsImdldFVyaSIsIk5PREVfRU5WIiwiSldUX1NFQ1JFVCIsImNvbnNvbGUiLCJsb2ciLCJzZXR1cCIsImFmdGVyQWxsIiwiY2xlYW51cCIsInN0b3AiLCJhZnRlckVhY2giLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbGxlY3Rpb25zIiwia2V5IiwiZGVsZXRlTWFueSIsImplc3QiLCJzZXRUaW1lb3V0IiwiTk9ERV9URVNUX1RJTUVPVVQiLCJzZXQiXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gPSByZXF1aXJlKCdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInKTtcbmNvbnN0IHsgY29ubmVjdERCLCBjbG9zZURCIH0gPSByZXF1aXJlKCcuLi9kYi9jb25uZWN0aW9uJyk7XG5jb25zdCB7IFRlc3RGaXh0dXJlcyB9ID0gcmVxdWlyZSgnLi9zaGFyZWQvdGVzdEZpeHR1cmVzJyk7XG5cbmxldCBvcmlnaW5hbE1vbmdvVXJpO1xubGV0IG1vbmdvZDtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAvLyBFbmFibGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIG9yaWdpbmFsIE1vbmdvREIgVVJJXG4gICAgb3JpZ2luYWxNb25nb1VyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJO1xuXG4gICAgLy8gU3RhcnQgaW4tbWVtb3J5IE1vbmdvREIgc2VydmVyIGZvciB0ZXN0cyB3aXRoIGRlZmF1bHQgc2V0dGluZ3NcbiAgICBtb25nb2QgPSBhd2FpdCBNb25nb01lbW9yeVNlcnZlci5jcmVhdGUoKTtcbiAgICBjb25zdCBtb25nb1VyaSA9IG1vbmdvZC5nZXRVcmkoKTtcblxuICAgIC8vIFNldCB0ZXN0IGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJID0gbW9uZ29Vcmk7XG4gICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd5b3VyX3N1cGVyX3NlY3VyZV9qd3Rfc2VjcmV0X2tleV9oZXJlX3JlcGxhY2VfaW5fcHJvZHVjdGlvbic7XG5cbiAgICAvLyBDb25uZWN0IHRvIGluLW1lbW9yeSB0ZXN0IGRhdGFiYXNlXG4gICAgYXdhaXQgY29ubmVjdERCKCk7XG5cbiAgICAvLyBTZXR1cCByZXVzYWJsZSBmaXh0dXJlcyBmb3IgZmFzdGVyIHRlc3QgZXhlY3V0aW9uXG4gICAgY29uc29sZS5sb2coJ1NldHRpbmcgdXAgdGVzdCBmaXh0dXJlcy4uLicpO1xuICAgIGF3YWl0IFRlc3RGaXh0dXJlcy5zZXR1cCgpO1xufSk7XG5cbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICAgLy8gY29uc29sZS5sb2coJ0NsZWFuaW5nIHVwIHRlc3QgZml4dHVyZXMuLi4nKTsgLy8gRGlzYWJsZWQgdG8gYXZvaWQgbW9ja2luZyBpc3N1ZXNcbiAgICAgYXdhaXQgVGVzdEZpeHR1cmVzLmNsZWFudXAoKTtcbiAgICAgYXdhaXQgY2xvc2VEQigpO1xuXG4gICAgIC8vIFN0b3AgdGhlIGluLW1lbW9yeSBNb25nb0RCIHNlcnZlclxuICAgICBpZiAobW9uZ29kKSB7XG4gICAgICAgYXdhaXQgbW9uZ29kLnN0b3AoKTtcbiAgICAgfVxuXG4gICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgVVJJIGlmIG5lZWRlZFxuICAgICBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSA9IG9yaWdpbmFsTW9uZ29Vcmk7XG5cbiAgICAgLy8gRmluYWwgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICAgfVxuIH0pO1xuXG5hZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIENsZWFyIGFsbCBjb2xsZWN0aW9ucyBhZnRlciBlYWNoIHRlc3RcbiAgICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAxKSB7IC8vIENvbm5lY3RlZFxuICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBtb25nb29zZS5jb25uZWN0aW9uLmNvbGxlY3Rpb25zO1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29sbGVjdGlvbnMpIHtcbiAgICAgICAgYXdhaXQgY29sbGVjdGlvbnNba2V5XS5kZWxldGVNYW55KHt9KTtcbiAgICAgIH1cbiAgICB9XG4gfSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHRpbWVvdXRzIGFuZCBzdGFiaWxpemF0aW9uXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApOyAgLy8gMzAgc2Vjb25kIGdsb2JhbCB0aW1lb3V0XG5wcm9jZXNzLmVudi5OT0RFX1RFU1RfVElNRU9VVCA9IDI1MDAwOyAgLy8gQ3VzdG9tIGVudiBmb3IgSFRUUCB0ZXN0c1xuXG4vLyBJbmNyZWFzZSBzb2NrZXQgdGltZW91dCBmb3IgZGF0YWJhc2Ugb3BlcmF0aW9uc1xubW9uZ29vc2Uuc2V0KCdidWZmZXJDb21tYW5kcycsIGZhbHNlKTsgIC8vIERpc2FibGUgbW9uZ29vc2UgYnVmZmVyaW5nXG5tb25nb29zZS5zZXQoJ21heFRpbWVNUycsIDIwMDAwKTsgICAgICAvLyAyMCBzZWNvbmQgbGltaXQgZm9yIG9wZXJhdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxD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