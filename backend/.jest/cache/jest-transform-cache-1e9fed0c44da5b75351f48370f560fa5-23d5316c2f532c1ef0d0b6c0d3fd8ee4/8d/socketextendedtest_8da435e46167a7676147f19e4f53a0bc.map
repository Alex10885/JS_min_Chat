{"version":3,"names":["io","require","jwt","connectDB","closeDB","User","Channel","Message","SocketTestServer","waitForEvent","socket","eventName","timeout","retryCount","Promise","resolve","reject","resolved","attempts","cleanup","off","eventHandler","clearTimeout","timeoutId","data","tryWait","setTimeout","Error","once","waitForSocketConnection","connected","connectHandler","errorHandler","error","message","on","simulateLatency","latency","originalEmit","emit","bind","args","retryOperation","operation","maxRetries","delay","attempt","testServer","testUser","testToken","serverPort","describe","beforeAll","jest","start","nickname","email","password","status","save","findOneAndUpdate","id","name","type","createdBy","upsert","new","console","warn","sign","_id","role","process","env","JWT_SECRET","expiresIn","afterAll","stop","test","invalidSocket","auth","token","forceNew","caughtError","expect","rejects","toThrow","toBeTruthy","disconnect","noTokenSocket","done","clientSocket","listenerSocket","room","users","some","user","toBe","updatedUsers","every","secondSocket","beforeEach","secondUser","then","secondToken","author","reconnection","reconnectionDelay","reconnectionAttempts","mockOperation","result","promises","text","results","all","toHaveLength","messagePromises","i","push","allSettled","successful","filter","r","length","toBeGreaterThan","afterEach","privateMessage","to","senderData","receiverData","from","history","Array","isArray","toHaveProperty","messages","code","newSocket","totalSockets","sockets","connectionPromises","_","forEach","sock","channelId","startTime","Date","now","operationCount","targetOperations","performOperation","endTime","duration","toBeLessThan","malformedMessages","undefined","malformed"],"sources":["socket-extended.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst jwt = require('jsonwebtoken');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Channel = require('../models/Channel');\nconst Message = require('../models/Message');\nconst SocketTestServer = require('./socket-server.test');\n\n// Utility function to wait for socket event with timeout and retry\nfunction waitForEvent(socket, eventName, timeout = 5000, retryCount = 3) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    let attempts = 0;\n\n    const cleanup = () => {\n      socket.off(eventName, eventHandler);\n      clearTimeout(timeoutId);\n    };\n\n    const eventHandler = (data) => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        resolve(data);\n      }\n    };\n\n    const tryWait = () => {\n      if (resolved || attempts >= retryCount) return;\n\n      const timeoutId = setTimeout(() => {\n        if (!resolved) {\n          attempts++;\n          if (attempts < retryCount) {\n            tryWait(); // Retry\n          } else {\n            cleanup();\n            reject(new Error(`Event '${eventName}' not received after ${retryCount} attempts (${timeout * retryCount}ms)`));\n          }\n        }\n      }, timeout);\n\n      if (!resolved) {\n        socket.once(eventName, eventHandler);\n      }\n    };\n\n    tryWait();\n  });\n}\n\n// Utility function to wait for socket connection with timeout\nfunction waitForSocketConnection(socket, timeout = 5000) {\n  return new Promise((resolve, reject) => {\n    if (socket.connected) {\n      resolve(socket);\n      return;\n    }\n\n    let resolved = false;\n    let cleanup = () => {\n      socket.off('connect', connectHandler);\n      socket.off('connect_error', errorHandler);\n      clearTimeout(timeoutId);\n    };\n\n    const connectHandler = () => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        resolve(socket);\n      }\n    };\n\n    const errorHandler = (error) => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        reject(new Error(`Socket connection failed: ${error.message}`));\n      }\n    };\n\n    const timeoutId = setTimeout(() => {\n      if (!resolved) {\n        resolved = true;\n        cleanup();\n        reject(new Error(`Socket connection timeout after ${timeout}ms`));\n      }\n    }, timeout);\n\n    socket.on('connect', connectHandler);\n    socket.on('connect_error', errorHandler);\n  });\n}\n\n// Utility function to simulate network latency\nfunction simulateLatency(socket, latency = 100) {\n  const originalEmit = socket.emit.bind(socket);\n  socket.emit = (...args) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        originalEmit(...args);\n        resolve();\n      }, latency);\n    });\n  };\n}\n\n// Retry utility for operations\nasync function retryOperation(operation, maxRetries = 3, delay = 1000) {\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      if (attempt === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n}\n\nlet testServer;\nlet testUser;\nlet testToken;\nlet serverPort;\n\ndescribe('Socket.IO Extended Tests - Improved Stability', () => {\n  beforeAll(async () => {\n    jest.setTimeout(90000); // Increase timeout for full test suite\n\n    await retryOperation(async () => {\n      await connectDB();\n    }, 3, 2000);\n\n    testServer = new SocketTestServer();\n    serverPort = await retryOperation(async () => {\n      return await testServer.start();\n    }, 3, 2000);\n\n    testUser = new User({\n      nickname: 'extendedSocketTestUser',\n      email: 'extended-socket@test.com',\n      password: 'testpass123',\n      status: 'online'\n    });\n    await testUser.save();\n\n    // Create test channels with better error handling\n    try {\n      await Channel.findOneAndUpdate(\n        { id: 'general' },\n        { id: 'general', name: 'General Chat', type: 'text', createdBy: 'system' },\n        { upsert: true, new: true }\n      );\n\n      await Channel.findOneAndUpdate(\n        { id: 'voice-chat' },\n        { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' },\n        { upsert: true, new: true }\n      );\n\n      await Channel.findOneAndUpdate(\n        { id: 'private-test' },\n        { id: 'private-test', name: 'Private Test', type: 'text', createdBy: 'system' },\n        { upsert: true, new: true }\n      );\n    } catch (error) {\n      console.warn('Channel creation warning:', error.message);\n    }\n\n    // Create JWT token\n    testToken = jwt.sign(\n      { id: testUser._id, nickname: testUser.nickname, role: testUser.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n  });\n\n  afterAll(async () => {\n    if (testServer) {\n      await testServer.stop();\n    }\n    await closeDB();\n  });\n\n  describe('Authentication Edge Cases', () => {\n    test('should reject invalid JWT token', async () => {\n      const invalidSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: 'invalid-token' },\n        forceNew: true\n      });\n\n      let caughtError = null;\n      invalidSocket.on('connect_error', (error) => {\n        caughtError = error;\n      });\n\n      // Wait for connection attempt to fail\n      await expect(waitForSocketConnection(invalidSocket, 3000)).rejects.toThrow();\n\n      expect(caughtError).toBeTruthy();\n      invalidSocket.disconnect();\n    });\n\n    test('should reject connection without token', async () => {\n      const noTokenSocket = io(`http://localhost:${serverPort}`, {\n        forceNew: true\n      });\n\n      let caughtError = null;\n      noTokenSocket.on('connect_error', (error) => {\n        caughtError = error;\n      });\n\n      await expect(waitForSocketConnection(noTokenSocket, 3000)).rejects.toThrow();\n\n      expect(caughtError).toBeTruthy();\n      noTokenSocket.disconnect();\n    });\n  });\n\n  describe('Disconnection Handling', () => {\n    test('should handle user disconnect gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.on('disconnect', () => {\n          done();\n        });\n        socket.disconnect();\n      });\n    });\n\n    test('should update online users list on disconnect', (done) => {\n      let clientSocket, listenerSocket;\n\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        clientSocket.emit('join_room', { room: 'general' });\n\n        clientSocket.on('online_users', () => {\n          listenerSocket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true\n          });\n\n          listenerSocket.on('connect', () => {\n            listenerSocket.emit('join_room', { room: 'general' });\n\n            listenerSocket.on('online_users', (users) => {\n              expect(users.some(user => user.nickname === testUser.nickname)).toBe(true);\n              clientSocket.disconnect();\n\n              setTimeout(() => {\n                listenerSocket.emit('get_online_users');\n                listenerSocket.on('online_users', (updatedUsers) => {\n                  expect(updatedUsers.every(user => user.nickname !== testUser.nickname)).toBe(true);\n                  listenerSocket.disconnect();\n                  done();\n                });\n              }, 500);\n            });\n          });\n        });\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Private Messages - /w Command Edge Cases', () => {\n    let clientSocket, secondSocket;\n\n    beforeEach((done) => {\n      const secondUser = new User({\n        nickname: 'extendedTestUser2',\n        email: 'extended-test2@test.com',\n        password: 'testpass123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        clientSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        secondSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        secondSocket.on('connect', () => {\n          clientSocket.emit('join_room', { room: 'general' });\n          secondSocket.emit('join_room', { room: 'general' });\n          done();\n        });\n\n        secondSocket.on('connect_error', (error) => {\n          done(new Error(`Second socket failed: ${error.message}`));\n        });\n      });\n    \n      describe('Network Conditions Emulation', () => {\n        test('should handle high latency connections', async () => {\n          const socket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true\n          });\n    \n          // Simulate latency by monkey-patching the emit method\n          simulateLatency(socket);\n    \n          await waitForSocketConnection(socket, 10000); // Increased timeout for latency\n    \n          socket.emit('join_room', { room: 'general' });\n    \n          const data = await waitForEvent(socket, 'message', 10000);\n          expect(data.author).toBe('System');\n    \n          socket.disconnect();\n        });\n    \n        test('should handle connection drops and recovery', async () => {\n          const socket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true,\n            reconnection: true,\n            reconnectionDelay: 100,\n            reconnectionAttempts: 5\n          });\n    \n          await waitForSocketConnection(socket);\n    \n          socket.emit('join_room', { room: 'general' });\n          await waitForEvent(socket, 'online_users');\n    \n          // Forcefully disconnect the socket\n          socket.disconnect();\n    \n          // The test passes if we reach here without hanging\n          expect(true).toBe(true);\n        });\n    \n        test('should retry failed operations', async () => {\n          let retryCount = 0;\n    \n          const mockOperation = async () => {\n            retryCount++;\n            if (retryCount < 2) {\n              throw new Error('Simulated network error');\n            }\n            return 'success';\n          };\n    \n          const result = await retryOperation(mockOperation, 3, 10); // Very short delay for testing\n          expect(result).toBe('success');\n          expect(retryCount).toBe(2);\n        });\n    \n        test('should handle multiple simultaneous operations with Promise.all', async () => {\n          const socket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true\n          });\n    \n          await waitForSocketConnection(socket);\n          socket.emit('join_room', { room: 'general' });\n    \n          // Create multiple promises that should complete simultaneously\n          const promises = [\n            waitForEvent(socket, 'online_users'),\n            new Promise(resolve => setTimeout(resolve, 100)).then(() => 'delay'),\n            retryOperation(async () => {\n              socket.emit('message', { text: 'Concurrent test message' });\n              return waitForEvent(socket, 'message');\n            })\n          ];\n    \n          const results = await Promise.all(promises);\n          expect(results[0]).toHaveLength; // online_users is an array\n          expect(results[1]).toBe('delay');\n          expect(results[2].text).toBe('Concurrent test message');\n    \n          socket.disconnect();\n        });\n    \n        test('should maintain stability under message flood', async () => {\n          const socket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true\n          });\n    \n          await waitForSocketConnection(socket);\n          socket.emit('join_room', { room: 'general' });\n          await waitForEvent(socket, 'online_users');\n    \n          const messagePromises = [];\n          for (let i = 0; i < 10; i++) {\n            messagePromises.push(retryOperation(async () => {\n              socket.emit('message', { text: `Flood test ${i}` });\n              return waitForEvent(socket, 'message');\n            }));\n          }\n    \n          // Use Promise.allSettled for messages that might timeout\n          const results = await Promise.allSettled(messagePromises);\n          const successful = results.filter(r => r.status === 'fulfilled').length;\n    \n          expect(successful).toBeGreaterThan(5); // At least 50% success rate\n    \n          socket.disconnect();\n        });\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n      if (secondSocket) secondSocket.disconnect();\n    });\n\n    test('should send private message between users', async () => {\n      const privateMessage = 'Private message from extended test';\n\n      // Wait for both sockets to be ready\n      await retryOperation(async () => {\n        await Promise.all([\n          waitForSocketConnection(clientSocket),\n          waitForSocketConnection(secondSocket)\n        ]);\n      });\n\n      // Emit the message\n      clientSocket.emit('private_message', {\n        to: 'extendedTestUser2',\n        text: privateMessage\n      });\n\n      // Wait for both sides to receive the message\n      const [senderData, receiverData] = await Promise.all([\n        waitForEvent(clientSocket, 'private_message'),\n        waitForEvent(secondSocket, 'private_message')\n      ]);\n\n      expect(senderData.text).toBe(privateMessage);\n      expect(receiverData.text).toBe(privateMessage);\n      expect(receiverData.author).toBe(testUser.nickname);\n      expect(receiverData.from || receiverData.author).toBe(testUser.nickname);\n    });\n  });\n\n  describe('Message History and Archival', () => {\n    let clientSocket;\n\n    beforeEach((done) => {\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        done();\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n    });\n\n    test('should receive history when joining room', async () => {\n      // Send a test message first\n      await retryOperation(async () => {\n        await waitForSocketConnection(clientSocket);\n      });\n\n      clientSocket.emit('join_room', { room: 'general' });\n\n      // Wait for history event\n      const history = await waitForEvent(clientSocket, 'history');\n      expect(Array.isArray(history)).toBe(true);\n      if (history.length > 0) {\n        expect(history[0]).toHaveProperty('author');\n        expect(history[0]).toHaveProperty('text');\n        expect(history[0]).toHaveProperty('timestamp');\n      }\n    });\n\n    test('should handle history request without room', (done) => {\n      clientSocket.emit('get_history');\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        done();\n      });\n    });\n  });\n\n  describe('Room Switching and Channel Validation', () => {\n    test('should handle invalid room names', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: '' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('INVALID_ROOM_FORMAT');\n          socket.disconnect();\n          done();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    test('should handle non-existent channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'non-existent-channel' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('CHANNEL_NOT_FOUND');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Connection Management and Recovery', () => {\n    test('should handle connection recovery after disconnect', async () => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true,\n        reconnection: true,\n        reconnectionDelay: 500\n      });\n\n      await waitForSocketConnection(socket);\n      expect(socket.connected).toBe(true);\n\n      // Disconnect and wait for reconnection\n      socket.disconnect();\n\n      // Wait for disconnect event\n      await waitForEvent(socket, 'disconnect');\n\n      // Create new connection (automatic reconnection would be ideal but may not work reliably)\n      const newSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      await waitForSocketConnection(newSocket);\n      expect(newSocket.connected).toBe(true);\n\n      newSocket.disconnect();\n    });\n\n    test('should handle rapid connections', async () => {\n      const totalSockets = 3;\n      const sockets = [];\n\n      // Create all sockets at once using Promise.all\n      const connectionPromises = Array.from({ length: totalSockets }, async (_, i) => {\n        const socket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        await waitForSocketConnection(socket);\n        sockets.push(socket);\n        return socket;\n      });\n\n      // Wait for all connections simultaneously\n      await Promise.all(connectionPromises);\n      expect(sockets.length).toBe(totalSockets);\n\n      // Clean up\n      sockets.forEach(sock => sock.disconnect());\n    });\n  });\n\n  describe('Advanced Voice Channel Scenarios', () => {\n    test('should reject joining text channel as voice channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'general' }); // Text channel\n        socket.on('voice_error', (data) => {\n          expect(data.message).toBe('Voice channel not found');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n\n    test('should join voice channel without room first', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n        socket.on('voice_joined', (data) => {\n          expect(data.channelId).toBe('voice-chat');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Rate Limiting and Performance', () => {\n    test('should maintain performance under load', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        const startTime = Date.now();\n        let operationCount = 0;\n        const targetOperations = 20;\n\n        const performOperation = () => {\n          socket.emit('message', { text: `Load test ${operationCount + 1}` });\n          operationCount++;\n\n          if (operationCount >= targetOperations) {\n            const endTime = Date.now();\n            const duration = endTime - startTime;\n            expect(duration).toBeLessThan(5000); // 5 seconds max\n            socket.disconnect();\n            done();\n          } else {\n            setTimeout(performOperation, 50);\n          }\n        };\n\n        socket.emit('join_room', { room: 'general' });\n        socket.on('online_users', () => {\n          performOperation();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    test('should handle malformed messages gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'general' });\n\n        socket.on('online_users', () => {\n          const malformedMessages = [null, undefined, { text: '' }, { text: '   ' }, {}];\n\n          malformedMessages.forEach((malformed) => {\n            socket.emit('message', malformed);\n          });\n\n          setTimeout(() => {\n            expect(true).toBe(true); // Test passes if no errors thrown\n            socket.disconnect();\n            done();\n          }, 1000);\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}