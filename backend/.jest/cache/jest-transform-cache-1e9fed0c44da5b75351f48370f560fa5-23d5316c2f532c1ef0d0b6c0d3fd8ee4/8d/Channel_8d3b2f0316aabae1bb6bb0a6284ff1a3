7a280e1611684d11aaa4f5e8f658fdf8
/* istanbul ignore next */
function cov_1yl4sad7cq() {
  var path = "/home/raerlim/Chat-JS/backend/models/Channel.js";
  var hash = "0b2cfde929c6c3824bf7f2438eacd04d851de92c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/raerlim/Chat-JS/backend/models/Channel.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 62,
          column: 2
        }
      },
      "2": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 65,
          column: 40
        }
      },
      "3": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 66,
          column: 35
        }
      },
      "4": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "5": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 101,
          column: 3
        }
      },
      "6": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 71,
          column: 30
        }
      },
      "7": {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 98,
          column: 3
        }
      },
      "8": {
        start: {
          line: 75,
          column: 17
        },
        end: {
          line: 79,
          column: 28
        }
      },
      "9": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "10": {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 83,
          column: 87
        }
      },
      "11": {
        start: {
          line: 87,
          column: 19
        },
        end: {
          line: 87,
          column: 25
        }
      },
      "12": {
        start: {
          line: 88,
          column: 18
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "13": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 89,
          column: 76
        }
      },
      "14": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "15": {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 92,
          column: 40
        }
      },
      "16": {
        start: {
          line: 93,
          column: 6
        },
        end: {
          line: 93,
          column: 16
        }
      },
      "17": {
        start: {
          line: 94,
          column: 6
        },
        end: {
          line: 94,
          column: 75
        }
      },
      "18": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 23
        }
      },
      "19": {
        start: {
          line: 100,
          column: 2
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "20": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 113,
          column: 2
        }
      },
      "21": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 92
        }
      },
      "22": {
        start: {
          line: 108,
          column: 3
        },
        end: {
          line: 110,
          column: 4
        }
      },
      "23": {
        start: {
          line: 109,
          column: 5
        },
        end: {
          line: 109,
          column: 112
        }
      },
      "24": {
        start: {
          line: 112,
          column: 3
        },
        end: {
          line: 112,
          column: 27
        }
      },
      "25": {
        start: {
          line: 115,
          column: 0
        },
        end: {
          line: 115,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 70,
            column: 27
          }
        },
        loc: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 70
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 104,
            column: 35
          },
          end: {
            line: 104,
            column: 36
          }
        },
        loc: {
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 104
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "1": {
        loc: {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 73,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 73,
            column: 16
          }
        }, {
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 73,
            column: 29
          }
        }, {
          start: {
            line: 73,
            column: 33
          },
          end: {
            line: 73,
            column: 41
          }
        }],
        line: 73
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 108,
            column: 3
          },
          end: {
            line: 110,
            column: 4
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 3
          },
          end: {
            line: 110,
            column: 4
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0b2cfde929c6c3824bf7f2438eacd04d851de92c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yl4sad7cq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yl4sad7cq();
const mongoose =
/* istanbul ignore next */
(cov_1yl4sad7cq().s[0]++, require('mongoose'));
const channelSchema =
/* istanbul ignore next */
(cov_1yl4sad7cq().s[1]++, new mongoose.Schema({
  id: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  parent: {
    type: String,
    default: null
  },
  type: {
    type: String,
    enum: ['text', 'voice'],
    required: true
  },
  description: {
    type: String,
    maxlength: 500
  },
  position: {
    type: Number,
    default: 0
  },
  createdBy: {
    type: String,
    required: true,
    trim: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  permissions: {
    read: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    },
    write: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    }
  },
  locked: {
    type: Boolean,
    default: false
  }
}));

// Indexes
/* istanbul ignore next */
cov_1yl4sad7cq().s[2]++;
channelSchema.index({
  id: 1,
  type: 1
}); // For channel queries by type
/* istanbul ignore next */
cov_1yl4sad7cq().s[3]++;
channelSchema.index({
  parent: 1
}); // For nested channels
/* istanbul ignore next */
cov_1yl4sad7cq().s[4]++;
channelSchema.index({
  position: 1
}); // For ordering

// Generate unique ID from name and handle slug
/* istanbul ignore next */
cov_1yl4sad7cq().s[5]++;
channelSchema.pre('save', async function (next) {
  /* istanbul ignore next */
  cov_1yl4sad7cq().f[0]++;
  cov_1yl4sad7cq().s[6]++;
  this.updatedAt = new Date();
  /* istanbul ignore next */
  cov_1yl4sad7cq().s[7]++;
  if (
  /* istanbul ignore next */
  (cov_1yl4sad7cq().b[1][0]++, this.isNew) &&
  /* istanbul ignore next */
  (cov_1yl4sad7cq().b[1][1]++, this.name) &&
  /* istanbul ignore next */
  (cov_1yl4sad7cq().b[1][2]++, !this.id)) {
    /* istanbul ignore next */
    cov_1yl4sad7cq().b[0][0]++;
    // Generate base ID from name
    let baseId =
    /* istanbul ignore next */
    (cov_1yl4sad7cq().s[8]++, this.name.toLowerCase().replace(/[^a-z0-9\s-]/g, '') // Remove special chars except spaces and hyphens
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .replace(/^-|-$/g, '')); // Remove leading/trailing hyphens

    // Ensure ID is not empty
    /* istanbul ignore next */
    cov_1yl4sad7cq().s[9]++;
    if (!baseId) {
      /* istanbul ignore next */
      cov_1yl4sad7cq().b[2][0]++;
      cov_1yl4sad7cq().s[10]++;
      baseId = 'channel-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    } else
    /* istanbul ignore next */
    {
      cov_1yl4sad7cq().b[2][1]++;
    }

    // Ensure uniqueness
    let uniqueId =
    /* istanbul ignore next */
    (cov_1yl4sad7cq().s[11]++, baseId);
    let counter =
    /* istanbul ignore next */
    (cov_1yl4sad7cq().s[12]++, 1);
    let existing =
    /* istanbul ignore next */
    (cov_1yl4sad7cq().s[13]++, await mongoose.model('Channel').findOne({
      id: uniqueId
    }));
    /* istanbul ignore next */
    cov_1yl4sad7cq().s[14]++;
    while (existing) {
      /* istanbul ignore next */
      cov_1yl4sad7cq().s[15]++;
      uniqueId = `${baseId}-${counter}`;
      /* istanbul ignore next */
      cov_1yl4sad7cq().s[16]++;
      counter++;
      /* istanbul ignore next */
      cov_1yl4sad7cq().s[17]++;
      existing = await mongoose.model('Channel').findOne({
        id: uniqueId
      });
    }
    /* istanbul ignore next */
    cov_1yl4sad7cq().s[18]++;
    this.id = uniqueId;
  } else
  /* istanbul ignore next */
  {
    cov_1yl4sad7cq().b[0][1]++;
  }
  cov_1yl4sad7cq().s[19]++;
  next();
});

// Remove channel method (used for deleting with checks)
/* istanbul ignore next */
cov_1yl4sad7cq().s[20]++;
channelSchema.methods.safeDelete = async function () {
  /* istanbul ignore next */
  cov_1yl4sad7cq().f[1]++;
  // Count messages in this channel
  const messageCount =
  /* istanbul ignore next */
  (cov_1yl4sad7cq().s[21]++, await mongoose.model('Message').countDocuments({
    channel: this.id
  }));
  /* istanbul ignore next */
  cov_1yl4sad7cq().s[22]++;
  if (messageCount > 0) {
    /* istanbul ignore next */
    cov_1yl4sad7cq().b[3][0]++;
    cov_1yl4sad7cq().s[23]++;
    throw new Error(`Cannot delete channel with ${messageCount} messages. Channel must be empty or archived.`);
  } else
  /* istanbul ignore next */
  {
    cov_1yl4sad7cq().b[3][1]++;
  }
  cov_1yl4sad7cq().s[24]++;
  return this.deleteOne();
};
/* istanbul ignore next */
cov_1yl4sad7cq().s[25]++;
module.exports = mongoose.model('Channel', channelSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,