01637422a19e49553224f113e3686834
const mongoose = require('mongoose');
const messageSchema = new mongoose.Schema({
  author: {
    type: String,
    required: true,
    trim: true
  },
  text: {
    type: String,
    required: true,
    maxlength: 2000
  },
  channel: {
    type: String,
    required: true,
    index: true
  },
  type: {
    type: String,
    enum: ['public', 'private', 'system'],
    default: 'public'
  },
  target: {
    type: String,
    trim: true,
    default: null
  },
  timestamp: {
    type: Date,
    default: Date.now,
    index: true
  },
  status: {
    type: String,
    enum: ['delivered', 'failed'],
    default: 'delivered'
  },
  replyTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Message',
    default: null
  }
});

// Indexes for performance and queries
messageSchema.index({
  channel: 1,
  timestamp: -1
});
messageSchema.index({
  author: 1,
  timestamp: -1
});
messageSchema.index({
  channel: 1,
  type: 1,
  timestamp: -1
});

// For private messages
messageSchema.index({
  channel: 1,
  author: 1,
  target: 1,
  timestamp: -1
});

// Limit history retrieval (keep recent messages)
messageSchema.pre('save', function (next) {
  if (this.isNew && this.type === 'system') {
    // System messages don't need complex processing
    return next();
  }
  next();
});
module.exports = mongoose.model('Message', messageSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJtZXNzYWdlU2NoZW1hIiwiU2NoZW1hIiwiYXV0aG9yIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidHJpbSIsInRleHQiLCJtYXhsZW5ndGgiLCJjaGFubmVsIiwiaW5kZXgiLCJlbnVtIiwiZGVmYXVsdCIsInRhcmdldCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzdGF0dXMiLCJyZXBseVRvIiwiVHlwZXMiLCJPYmplY3RJZCIsInJlZiIsInByZSIsIm5leHQiLCJpc05ldyIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJzb3VyY2VzIjpbIk1lc3NhZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuXG5jb25zdCBtZXNzYWdlU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGF1dGhvcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB0cmltOiB0cnVlXG4gIH0sXG4gIHRleHQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgbWF4bGVuZ3RoOiAyMDAwXG4gIH0sXG4gIGNoYW5uZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgaW5kZXg6IHRydWVcbiAgfSxcbiAgdHlwZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBlbnVtOiBbJ3B1YmxpYycsICdwcml2YXRlJywgJ3N5c3RlbSddLFxuICAgIGRlZmF1bHQ6ICdwdWJsaWMnXG4gIH0sXG4gIHRhcmdldDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB0cmltOiB0cnVlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgdGltZXN0YW1wOiB7XG4gICAgdHlwZTogRGF0ZSxcbiAgICBkZWZhdWx0OiBEYXRlLm5vdyxcbiAgICBpbmRleDogdHJ1ZVxuICB9LFxuICBzdGF0dXM6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWydkZWxpdmVyZWQnLCAnZmFpbGVkJ10sXG4gICAgZGVmYXVsdDogJ2RlbGl2ZXJlZCdcbiAgfSxcbiAgcmVwbHlUbzoge1xuICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICByZWY6ICdNZXNzYWdlJyxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH1cbn0pO1xuXG4vLyBJbmRleGVzIGZvciBwZXJmb3JtYW5jZSBhbmQgcXVlcmllc1xubWVzc2FnZVNjaGVtYS5pbmRleCh7IGNoYW5uZWw6IDEsIHRpbWVzdGFtcDogLTEgfSk7XG5tZXNzYWdlU2NoZW1hLmluZGV4KHsgYXV0aG9yOiAxLCB0aW1lc3RhbXA6IC0xIH0pO1xubWVzc2FnZVNjaGVtYS5pbmRleCh7IGNoYW5uZWw6IDEsIHR5cGU6IDEsIHRpbWVzdGFtcDogLTEgfSk7XG5cbi8vIEZvciBwcml2YXRlIG1lc3NhZ2VzXG5tZXNzYWdlU2NoZW1hLmluZGV4KHsgY2hhbm5lbDogMSwgYXV0aG9yOiAxLCB0YXJnZXQ6IDEsIHRpbWVzdGFtcDogLTEgfSk7XG5cbi8vIExpbWl0IGhpc3RvcnkgcmV0cmlldmFsIChrZWVwIHJlY2VudCBtZXNzYWdlcylcbm1lc3NhZ2VTY2hlbWEucHJlKCdzYXZlJywgZnVuY3Rpb24obmV4dCkge1xuICBpZiAodGhpcy5pc05ldyAmJiB0aGlzLnR5cGUgPT09ICdzeXN0ZW0nKSB7XG4gICAgLy8gU3lzdGVtIG1lc3NhZ2VzIGRvbid0IG5lZWQgY29tcGxleCBwcm9jZXNzaW5nXG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfVxuICBuZXh0KCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnTWVzc2FnZScsIG1lc3NhZ2VTY2hlbWEpOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRXBDLE1BQU1DLGFBQWEs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