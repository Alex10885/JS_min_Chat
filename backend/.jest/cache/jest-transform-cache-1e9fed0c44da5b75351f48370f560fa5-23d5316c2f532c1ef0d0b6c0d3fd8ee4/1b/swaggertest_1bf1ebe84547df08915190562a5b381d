c6905fff7539bae5522aa2057775d594
const request = require('supertest');
const express = require('express');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

// Create test app with Swagger
const app = express();

// Swagger setup (minimal for testing)
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Test API',
      version: '1.0.0'
    }
  },
  apis: []
};
const swaggerSpec = swaggerJsdoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));
app.get('/api-docs.json', (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  res.send(swaggerSpec);
});
describe('Swagger Documentation', () => {
  it('should return Swagger JSON spec', async () => {
    const response = await request(app).get('/api-docs.json').expect(200);
    expect(response.body).toHaveProperty('openapi', '3.0.0');
    expect(response.body).toHaveProperty('info');
    expect(response.body.info).toHaveProperty('title', 'Test API');
  });
  it('should serve Swagger UI', async () => {
    const response = await request(app).get('/api-docs').expect(200);
    expect(response.text).toContain('Swagger');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImV4cHJlc3MiLCJzd2FnZ2VySnNkb2MiLCJzd2FnZ2VyVWkiLCJhcHAiLCJzd2FnZ2VyT3B0aW9ucyIsImRlZmluaXRpb24iLCJvcGVuYXBpIiwiaW5mbyIsInRpdGxlIiwidmVyc2lvbiIsImFwaXMiLCJzd2FnZ2VyU3BlYyIsInVzZSIsInNlcnZlIiwic2V0dXAiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZXRIZWFkZXIiLCJzZW5kIiwiZGVzY3JpYmUiLCJpdCIsInJlc3BvbnNlIiwiZXhwZWN0IiwiYm9keSIsInRvSGF2ZVByb3BlcnR5IiwidGV4dCIsInRvQ29udGFpbiJdLCJzb3VyY2VzIjpbInN3YWdnZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3Qgc3dhZ2dlckpzZG9jID0gcmVxdWlyZSgnc3dhZ2dlci1qc2RvYycpO1xuY29uc3Qgc3dhZ2dlclVpID0gcmVxdWlyZSgnc3dhZ2dlci11aS1leHByZXNzJyk7XG5cbi8vIENyZWF0ZSB0ZXN0IGFwcCB3aXRoIFN3YWdnZXJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuLy8gU3dhZ2dlciBzZXR1cCAobWluaW1hbCBmb3IgdGVzdGluZylcbmNvbnN0IHN3YWdnZXJPcHRpb25zID0ge1xuICBkZWZpbml0aW9uOiB7XG4gICAgb3BlbmFwaTogJzMuMC4wJyxcbiAgICBpbmZvOiB7IHRpdGxlOiAnVGVzdCBBUEknLCB2ZXJzaW9uOiAnMS4wLjAnIH1cbiAgfSxcbiAgYXBpczogW11cbn07XG5cbmNvbnN0IHN3YWdnZXJTcGVjID0gc3dhZ2dlckpzZG9jKHN3YWdnZXJPcHRpb25zKTtcbmFwcC51c2UoJy9hcGktZG9jcycsIHN3YWdnZXJVaS5zZXJ2ZSwgc3dhZ2dlclVpLnNldHVwKHN3YWdnZXJTcGVjKSk7XG5cbmFwcC5nZXQoJy9hcGktZG9jcy5qc29uJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIHJlcy5zZW5kKHN3YWdnZXJTcGVjKTtcbn0pO1xuXG5kZXNjcmliZSgnU3dhZ2dlciBEb2N1bWVudGF0aW9uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiBTd2FnZ2VyIEpTT04gc3BlYycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgLmdldCgnL2FwaS1kb2NzLmpzb24nKVxuICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdvcGVuYXBpJywgJzMuMC4wJyk7XG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdpbmZvJyk7XG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuaW5mbykudG9IYXZlUHJvcGVydHkoJ3RpdGxlJywgJ1Rlc3QgQVBJJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2VydmUgU3dhZ2dlciBVSScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgLmdldCgnL2FwaS1kb2NzJylcbiAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgIGV4cGVjdChyZXNwb25zZS50ZXh0KS50b0NvbnRhaW4oJ1N3YWdnZXInKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUUsWUFBWSxHQUFHRixPQUFPLENBQUMsZUFBZSxDQUFDO0FBQzdDLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLG9CQUFvQixDQUFDOztBQUUvQztBQUNBLE1BQU1JLEdBQUcsR0FBR0gsT0FBTyxDQUFDLENBQUM7O0FBRXJCO0FBQ0EsTUFBTUksY0FBYyxHQUFHO0VBQ3JCQyxVQUFVLEVBQUU7SUFDVkMsT0FBTyxFQUFFLE9BQU87SUFDaEJDLElBQUksRUFBRTtNQUFFQyxLQUFLLEVBQUUsVUFBVTtNQUFFQyxPQUFPLEVBQUU7SUFBUTtFQUM5QyxDQUFDO0VBQ0RDLElBQUksRUFBRTtBQUNSLENBQUM7QUFFRCxNQUFNQyxXQUFXLEdBQUdWLFlBQVksQ0FBQ0csY0FBYyxDQUFDO0FBQ2hERCxHQUFHLENBQUNTLEdBQUcsQ0FBQyxXQUFXLEVBQUVWLFNBQVMsQ0FBQ1csS0FBSyxFQUFFWCxTQUFTLENBQUNZLEtBQUssQ0FBQ0gsV0FBVyxDQUFDLENBQUM7QUFFbkVSLEdBQUcsQ0FBQ1ksR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxLQUFLO0VBQ3RDQSxHQUFHLENBQUNDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUM7RUFDakRELEdBQUcsQ0FBQ0UsSUFBSSxDQUFDUixXQUFXLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBRUZTLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNO0VBQ3RDQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsWUFBWTtJQUNoRCxNQUFNQyxRQUFRLEdBQUcsTUFBTXhCLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDLENBQ2hDWSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FDckJRLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFZEEsTUFBTSxDQUFDRCxRQUFRLENBQUNFLElBQUksQ0FBQyxDQUFDQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztJQUN4REYsTUFBTSxDQUFDRCxRQUFRLENBQUNFLElBQUksQ0FBQyxDQUFDQyxjQUFjLENBQUMsTUFBTSxDQUFDO0lBQzVDRixNQUFNLENBQUNELFFBQVEsQ0FBQ0UsSUFBSSxDQUFDakIsSUFBSSxDQUFDLENBQUNrQixjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztFQUNoRSxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLHlCQUF5QixFQUFFLFlBQVk7SUFDeEMsTUFBTUMsUUFBUSxHQUFHLE1BQU14QixPQUFPLENBQUNLLEdBQUcsQ0FBQyxDQUNoQ1ksR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUNoQlEsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUVkQSxNQUFNLENBQUNELFFBQVEsQ0FBQ0ksSUFBSSxDQUFDLENBQUNDLFNBQVMsQ0FBQyxTQUFTLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119