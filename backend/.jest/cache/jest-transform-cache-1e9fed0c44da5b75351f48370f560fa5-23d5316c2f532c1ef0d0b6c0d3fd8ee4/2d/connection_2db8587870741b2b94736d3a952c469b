be3f3b327362a2d569df030ce6071f52
const mongoose = require('mongoose');
const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(winston.format.timestamp(), winston.format.errors({
    stack: true
  }), winston.format.json()),
  defaultMeta: {
    service: 'database'
  },
  transports: [new winston.transports.File({
    filename: 'logs/database.log'
  }), new winston.transports.Console({
    format: winston.format.combine(winston.format.colorize(), winston.format.simple())
  })]
});
const connectDB = async (retries = 5) => {
  for (let i = 1; i <= retries; i++) {
    try {
      const conn = await mongoose.connect(process.env.MONGODB_URI, {
        // Modern Mongoose doesn't need these options, but keeping for compatibility
        // useNewUrlParser: true,
        // useUnifiedTopology: true,
        // Increase timeouts for better reliability
        serverSelectionTimeoutMS: 30000,
        socketTimeoutMS: 45000,
        connectTimeoutMS: 30000
      });
      logger.info(`MongoDB Connected: ${conn.connection.host}`);

      // Handle connection events
      mongoose.connection.on('error', err => {
        logger.error('Database connection error:', err);
      });
      mongoose.connection.on('disconnected', () => {
        logger.warn('Database disconnected');
      });
      mongoose.connection.on('reconnected', () => {
        logger.info('Database reconnected');
      });

      // Handle unexpected disconnections with reconnection
      mongoose.connection.on('disconnected', () => {
        logger.warn('Database unexpectedly disconnected, attempting to reconnect...');
        setTimeout(() => {
          connectDB(1); // Single retry on disconnection
        }, 5000);
      });
      return conn;
    } catch (error) {
      logger.error(`Database connection attempt ${i}/${retries} failed:`, error);
      if (i === retries) {
        logger.error('Database connection failed after all retries:', error);
        throw error; // Let the caller handle it
      }

      // Exponential backoff for retries
      const delay = Math.min(1000 * Math.pow(2, i - 1), 30000);
      logger.info(`Retrying database connection in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};
const closeDB = async () => {
  try {
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      logger.info('Database connection closed gracefully');
    } else {
      logger.info('Database connection was not open, no need to close');
    }
  } catch (error) {
    logger.error('Error closing database connection:', error);
    // Force close if graceful close fails
    try {
      mongoose.connection.close(true);
    } catch (forceError) {
      logger.error('Force close failed:', forceError);
    }
  }
};
module.exports = {
  connectDB,
  closeDB
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,