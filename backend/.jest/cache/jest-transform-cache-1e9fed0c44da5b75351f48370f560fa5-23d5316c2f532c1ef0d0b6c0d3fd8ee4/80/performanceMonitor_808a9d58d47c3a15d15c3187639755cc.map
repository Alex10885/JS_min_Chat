{"version":3,"names":["cov_24sbid70js","actualCoverage","performance","PerformanceObserver","s","require","winston","PerformanceMonitor","constructor","f","logger","createLogger","level","format","combine","timestamp","errors","stack","json","transports","File","filename","Console","colorize","simple","performanceObserver","list","entries","getEntries","forEach","entry","logPerformanceMetric","observe","type","metrics","responseTimes","endpointStats","Map","slowQueries","memoryUsage","throughput","lastResetTime","Date","now","alerts","slowResponseThreshold","highErrorRateThreshold","highMemoryThreshold","apiPerformanceMiddleware","req","res","next","startTime","startMemory","process","heapUsed","endpoint","method","b","route","path","url","debug","userAgent","get","ip","toISOString","on","endTime","endMemory","responseTime","memoryDelta","storeEndpointMetrics","statusCode","info","toFixed","contentLength","warn","threshold","recommendation","error","message","dbQueryPerformanceMiddleware","dbQueryObserver","query","options","mark","result","measure","getEntriesByName","length","duration","log","operation","name","collection","JSON","stringify","clearMarks","clearMeasures","push","shift","has","set","count","totalTime","avgTime","minTime","maxTime","p95Time","statusCodes","stats","Math","min","max","sortedTimes","sort","a","p95Index","floor","getHealthData","uptime","memory","used","total","heapTotal","percentage","requests","averageResponseTime","calculateAverageResponseTime","p95ResponseTime","calculateP95ResponseTime","endpoints","Array","from","map","memoryImpact","reduce","sorted","checkAlerts","avgResponseTime","errorRate","usage","detail","getDetailedStats","resetMetrics","cpu","cpuUsage","platform","nodeVersion","version","pid","environment","env","NODE_ENV","clear","performanceMonitor","getHealthCheck","healthData","status","getPerformanceDashboard","detailedStats","recommendations","generatePerformanceRecommendations","module","exports"],"sources":["performanceMonitor.js"],"sourcesContent":["const { performance, PerformanceObserver } = require('perf_hooks');\nconst winston = require('winston');\n\n// Performance monitoring middleware\nclass PerformanceMonitor {\n  constructor() {\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n      ),\n      transports: [\n        new winston.transports.File({ filename: 'logs/performance.log' }),\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        })\n      ]\n    });\n\n    this.performanceObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        this.logPerformanceMetric(entry);\n      });\n    });\n\n    this.performanceObserver.observe({ type: 'measure' });\n\n    // Metrics storage (simple in-memory for performance)\n    this.metrics = {\n      responseTimes: [],\n      endpointStats: new Map(),\n      slowQueries: [],\n      memoryUsage: [],\n      throughput: 0,\n      errors: 0,\n      lastResetTime: Date.now()\n    };\n\n    this.alerts = {\n      slowResponseThreshold: 5000, // 5 seconds\n      highErrorRateThreshold: 0.1, // 10%\n      highMemoryThreshold: 0.8 // 80%\n    };\n  }\n\n  // Middleware for API endpoints\n  apiPerformanceMiddleware() {\n    return (req, res, next) => {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage().heapUsed;\n      const endpoint = `${req.method} ${req.route?.path || req.url}`;\n\n      // Log incoming request\n      this.logger.debug('API Request Started', {\n        method: req.method,\n        url: req.url,\n        endpoint,\n        userAgent: req.get('User-Agent'),\n        ip: req.ip,\n        timestamp: new Date().toISOString()\n      });\n\n      res.on('finish', () => {\n        const endTime = performance.now();\n        const endMemory = process.memoryUsage().heapUsed;\n        const responseTime = endTime - startTime;\n        const memoryDelta = endMemory - startMemory;\n\n        // Store metrics\n        this.storeEndpointMetrics(endpoint, responseTime, memoryDelta, res.statusCode);\n\n        // Log detailed performance data\n        this.logger.info('API Response Performance', {\n          endpoint,\n          responseTime: `${responseTime.toFixed(2)}ms`,\n          memoryDelta: `${(memoryDelta / 1024 / 1024).toFixed(2)}MB`,\n          statusCode: res.statusCode,\n          contentLength: res.get('Content-Length') || 0,\n          userAgent: req.get('User-Agent'),\n          ip: req.ip,\n          timestamp: new Date().toISOString()\n        });\n\n        // Alert on slow responses\n        if (responseTime > this.alerts.slowResponseThreshold) {\n          this.logger.warn('⚠️ SLOW RESPONSE ALERT', {\n            endpoint,\n            responseTime: `${responseTime.toFixed(2)}ms`,\n            threshold: `${this.alerts.slowResponseThreshold}ms`,\n            recommendation: 'Consider optimization or caching'\n          });\n        }\n      });\n\n      res.on('error', (error) => {\n        const endTime = performance.now();\n        const responseTime = endTime - startTime;\n\n        this.logger.error('API Request Error', {\n          endpoint,\n          responseTime: `${responseTime.toFixed(2)}ms`,\n          error: error.message,\n          stack: error.stack,\n          ip: req.ip\n        });\n\n        this.metrics.errors++;\n      });\n\n      next();\n    };\n  }\n\n  // Database query performance monitoring middleware\n  dbQueryPerformanceMiddleware() {\n    return async function dbQueryObserver(query, options) {\n      performance.mark('query-start');\n      try {\n        const result = await query();\n        performance.mark('query-end');\n        performance.measure('query-duration', 'query-start', 'query-end');\n\n        const entries = performance.getEntriesByName('query-duration');\n        if (entries.length > 0) {\n          const duration = entries[0].duration;\n\n          winston.log('info', 'Database Query Performance', {\n            operation: query.constructor.name,\n            collection: options?.collection?.name || 'unknown',\n            query: JSON.stringify(options?.query || {}),\n            duration: `${duration.toFixed(2)}ms`,\n            timestamp: new Date().toISOString()\n          });\n\n          // Log slow queries\n          if (duration > 1000) {\n            winston.log('warn', 'SLOW QUERY ALERT', {\n              operation: query.constructor.name,\n              collection: options?.collection?.name || 'unknown',\n              duration: `${duration.toFixed(2)}ms`,\n              query: JSON.stringify(options?.query || {}),\n              timestamp: new Date().toISOString(),\n              recommendation: 'Consider adding indexes or optimizing query'\n            });\n          }\n        }\n\n        return result;\n      } finally {\n        performance.clearMarks('query-start');\n        performance.clearMarks('query-end');\n        performance.clearMeasures('query-duration');\n      }\n    };\n  }\n\n  // Store endpoint metrics for analytics\n  storeEndpointMetrics(endpoint, responseTime, memoryDelta, statusCode) {\n    // Update response times array (keep last 1000 entries)\n    this.metrics.responseTimes.push(responseTime);\n    if (this.metrics.responseTimes.length > 1000) {\n      this.metrics.responseTimes.shift();\n    }\n\n    // Update endpoint statistics\n    if (!this.metrics.endpointStats.has(endpoint)) {\n      this.metrics.endpointStats.set(endpoint, {\n        count: 0,\n        totalTime: 0,\n        avgTime: 0,\n        minTime: responseTime,\n        maxTime: responseTime,\n        p95Time: 0,\n        statusCodes: new Map(),\n        memoryUsage: []\n      });\n    }\n\n    const stats = this.metrics.endpointStats.get(endpoint);\n    stats.count++;\n    stats.totalTime += responseTime;\n    stats.avgTime = stats.totalTime / stats.count;\n    stats.minTime = Math.min(stats.minTime, responseTime);\n    stats.maxTime = Math.max(stats.maxTime, responseTime);\n\n    // Update status codes\n    stats.statusCodes.set(statusCode, (stats.statusCodes.get(statusCode) || 0) + 1);\n\n    // Store memory usage (keep last 100)\n    stats.memoryUsage.push(memoryDelta);\n    if (stats.memoryUsage.length > 100) {\n      stats.memoryUsage.shift();\n    }\n\n    // Calculate P95 response time\n    const sortedTimes = [...this.metrics.responseTimes].sort((a, b) => a - b);\n    const p95Index = Math.floor(sortedTimes.length * 0.95);\n    if (sortedTimes[p95Index]) {\n      stats.p95Time = sortedTimes[p95Index];\n    }\n  }\n\n  // Health check endpoint\n  getHealthData() {\n    const uptime = process.uptime();\n    const memory = process.memoryUsage();\n\n    return {\n      uptime: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m ${Math.floor(uptime % 60)}s`,\n      memory: {\n        used: `${(memory.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n        total: `${(memory.heapTotal / 1024 / 1024).toFixed(2)}MB`,\n        percentage: `${((memory.heapUsed / memory.heapTotal) * 100).toFixed(2)}%`\n      },\n      requests: {\n        total: this.metrics.responseTimes.length,\n        averageResponseTime: this.calculateAverageResponseTime(),\n        p95ResponseTime: this.calculateP95ResponseTime(),\n        errors: this.metrics.errors\n      },\n      endpoints: Array.from(this.metrics.endpointStats.entries()).map(([endpoint, stats]) => ({\n        endpoint,\n        count: stats.count,\n        avgTime: `${stats.avgTime.toFixed(2)}ms`,\n        p95Time: `${stats.p95Time.toFixed(2)}ms`,\n        minTime: `${stats.minTime.toFixed(2)}ms`,\n        maxTime: `${stats.maxTime.toFixed(2)}ms`,\n        memoryImpact: `${(stats.memoryUsage.reduce((a, b) => a + b, 0) / stats.memoryUsage.length / 1024 / 1024).toFixed(2)}MB avg`\n      }))\n    };\n  }\n\n  // Performance metrics calculation\n  calculateAverageResponseTime() {\n    if (this.metrics.responseTimes.length === 0) return 0;\n    return this.metrics.responseTimes.reduce((a, b) => a + b, 0) / this.metrics.responseTimes.length;\n  }\n\n  calculateP95ResponseTime() {\n    if (this.metrics.responseTimes.length === 0) return 0;\n    const sorted = [...this.metrics.responseTimes].sort((a, b) => a - b);\n    return sorted[Math.floor(sorted.length * 0.95)] || 0;\n  }\n\n  // Alert checking\n  checkAlerts() {\n    const avgResponseTime = this.calculateAverageResponseTime();\n    const errorRate = this.metrics.errors / Math.max(this.metrics.responseTimes.length, 1);\n\n    if (avgResponseTime > this.alerts.slowResponseThreshold) {\n      this.logger.warn('🚨 PERFORMANCE ALERT: High average response time', {\n        avgTime: `${avgResponseTime.toFixed(2)}ms`,\n        threshold: `${this.alerts.slowResponseThreshold}ms`\n      });\n    }\n\n    if (errorRate > this.alerts.highErrorRateThreshold) {\n      this.logger.warn('🚨 ERROR RATE ALERT: High error rate', {\n        errorRate: `${(errorRate * 100).toFixed(2)}%`,\n        threshold: `${(this.alerts.highErrorRateThreshold * 100).toFixed(2)}%`\n      });\n    }\n\n    const memoryUsage = process.memoryUsage().heapUsed / process.memoryUsage().heapTotal;\n    if (memoryUsage > this.alerts.highMemoryThreshold) {\n      this.logger.warn('🚨 MEMORY ALERT: High memory usage', {\n        usage: `${(memoryUsage * 100).toFixed(2)}%`,\n        threshold: `${(this.alerts.highMemoryThreshold * 100).toFixed(2)}%`\n      });\n    }\n  }\n\n  logPerformanceMetric(entry) {\n    this.logger.debug('Performance Metric', {\n      name: entry.name,\n      duration: entry.duration,\n      startTime: entry.startTime,\n      detail: entry.detail || {}\n    });\n  }\n\n  // Get detailed stats for monitoring dashboard\n  getDetailedStats() {\n    // Reset metrics periodically (every hour)\n    const now = Date.now();\n    if (now - this.metrics.lastResetTime > 3600000) {\n      this.resetMetrics();\n    }\n\n    return {\n      ...this.metrics,\n      uptime: process.uptime(),\n      cpu: process.cpuUsage(),\n      memory: process.memoryUsage(),\n      platform: process.platform,\n      nodeVersion: process.version,\n      pid: process.pid,\n      environment: process.env.NODE_ENV\n    };\n  }\n\n  // Reset metrics (for periodic cleanup)\n  resetMetrics() {\n    this.metrics.lastResetTime = Date.now();\n    this.metrics.responseTimes = [];\n    this.metrics.endpointStats.clear();\n    this.metrics.slowQueries = [];\n    this.metrics.errors = 0;\n\n    this.logger.info('Performance metrics reset');\n  }\n}\n\n// Export singleton instance\nconst performanceMonitor = new PerformanceMonitor();\n\n// Health check route handler\nconst getHealthCheck = (req, res) => {\n  try {\n    const healthData = performanceMonitor.getHealthData();\n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      ...healthData\n    });\n  } catch (error) {\n    performanceMonitor.logger.error('Health check error:', error);\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// Performance dashboard endpoint\nconst getPerformanceDashboard = (req, res) => {\n  try {\n    const detailedStats = performanceMonitor.getDetailedStats();\n    res.json({\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      metrics: detailedStats,\n      recommendations: generatePerformanceRecommendations(detailedStats)\n    });\n  } catch (error) {\n    performanceMonitor.logger.error('Performance dashboard error:', error);\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// Generate performance recommendations\nfunction generatePerformanceRecommendations(metrics) {\n  const recommendations = [];\n\n  const avgResponseTime = metrics.responseTimes.reduce((a, b) => a + b, 0) / metrics.responseTimes.length;\n  if (avgResponseTime > 2000) {\n    recommendations.push('Consider optimizing slow API endpoints (>2s avg)');\n  }\n\n  const memoryUsage = process.memoryUsage().heapUsed / process.memoryUsage().heapTotal;\n  if (memoryUsage > 0.8) {\n    recommendations.push('High memory usage detected - consider memory optimization');\n  }\n\n  if (metrics.errors / Math.max(metrics.responseTimes.length, 1) > 0.1) {\n    recommendations.push('High error rate - investigate error causes');\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push('Performance looks good! 👍');\n  }\n\n  return recommendations;\n}\n\nmodule.exports = {\n  performanceMonitor,\n  apiPerformanceMiddleware: () => performanceMonitor.apiPerformanceMiddleware(),\n  dbQueryPerformanceMiddleware: () => performanceMonitor.dbQueryPerformanceMiddleware(),\n  getHealthCheck,\n  getPerformanceDashboard,\n  generatePerformanceRecommendations\n};"],"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","ignoreList":[]}