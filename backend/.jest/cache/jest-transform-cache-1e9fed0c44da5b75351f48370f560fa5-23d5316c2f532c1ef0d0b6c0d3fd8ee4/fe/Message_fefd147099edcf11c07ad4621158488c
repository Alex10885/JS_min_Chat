8c4c698b36b934325fc6bcff9af2f35d
const mongoose = require('mongoose');
const messageSchema = new mongoose.Schema({
  author: {
    type: String,
    required: true,
    trim: true
  },
  text: {
    type: String,
    required: true,
    maxlength: 2000
  },
  channel: {
    type: String,
    required: true,
    index: true
  },
  type: {
    type: String,
    enum: ['public', 'private', 'system'],
    default: 'public'
  },
  target: {
    type: String,
    trim: true,
    default: null
  },
  timestamp: {
    type: Date,
    default: Date.now,
    index: true
  },
  status: {
    type: String,
    enum: ['delivered', 'failed'],
    default: 'delivered'
  },
  replyTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Message',
    default: null
  }
});

// Optimized indexes for performance and queries
messageSchema.index({
  channel: 1,
  timestamp: -1
}); // For channel history
messageSchema.index({
  channel: 1,
  type: 1,
  timestamp: -1
}); // For filtered queries
messageSchema.index({
  author: 1,
  timestamp: -1
}); // For user message history

// Compound index for private messages with pagination
messageSchema.index({
  channel: 1,
  author: 1,
  target: 1,
  timestamp: -1
});

// Text index for message search (optional, for future features)
// messageSchema.index({ text: 'text' });

// Index for reply relationships
messageSchema.index({
  replyTo: 1
});

// Index for message counting and cleanup
messageSchema.index({
  channel: 1,
  createdAt: -1
}); // Alternative to direct timestamp

// Limit history retrieval (keep recent messages)
messageSchema.pre('save', function (next) {
  if (this.isNew && this.type === 'system') {
    // System messages don't need complex processing
    return next();
  }
  next();
});
module.exports = mongoose.model('Message', messageSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJtZXNzYWdlU2NoZW1hIiwiU2NoZW1hIiwiYXV0aG9yIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidHJpbSIsInRleHQiLCJtYXhsZW5ndGgiLCJjaGFubmVsIiwiaW5kZXgiLCJlbnVtIiwiZGVmYXVsdCIsInRhcmdldCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzdGF0dXMiLCJyZXBseVRvIiwiVHlwZXMiLCJPYmplY3RJZCIsInJlZiIsImNyZWF0ZWRBdCIsInByZSIsIm5leHQiLCJpc05ldyIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJzb3VyY2VzIjpbIk1lc3NhZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuXG5jb25zdCBtZXNzYWdlU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGF1dGhvcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB0cmltOiB0cnVlXG4gIH0sXG4gIHRleHQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgbWF4bGVuZ3RoOiAyMDAwXG4gIH0sXG4gIGNoYW5uZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgaW5kZXg6IHRydWVcbiAgfSxcbiAgdHlwZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBlbnVtOiBbJ3B1YmxpYycsICdwcml2YXRlJywgJ3N5c3RlbSddLFxuICAgIGRlZmF1bHQ6ICdwdWJsaWMnXG4gIH0sXG4gIHRhcmdldDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB0cmltOiB0cnVlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgdGltZXN0YW1wOiB7XG4gICAgdHlwZTogRGF0ZSxcbiAgICBkZWZhdWx0OiBEYXRlLm5vdyxcbiAgICBpbmRleDogdHJ1ZVxuICB9LFxuICBzdGF0dXM6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWydkZWxpdmVyZWQnLCAnZmFpbGVkJ10sXG4gICAgZGVmYXVsdDogJ2RlbGl2ZXJlZCdcbiAgfSxcbiAgcmVwbHlUbzoge1xuICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICByZWY6ICdNZXNzYWdlJyxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH1cbn0pO1xuXG4vLyBPcHRpbWl6ZWQgaW5kZXhlcyBmb3IgcGVyZm9ybWFuY2UgYW5kIHF1ZXJpZXNcbm1lc3NhZ2VTY2hlbWEuaW5kZXgoeyBjaGFubmVsOiAxLCB0aW1lc3RhbXA6IC0xIH0pOyAvLyBGb3IgY2hhbm5lbCBoaXN0b3J5XG5tZXNzYWdlU2NoZW1hLmluZGV4KHsgY2hhbm5lbDogMSwgdHlwZTogMSwgdGltZXN0YW1wOiAtMSB9KTsgLy8gRm9yIGZpbHRlcmVkIHF1ZXJpZXNcbm1lc3NhZ2VTY2hlbWEuaW5kZXgoeyBhdXRob3I6IDEsIHRpbWVzdGFtcDogLTEgfSk7IC8vIEZvciB1c2VyIG1lc3NhZ2UgaGlzdG9yeVxuXG4vLyBDb21wb3VuZCBpbmRleCBmb3IgcHJpdmF0ZSBtZXNzYWdlcyB3aXRoIHBhZ2luYXRpb25cbm1lc3NhZ2VTY2hlbWEuaW5kZXgoeyBjaGFubmVsOiAxLCBhdXRob3I6IDEsIHRhcmdldDogMSwgdGltZXN0YW1wOiAtMSB9KTtcblxuLy8gVGV4dCBpbmRleCBmb3IgbWVzc2FnZSBzZWFyY2ggKG9wdGlvbmFsLCBmb3IgZnV0dXJlIGZlYXR1cmVzKVxuLy8gbWVzc2FnZVNjaGVtYS5pbmRleCh7IHRleHQ6ICd0ZXh0JyB9KTtcblxuLy8gSW5kZXggZm9yIHJlcGx5IHJlbGF0aW9uc2hpcHNcbm1lc3NhZ2VTY2hlbWEuaW5kZXgoeyByZXBseVRvOiAxIH0pO1xuXG4vLyBJbmRleCBmb3IgbWVzc2FnZSBjb3VudGluZyBhbmQgY2xlYW51cFxubWVzc2FnZVNjaGVtYS5pbmRleCh7IGNoYW5uZWw6IDEsIGNyZWF0ZWRBdDogLTEgfSk7IC8vIEFsdGVybmF0aXZlIHRvIGRpcmVjdCB0aW1lc3RhbXBcblxuLy8gTGltaXQgaGlzdG9yeSByZXRyaWV2YWwgKGtlZXAgcmVjZW50IG1lc3NhZ2VzKVxubWVzc2FnZVNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbihuZXh0KSB7XG4gIGlmICh0aGlzLmlzTmV3ICYmIHRoaXMudHlwZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAvLyBTeXN0ZW0gbWVzc2FnZXMgZG9uJ3QgbmVlZCBjb21wbGV4IHByb2Nlc3NpbmdcbiAgICByZXR1cm4gbmV4dCgpO1xuICB9XG4gIG5leHQoKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdNZXNzYWdlJywgbWVzc2FnZVNjaGVtYSk7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFcEMsTUFBTUMsYUFBYSxHQUFHLElBQUlGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDO0VBQ3hDQyxNQUFNLEVBQUU7SUFDTkMsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLElBQUksRUFBRTtFQUNSLENBQUM7RUFDREMsSUFBSSxFQUFFO0lBQ0pKLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkRyxTQUFTLEVBQUU7RUFDYixDQUFDO0VBQ0RDLE9BQU8sRUFBRTtJQUNQTixJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLElBQUk7SUFDZEssS0FBSyxFQUFFO0VBQ1QsQ0FBQztFQUNEUCxJQUFJLEVBQUU7SUFDSkEsSUFBSSxFQUFFQyxNQUFNO0lBQ1pPLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDO0lBQ3JDQyxPQUFPLEVBQUU7RUFDWCxDQUFDO0VBQ0RDLE1BQU0sRUFBRTtJQUNOVixJQUFJLEVBQUVDLE1BQU07SUFDWkUsSUFBSSxFQUFFLElBQUk7SUFDVk0sT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUNERSxTQUFTLEVBQUU7SUFDVFgsSUFBSSxFQUFFWSxJQUFJO0lBQ1ZILE9BQU8sRUFBRUcsSUFBSSxDQUFDQyxHQUFHO0lBQ2pCTixLQUFLLEVBQUU7RUFDVCxDQUFDO0VBQ0RPLE1BQU0sRUFBRTtJQUNOZCxJQUFJLEVBQUVDLE1BQU07SUFDWk8sSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztJQUM3QkMsT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUNETSxPQUFPLEVBQUU7SUFDUGYsSUFBSSxFQUFFTCxRQUFRLENBQUNHLE1BQU0sQ0FBQ2tCLEtBQUssQ0FBQ0MsUUFBUTtJQUNwQ0MsR0FBRyxFQUFFLFNBQVM7SUFDZFQsT0FBTyxFQUFFO0VBQ1g7QUFDRixDQUFDLENBQUM7O0FBRUY7QUFDQVosYUFBYSxDQUFDVSxLQUFLLENBQUM7RUFBRUQsT0FBTyxFQUFFLENBQUM7RUFBRUssU0FBUyxFQUFFLENBQUM7QUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BEZCxhQUFhLENBQUNVLEtBQUssQ0FBQztFQUFFRCxPQUFPLEVBQUUsQ0FBQztFQUFFTixJQUFJLEVBQUUsQ0FBQztFQUFFVyxTQUFTLEVBQUUsQ0FBQztBQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0RkLGFBQWEsQ0FBQ1UsS0FBSyxDQUFDO0VBQUVSLE1BQU0sRUFBRSxDQUFDO0VBQUVZLFNBQVMsRUFBRSxDQUFDO0FBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbkQ7QUFDQWQsYUFBYSxDQUFDVSxLQUFLLENBQUM7RUFBRUQsT0FBTyxFQUFFLENBQUM7RUFBRVAsTUFBTSxFQUFFLENBQUM7RUFBRVcsTUFBTSxFQUFFLENBQUM7RUFBRUMsU0FBUyxFQUFFLENBQUM7QUFBRSxDQUFDLENBQUM7O0FBRXhFO0FBQ0E7O0FBRUE7QUFDQWQsYUFBYSxDQUFDVSxLQUFLLENBQUM7RUFBRVEsT0FBTyxFQUFFO0FBQUUsQ0FBQyxDQUFDOztBQUVuQztBQUNBbEIsYUFBYSxDQUFDVSxLQUFLLENBQUM7RUFBRUQsT0FBTyxFQUFFLENBQUM7RUFBRWEsU0FBUyxFQUFFLENBQUM7QUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVwRDtBQUNBdEIsYUFBYSxDQUFDdUIsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFTQyxJQUFJLEVBQUU7RUFDdkMsSUFBSSxJQUFJLENBQUNDLEtBQUssSUFBSSxJQUFJLENBQUN0QixJQUFJLEtBQUssUUFBUSxFQUFFO0lBQ3hDO0lBQ0EsT0FBT3FCLElBQUksQ0FBQyxDQUFDO0VBQ2Y7RUFDQUEsSUFBSSxDQUFDLENBQUM7QUFDUixDQUFDLENBQUM7QUFFRkUsTUFBTSxDQUFDQyxPQUFPLEdBQUc3QixRQUFRLENBQUM4QixLQUFLLENBQUMsU0FBUyxFQUFFNUIsYUFBYSxDQUFDIiwiaWdub3JlTGlzdCI6W119