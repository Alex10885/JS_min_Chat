{"version":3,"names":["cov_2c61awv2iu","actualCoverage","express","s","require","body","userController","authenticateToken","requireModerator","requireAdmin","apiRateLimiter","router","Router","console","log","get","getAllUsers","getUsersPaginated","post","isLength","min","max","trim","optional","isInt","banUser","unbanUser","warnUser","isIn","changeUserRole","muteUser","unmuteUser","module","exports"],"sources":["users.js"],"sourcesContent":["const express = require('express');\nconst { body } = require('express-validator');\nconst userController = require('../controllers/userController');\nconst { authenticateToken, requireModerator, requireAdmin } = require('../middleware/auth');\nconst { apiRateLimiter } = require('../config/rateLimit');\n\nconst router = express.Router();\n\n/**\n * @swagger\n * /api/users:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get list of all registered users\n *     description: Retrieves a list of all users with their roles and online status\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of users successfully retrieved\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   id:\n *                     type: string\n *                     description: User's unique identifier\n *                   nickname:\n *                     type: string\n *                     description: User's display name\n *                   role:\n *                     type: string\n *                     enum: [admin, moderator, member]\n *                     description: User's role level\n *                   status:\n *                     type: string\n *                     enum: [online, offline]\n *                     description: User's online status\n *                   createdAt:\n *                     type: string\n *                     format: date-time\n *                     description: User registration date\n *                   lastActive:\n *                     type: string\n *                     format: date-time\n *                     description: Last activity timestamp\n *             example:\n *               - id: \"507f1f77bcf86cd799439011\"\n *                 nickname: \"john_doe\"\n *                 role: \"member\"\n *                 status: \"online\"\n *                 createdAt: \"2024-09-07T10:30:00Z\"\n *                 lastActive: \"2024-09-07T22:15:00Z\"\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       500:\n *         description: Server error\n */\nconsole.log('ðŸ”§ GET /api/users route registered at startup');\nrouter.get('/', authenticateToken, apiRateLimiter, userController.getAllUsers);\n\n// Administrative routes\nrouter.get('/admin', authenticateToken, requireModerator, apiRateLimiter, userController.getUsersPaginated);\n\n// Ban user\nrouter.post('/:userId/ban', authenticateToken, requireModerator, apiRateLimiter, [\n  body('reason').isLength({ min: 1, max: 500 }).trim(),\n  body('duration').optional().isInt({ min: 1, max: 31536000 }) // Max 1 year in seconds\n], userController.banUser);\n\n// Unban user\nrouter.post('/:userId/unban', authenticateToken, requireModerator, apiRateLimiter, userController.unbanUser);\n\n// Warn user\nrouter.post('/:userId/warn', authenticateToken, requireModerator, apiRateLimiter, [\n  body('reason').isLength({ min: 1, max: 500 }).trim(),\n  body('duration').optional().isInt({ min: 1, max: 31536000 })\n], userController.warnUser);\n\n// Change user role\nrouter.post('/:userId/role', authenticateToken, requireAdmin, apiRateLimiter, [\n  body('role').isIn(['member', 'moderator', 'admin'])\n], userController.changeUserRole);\n\n// Mute user\nrouter.post('/:userId/mute', authenticateToken, requireModerator, apiRateLimiter, [\n  body('duration').isInt({ min: 60, max: 86400 }) // 1 minute to 24 hours\n], userController.muteUser);\n\n// Unmute user\nrouter.post('/:userId/unmute', authenticateToken, requireModerator, apiRateLimiter, userController.unmuteUser);\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}