{"version":3,"names":["cov_ei9yax05h","actualCoverage","express","s","require","body","authController","authenticateToken","authRateLimiter","router","Router","console","log","post","isLength","min","max","trim","login","escape","isEmail","normalizeEmail","register","logout","logoutSession","logoutComplete","get","checkSecurityStatus","unlockAccount","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst { body } = require('express-validator');\nconst authController = require('../controllers/authController');\nconst { authenticateToken } = require('../middleware/auth');\nconst {} = require('../config/rateLimit').authRateLimiter;\n\nconst router = express.Router();\n\n/**\n * @swagger\n * /api/login:\n *   post:\n *     tags:\n *       - Authentication\n *     summary: Login existing user\n *     description: Authenticates and logs in an existing user with JWT token\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/LoginRequest'\n *     responses:\n *       200:\n *         description: Login successful\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/AuthResponse'\n *             example:\n *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n *               user:\n *                 id: \"507f1f77bcf86cd799439011\"\n *                 nickname: \"john_doe\"\n *                 email: \"john@example.com\"\n *                 role: \"member\"\n *       400:\n *         description: Invalid credentials or validation errors\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *             example:\n *               error: \"Invalid credentials\"\n *       500:\n *         description: Server error\n */\nconsole.log('ðŸ”§ POST /api/login route registered at startup');\nrouter.post('/login', [\n  body('identifier').isLength({ min: 1, max: 50 }).trim(),\n  body('password').isLength({ min: 6, max: 100 })\n], authController.login);\n\n/**\n * @swagger\n * /api/register:\n *   post:\n *     tags:\n *       - Authentication\n *     summary: Register new user\n *     description: Creates a new user account and returns JWT token\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/RegisterRequest'\n *           example:\n *             nickname: \"john_doe\"\n *             email: \"john@example.com\"\n *             password: \"securePass123\"\n *     responses:\n *       201:\n *         description: Registration successful\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/AuthResponse'\n *             example:\n *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n *               user:\n *                 id: \"507f1f77bcf86cd799439011\"\n *                 nickname: \"john_doe\"\n *                 email: \"john@example.com\"\n *                 role: \"member\"\n *       400:\n *         description: Validation errors or user already exists\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *             example:\n *               error: \"Nickname already taken\"\n *       500:\n *         description: Server error\n */\nrouter.post('/register', [\n  body('nickname').isLength({ min: 3, max: 50 }).trim().escape(),\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 })\n], authController.register);\n\nconsole.log('ðŸ”§ POST /api/logout route registered at startup');\nrouter.post('/logout', authenticateToken, authController.logout);\n\nrouter.post('/logout_session', authController.logoutSession);\nrouter.post('/logout_complete', authController.logoutComplete);\n\nconsole.log('ðŸ”§ GET /api/security-status route registered');\nrouter.get('/security-status', authController.checkSecurityStatus);\n\nconsole.log('ðŸ”§ POST /api/unlock-account route registered');\nrouter.post('/unlock-account', [\n  body('identifier').isLength({ min: 1, max: 50 }).trim(),\n  body('captchaToken').isLength({ min: 1 })\n], authController.unlockAccount);\n\nmodule.exports = router;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAK,CAAC;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAME,cAAc;AAAA;AAAA,CAAAN,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,+BAA+B,CAAC;AAC/D,MAAM;EAAEG;AAAkB,CAAC;AAAA;AAAA,CAAAP,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAM,CAAC,CAAC;AAAA;AAAA,CAAAJ,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,qBAAqB,CAAC,CAACI,eAAe;AAEzD,MAAMC,MAAM;AAAA;AAAA,CAAAT,aAAA,GAAAG,CAAA,OAAGD,OAAO,CAACQ,MAAM,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAAV,aAAA,GAAAG,CAAA;AAuCAQ,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;AAAC;AAAAZ,aAAA,GAAAG,CAAA;AAC9DM,MAAM,CAACI,IAAI,CAAC,QAAQ,EAAE,CACpBR,IAAI,CAAC,YAAY,CAAC,CAACS,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAE;AAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,EACvDZ,IAAI,CAAC,UAAU,CAAC,CAACS,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAE;AAAI,CAAC,CAAC,CAChD,EAAEV,cAAc,CAACY,KAAK,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AAAAlB,aAAA,GAAAG,CAAA;AA2CAM,MAAM,CAACI,IAAI,CAAC,WAAW,EAAE,CACvBR,IAAI,CAAC,UAAU,CAAC,CAACS,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAE;AAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,EAC9Dd,IAAI,CAAC,OAAO,CAAC,CAACe,OAAO,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,EACxChB,IAAI,CAAC,UAAU,CAAC,CAACS,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CACtC,EAAET,cAAc,CAACgB,QAAQ,CAAC;AAAC;AAAAtB,aAAA,GAAAG,CAAA;AAE5BQ,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;AAAC;AAAAZ,aAAA,GAAAG,CAAA;AAC/DM,MAAM,CAACI,IAAI,CAAC,SAAS,EAAEN,iBAAiB,EAAED,cAAc,CAACiB,MAAM,CAAC;AAAC;AAAAvB,aAAA,GAAAG,CAAA;AAEjEM,MAAM,CAACI,IAAI,CAAC,iBAAiB,EAAEP,cAAc,CAACkB,aAAa,CAAC;AAAC;AAAAxB,aAAA,GAAAG,CAAA;AAC7DM,MAAM,CAACI,IAAI,CAAC,kBAAkB,EAAEP,cAAc,CAACmB,cAAc,CAAC;AAAC;AAAAzB,aAAA,GAAAG,CAAA;AAE/DQ,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;AAAC;AAAAZ,aAAA,GAAAG,CAAA;AAC5DM,MAAM,CAACiB,GAAG,CAAC,kBAAkB,EAAEpB,cAAc,CAACqB,mBAAmB,CAAC;AAAC;AAAA3B,aAAA,GAAAG,CAAA;AAEnEQ,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;AAAC;AAAAZ,aAAA,GAAAG,CAAA;AAC5DM,MAAM,CAACI,IAAI,CAAC,iBAAiB,EAAE,CAC7BR,IAAI,CAAC,YAAY,CAAC,CAACS,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAE;AAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,EACvDZ,IAAI,CAAC,cAAc,CAAC,CAACS,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAC1C,EAAET,cAAc,CAACsB,aAAa,CAAC;AAAC;AAAA5B,aAAA,GAAAG,CAAA;AAEjC0B,MAAM,CAACC,OAAO,GAAGrB,MAAM","ignoreList":[]}