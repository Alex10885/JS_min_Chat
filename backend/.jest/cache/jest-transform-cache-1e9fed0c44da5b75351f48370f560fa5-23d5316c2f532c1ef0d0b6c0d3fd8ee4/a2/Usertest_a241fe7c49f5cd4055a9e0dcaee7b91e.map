{"version":3,"names":["User","require","describe","it","userData","nickname","email","password","user","savedUser","save","expect","toBe","role","status","createdAt","toBeDefined","lastActive","error","err","errors","userData1","userData2","code","not","toMatch","isValidPassword","comparePassword","isInvalidPassword","jsonUser","toJSON","toBeUndefined","shortNickname","longNickname","repeat","shortError","longError","originalLastActive","Promise","resolve","setTimeout","Date","getTime","toBeGreaterThan","foundUser","findById","_id","resetToken","generateResetToken","length","resetPasswordToken","resetPasswordExpires","now","oldPassword","resetPassword","toBeNull","isValid","isOldInvalid","message","user1","user2","create","update1","findOneAndUpdate","new","update2","result1","result2","all"],"sources":["User.test.js"],"sourcesContent":["const User = require('../../models/User');\n\ndescribe('User Model', () => {\n  describe('User Creation', () => {\n    it('should create a user with valid data', async () => {\n      const userData = {\n        nickname: 'testuser',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      const savedUser = await user.save();\n\n      expect(savedUser.nickname).toBe(userData.nickname);\n      expect(savedUser.email).toBe(userData.email);\n      expect(savedUser.role).toBe('member');\n      expect(savedUser.status).toBe('offline');\n      expect(savedUser.createdAt).toBeDefined();\n      expect(savedUser.lastActive).toBeDefined();\n    });\n\n    it('should require nickname, email and password', async () => {\n      const user = new User({});\n      let error;\n\n      try {\n        await user.save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.nickname).toBeDefined();\n      expect(error.errors.email).toBeDefined();\n      expect(error.errors.password).toBeDefined();\n    });\n\n    it('should enforce unique constraints', async () => {\n      const userData1 = {\n        nickname: 'duplicateuser',\n        email: 'duplicate@example.com',\n        password: 'password123'\n      };\n\n      const userData2 = {\n        nickname: 'duplicateuser',\n        email: 'another@example.com',\n        password: 'password123'\n      };\n\n      await new User(userData1).save();\n\n      let error;\n      try {\n        await new User(userData2).save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.code).toBe(11000); // MongoDB duplicate key error\n    });\n  });\n\n  describe('Password Methods', () => {\n    it('should hash password before saving', async () => {\n      const userData = {\n        nickname: 'hashuser',\n        email: 'hash@example.com',\n        password: 'plainpassword'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      expect(user.password).not.toBe(userData.password);\n      expect(user.password).toMatch(/^\\$2[ayb]\\$.{56}$/); // bcrypt hash pattern\n    });\n\n    it('should compare passwords correctly', async () => {\n      const userData = {\n        nickname: 'compareuser',\n        email: 'compare@example.com',\n        password: 'testpassword'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      const isValidPassword = await user.comparePassword('testpassword');\n      const isInvalidPassword = await user.comparePassword('wrongpassword');\n\n      expect(isValidPassword).toBe(true);\n      expect(isInvalidPassword).toBe(false);\n    });\n  });\n\n  describe('JSON Serialization', () => {\n    it('should exclude password from JSON output', async () => {\n      const userData = {\n        nickname: 'jsonuser',\n        email: 'json@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      const jsonUser = user.toJSON();\n\n      expect(jsonUser.password).toBeUndefined();\n      expect(jsonUser.nickname).toBe(userData.nickname);\n      expect(jsonUser.email).toBe(userData.email);\n    });\n  });\n\n  describe('Validation', () => {\n    it('should enforce nickname length constraints', async () => {\n      const shortNickname = new User({\n        nickname: 'ab',\n        email: 'test@example.com',\n        password: 'password123'\n      });\n\n      const longNickname = new User({\n        nickname: 'a'.repeat(51),\n        email: 'test@example.com',\n        password: 'password123'\n      });\n\n      let shortError, longError;\n\n      try { await shortNickname.save(); } catch (err) { shortError = err; }\n      try { await longNickname.save(); } catch (err) { longError = err; }\n\n      expect(shortError).toBeDefined();\n      expect(longError).toBeDefined();\n    });\n\n    it('should normalize email format', async () => {\n      const user = new User({\n        nickname: 'emailtest',\n        email: 'TEST@EXAMPLE.COM',\n        password: 'password123'\n      });\n\n      await user.save();\n      expect(user.email).toBe('test@example.com'); // Normalized to lowercase\n    });\n  });\n\n  describe('Status Management', () => {\n    it('should update lastActive timestamp', async () => {\n      const userData = {\n        nickname: 'activetest',\n        email: 'active@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      const originalLastActive = user.lastActive;\n\n      await new Promise(resolve => setTimeout(resolve, 10)); // Small delay\n\n      user.lastActive = new Date();\n      await user.save();\n\n      expect(user.lastActive.getTime()).toBeGreaterThan(originalLastActive.getTime());\n    });\n\n    it('should handle online/offline status correctly', async () => {\n      const userData = {\n        nickname: 'statustest',\n        email: 'status@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      expect(user.status).toBe('offline');\n\n      user.status = 'online';\n      await user.save();\n\n      const foundUser = await User.findById(user._id);\n      expect(foundUser.status).toBe('online');\n    });\n  });\n\n  describe('Role Management', () => {\n    it('should default to member role', async () => {\n      const userData = {\n        nickname: 'roledefault',\n        email: 'role@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      expect(user.role).toBe('member');\n    });\n\n    it('should accept admin role', async () => {\n      const userData = {\n        nickname: 'admintest',\n        email: 'admin@example.com',\n        password: 'password123',\n        role: 'admin'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      expect(user.role).toBe('admin');\n    });\n\n    it('should reject invalid roles', async () => {\n      const userData = {\n        nickname: 'invalidrole',\n        email: 'invalid@example.com',\n        password: 'password123',\n        role: 'superuser'\n      };\n\n      const user = new User(userData);\n      let error;\n\n      try {\n        await user.save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.role).toBeDefined();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle empty strings properly', async () => {\n      const userData = {\n        nickname: '   ',\n        email: 'spaces@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      let error;\n\n      try {\n        await user.save();\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.errors.nickname).toBeDefined();\n    });\n\n    it('should trim whitespace from fields', async () => {\n      const userData = {\n        nickname: '  trimmed ',\n        email: 'trim@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      expect(user.nickname).toBe('trimmed');\n      expect(user.email).toBe('trim@example.com');\n    });\n  });\n  describe('Password Reset Methods', () => {\n    it('should generate a valid reset token', async () => {\n      const userData = {\n        nickname: 'resettokentest',\n        email: 'reset@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      const resetToken = user.generateResetToken();\n\n      expect(resetToken).toBeDefined();\n      expect(typeof resetToken).toBe('string');\n      expect(resetToken.length).toBeGreaterThan(0);\n\n      // Check if token is stored hashed\n      expect(user.resetPasswordToken).not.toBe(resetToken);\n      expect(user.resetPasswordToken).toMatch(/^[a-f0-9]{64}$/); // SHA256 hex hash\n\n      // Check if expiration is set\n      expect(user.resetPasswordExpires).toBeDefined();\n      expect(user.resetPasswordExpires.getTime()).toBeGreaterThan(Date.now());\n    });\n\n    it('should reset password with valid token', async () => {\n      const userData = {\n        nickname: 'resetpasstest',\n        email: 'resetpass@example.com',\n        password: 'oldpassword'\n      };\n\n      const user = new User(userData);\n      await user.save();\n      const oldPassword = user.password;\n\n      const resetToken = user.generateResetToken();\n      await user.save(); // Save the reset token\n\n      // Reset password using the token\n      await user.resetPassword(resetToken, 'newSecurePassword123');\n\n      // Check password was changed and reset fields cleared\n      expect(user.password).not.toBe(oldPassword);\n      expect(user.resetPasswordToken).toBeNull();\n      expect(user.resetPasswordExpires).toBeNull();\n\n      // Verify new password works\n      const isValid = await user.comparePassword('newSecurePassword123');\n      expect(isValid).toBe(true);\n\n      const isOldInvalid = await user.comparePassword('oldpassword');\n      expect(isOldInvalid).toBe(false);\n    });\n\n    it('should reject reset with invalid token', async () => {\n      const userData = {\n        nickname: 'invalidresettoken',\n        email: 'invalidreset@example.com',\n        password: 'password123'\n      };\n\n      const user = new User(userData);\n      await user.save();\n\n      user.generateResetToken();\n      await user.save();\n\n      // Try to reset with wrong token\n      let error;\n      try {\n        await user.resetPassword('invalidtoken', 'newpassword');\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.message).toBe('Invalid or expired password reset token');\n      expect(user.password).toBeDefined(); // Password shouldn't have changed\n    });\n\n    it('should reject reset with expired token', async () => {\n      const userData = {\n        nickname: 'expiredresettoken',\n        email: 'expiredreset@example.com',\n        password: 'password123'\n      };\n\n      const user = new Date();\n      await user.save();\n\n      user.generateResetToken();\n      // Manually expire the token\n      user.resetPasswordExpires = new Date(Date.now() - 1000); // Expired 1 second ago\n      await user.save();\n\n      // Try to reset with expired token\n      let error;\n      try {\n        await user.resetPassword(user.resetPasswordToken, 'newpassword');\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.message).toBe('Password reset token has expired');\n    });\n\n    it('should handle missing token fields', async () => {\n      const user = new User({\n        nickname: 'missingtokentest',\n        email: 'missingtoken@example.com',\n        password: 'password123'\n      });\n\n      let error;\n      try {\n        await user.resetPassword('sometoken', 'newpassword');\n      } catch (err) {\n        error = err;\n      }\n\n      expect(error).toBeDefined();\n      expect(error.message).toBe('Invalid or expired password reset token');\n    });\n  });\n\n  describe('Concurrency Handling', () => {\n    it('should handle concurrent status updates', async () => {\n      const userData = {\n        nickname: 'concurrenttest',\n        email: 'concurrent@example.com',\n        password: 'password123'\n      };\n\n      const user1 = new User(userData);\n      const user2 = new User(userData);\n\n      // Create users\n      await User.create(userData);\n      await User.create(userData);\n\n      // Try concurrent updates\n      const update1 = User.findOneAndUpdate(\n        { nickname: 'concurrenttest' },\n        { status: 'online', lastActive: new Date() },\n        { new: true }\n      );\n\n      const update2 = User.findOneAndUpdate(\n        { nickname: 'conurrenttest' },\n        { status: 'online', lastActive: new Date() },\n        { new: true }\n      );\n\n      const [result1, result2] = await Promise.all([update1, update2]);\n\n      // At least one should succeed\n      expect(result1 !== null || result2 !== null).toBe(true);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}