{"version":3,"names":["http","require","socketIo","express","jwt","cors","connectDB","closeDB","User","Channel","Message","SocketTestServer","constructor","port","app","server","createServer","io","origin","methods","onlineUsers","Map","voiceChannels","userConnections","setupExpress","setupSocketIO","use","json","post","req","res","nickname","body","user","findOne","status","error","save","token","sign","id","_id","role","process","env","JWT_SECRET","expiresIn","message","socket","next","handshake","auth","Error","decoded","verify","findById","userId","connectionCount","get","newConnectionCount","set","findOneAndUpdate","$set","lastActive","Date","new","runValidators","err","on","room","data","trim","length","emit","code","channel","leave","join","joinMessage","author","text","type","to","timestamp","roomUsers","Array","from","values","filter","u","map","history","find","$or","target","sort","limit","msg","messageData","recipient","privateMessage","recipientUser","recipientSocket","keys","socketId","speaking","channelId","has","peerConnection","stream","voiceChannel","channelPeers","delete","size","offer","targetSocketId","fromNickname","answer","candidate","currentCount","newCount","Math","max","findByIdAndUpdate","leaveMessage","start","console","log","Promise","resolve","reject","timeout","setTimeout","listen","clearTimeout","assignedPort","address","stop","close","clear","getPort","module","exports"],"sources":["socket-server.test.js"],"sourcesContent":["const http = require('http');\nconst socketIo = require('socket.io');\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Channel = require('../models/Channel');\nconst Message = require('../models/Message');\n\n// Test server for Socket.IO integration tests\nclass SocketTestServer {\n  constructor(port = 0) { // Use 0 to get random available port\n    this.port = port;\n    this.app = express();\n    this.server = http.createServer(this.app);\n    this.io = socketIo(this.server, {\n      cors: {\n        origin: true,\n        methods: [\"GET\", \"POST\"]\n      }\n    });\n\n    this.onlineUsers = new Map();\n    this.voiceChannels = new Map();\n    this.userConnections = new Map(); // Track user connection counts\n\n    this.setupExpress();\n    this.setupSocketIO();\n  }\n\n  setupExpress() {\n    this.app.use(cors());\n    this.app.use(express.json());\n\n    // Minimal auth route for getting tokens\n    this.app.post('/test-login', async (req, res) => {\n      try {\n        const { nickname } = req.body;\n        const user = await User.findOne({ nickname });\n\n        if (!user) {\n          return res.status(404).json({ error: 'User not found' });\n        }\n\n        // Set user as online for socket auth\n        user.status = 'online';\n        await user.save();\n\n        const token = jwt.sign(\n          { id: user._id, nickname: user.nickname, role: user.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        res.json({ token, user: { id: user._id, nickname: user.nickname, role: user.role } });\n      } catch (error) {\n        res.status(500).json({ error: error.message });\n      }\n    });\n  }\n\n  setupSocketIO() {\n    this.io.use(async (socket, next) => {\n      const token = socket.handshake.auth.token;\n\n      if (!token) {\n        return next(new Error('Authentication token required'));\n      }\n\n      try {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\n        const user = await User.findById(decoded.id);\n\n        if (!user) {\n          return next(new Error('User not found or not online'));\n        }\n\n        // Check if user is marked as offline during authentication\n        if (user.status === 'offline') {\n          return next(new Error('User not found or not online'));\n        }\n\n        // Handle user status update based on connection count\n        const userId = decoded.id;\n        const connectionCount = this.userConnections.get(userId) || 0;\n        const newConnectionCount = connectionCount + 1;\n        this.userConnections.set(userId, newConnectionCount);\n\n        // Update user status to online during authentication\n        await User.findOneAndUpdate(\n          { _id: userId },\n          {\n            $set: {\n              status: 'online',\n              lastActive: new Date()\n            }\n          },\n          { new: true, runValidators: true }\n        );\n\n        socket.userId = decoded.id;\n        socket.nickname = decoded.nickname;\n        socket.role = decoded.role;\n        return next();\n      } catch (err) {\n        return next(new Error('Authentication failed'));\n      }\n    });\n\n    this.io.on('connection', (socket) => {\n      // Track online user\n      this.onlineUsers.set(socket.id, {\n        userId: socket.userId,\n        nickname: socket.nickname,\n        role: socket.role,\n        room: null\n      });\n\n      socket.on('join_room', async (data) => {\n        const { room } = data;\n        if (!room || typeof room !== 'string' || room.trim().length === 0) {\n          socket.emit('error', {\n            message: 'Invalid room name',\n            code: 'INVALID_ROOM_FORMAT'\n          });\n          return;\n        }\n\n        try {\n          const channel = await Channel.findOne({ id: room });\n          if (!channel) {\n            socket.emit('error', {\n              message: `Channel '${room}' not found`,\n              code: 'CHANNEL_NOT_FOUND'\n            });\n            return;\n          }\n\n          // Leave previous room\n          if (socket.room) {\n            socket.leave(socket.room);\n            this.onlineUsers.set(socket.id, { ...this.onlineUsers.get(socket.id), room: null });\n          }\n\n          socket.room = room;\n          socket.join(socket.room);\n\n          this.onlineUsers.set(socket.id, {\n            ...this.onlineUsers.get(socket.id),\n            room: socket.room\n          });\n\n          // Send join system message\n          const joinMessage = new Message({\n            author: 'System',\n            channel: socket.room,\n            text: `${socket.nickname} joined the channel.`,\n            type: 'system'\n          });\n          await joinMessage.save();\n\n          this.io.to(socket.room).emit('message', {\n            author: joinMessage.author,\n            channel: joinMessage.channel,\n            text: joinMessage.text,\n            type: joinMessage.type,\n            timestamp: joinMessage.timestamp\n          });\n\n          // Send online users\n          const roomUsers = Array.from(this.onlineUsers.values())\n            .filter(u => u.room === socket.room)\n            .map(u => ({ nickname: u.nickname, role: u.role }));\n          this.io.to(socket.room).emit('online_users', roomUsers);\n\n          // Send message history\n          const history = await Message.find({\n            channel: socket.room,\n            $or: [\n              { type: 'public' },\n              { type: 'system' },\n              { author: socket.nickname },\n              { target: socket.nickname }\n            ]\n          })\n            .sort({ timestamp: -1 })\n            .limit(100)\n            .sort({ timestamp: 1 });\n\n          socket.emit('history', history.map(msg => ({\n            author: msg.author,\n            room: msg.channel,\n            text: msg.text,\n            type: msg.type,\n            target: msg.target,\n            timestamp: msg.timestamp\n          })));\n\n        } catch (error) {\n          socket.emit('error', { message: 'Failed to join room' });\n        }\n      });\n\n      socket.on('message', async (data) => {\n        if (!socket.room || !data.text?.trim()) return;\n\n        try {\n          const message = new Message({\n            author: socket.nickname,\n            channel: socket.room,\n            text: data.text.trim(),\n            type: 'public'\n          });\n\n          await message.save();\n\n          const messageData = {\n            author: message.author,\n            room: message.channel,\n            text: message.text,\n            timestamp: message.timestamp,\n            status: 'delivered',\n            type: message.type\n          };\n\n          this.io.to(socket.room).emit('message', messageData);\n        } catch (error) {\n          socket.emit('error', { message: 'Failed to send message' });\n        }\n      });\n\n      socket.on('private_message', async (data) => {\n        const { to, text } = data;\n        if (!to || !text?.trim()) return;\n\n        try {\n          // Find recipient user\n          const recipient = await User.findOne({ nickname: to });\n          if (!recipient) {\n            socket.emit('error', { message: 'Recipient not found' });\n            return;\n          }\n\n          // Create private message\n          const privateMessage = new Message({\n            author: socket.nickname,\n            target: to,\n            text: text.trim(),\n            type: 'private'\n          });\n\n          await privateMessage.save();\n\n          const messageData = {\n            author: privateMessage.author,\n            text: privateMessage.text,\n            target: privateMessage.target,\n            timestamp: privateMessage.timestamp,\n            type: 'private_message'\n          };\n\n          // Send to recipient if online\n          const recipientUser = Array.from(this.onlineUsers.values()).find(u => u.nickname === to);\n          if (recipientUser) {\n            const recipientSocket = Array.from(this.onlineUsers.keys()).find(socketId =>\n              this.onlineUsers.get(socketId).nickname === to\n            );\n            if (recipientSocket) {\n              this.io.to(recipientSocket).emit('private_message', messageData);\n            }\n          }\n\n          // Send to sender as confirmation\n          socket.emit('private_message', messageData);\n\n        } catch (error) {\n          socket.emit('error', { message: 'Failed to send private message' });\n        }\n      });\n\n      socket.on('speaking', (data) => {\n        socket.to(socket.room).emit('speaking', {\n          nickname: socket.nickname,\n          speaking: data.speaking\n        });\n      });\n\n      socket.on('join_voice_channel', async (data) => {\n        const { channelId } = data;\n        if (!channelId) return;\n\n        try {\n          const channel = await Channel.findOne({ id: channelId, type: 'voice' });\n          if (!channel) {\n            socket.emit('voice_error', { message: 'Voice channel not found' });\n            return;\n          }\n\n          if (!this.voiceChannels.has(channelId)) {\n            this.voiceChannels.set(channelId, new Map());\n          }\n\n          socket.to(channelId).emit('user_joined_voice', {\n            nickname: socket.nickname,\n            socketId: socket.id\n          });\n\n          socket.join(channelId);\n          this.voiceChannels.get(channelId).set(socket.id, { peerConnection: null, stream: null });\n\n          socket.voiceChannel = channelId;\n          socket.emit('voice_joined', { channelId });\n\n        } catch (error) {\n          socket.emit('voice_error', { message: 'Failed to join voice channel' });\n        }\n      });\n\n      socket.on('leave_voice_channel', () => {\n        if (!socket.voiceChannel) return;\n\n        const channelId = socket.voiceChannel;\n        const channelPeers = this.voiceChannels.get(channelId);\n\n        if (channelPeers) {\n          channelPeers.delete(socket.id);\n          if (channelPeers.size === 0) {\n            this.voiceChannels.delete(channelId);\n          }\n        }\n\n        socket.to(channelId).emit('user_left_voice', {\n          nickname: socket.nickname,\n          socketId: socket.id\n        });\n\n        socket.leave(channelId);\n        socket.voiceChannel = null;\n        socket.emit('voice_left');\n      });\n\n      // Voice signaling\n      socket.on('voice_offer', (data) => {\n        const { offer, targetSocketId } = data;\n        socket.to(targetSocketId).emit('voice_offer', {\n          offer,\n          from: socket.id,\n          fromNickname: socket.nickname\n        });\n      });\n\n      socket.on('voice_answer', (data) => {\n        const { answer, targetSocketId } = data;\n        socket.to(targetSocketId).emit('voice_answer', {\n          answer,\n          from: socket.id,\n          fromNickname: socket.nickname\n        });\n      });\n\n      socket.on('ice_candidate', (data) => {\n        const { candidate, targetSocketId } = data;\n        socket.to(targetSocketId).emit('ice_candidate', {\n          candidate,\n          from: socket.id,\n          fromNickname: socket.nickname\n        });\n      });\n\n      socket.on('disconnect', async () => {\n        // Decrease connection count for this user\n        const userId = socket.userId;\n        if (userId) {\n          const currentCount = this.userConnections.get(userId) || 0;\n          const newCount = Math.max(0, currentCount - 1);\n          this.userConnections.set(userId, newCount);\n\n          // Update user status in database if this was the last connection\n          if (newCount === 0) {\n            await User.findByIdAndUpdate(userId, {\n              status: 'offline',\n              lastActive: new Date()\n            });\n          }\n        }\n\n        // Leave voice channel if in one\n        if (socket.voiceChannel) {\n          const channelId = socket.voiceChannel;\n          const channelPeers = this.voiceChannels.get(channelId);\n\n          if (channelPeers) {\n            channelPeers.delete(socket.id);\n            if (channelPeers.size === 0) {\n              this.voiceChannels.delete(channelId);\n            }\n          }\n\n          socket.to(channelId).emit('user_left_voice', {\n            nickname: socket.nickname,\n            socketId: socket.id\n          });\n        }\n\n        if (socket.room) {\n          socket.leave(socket.room);\n\n          const leaveMessage = new Message({\n            author: 'System',\n            channel: socket.room,\n            text: `${socket.nickname} left the channel.`,\n            type: 'system'\n          });\n          await leaveMessage.save();\n\n          this.io.to(socket.room).emit('message', {\n            author: leaveMessage.author,\n            room: leaveMessage.channel,\n            text: leaveMessage.text,\n            type: leaveMessage.type,\n            timestamp: leaveMessage.timestamp\n          });\n\n          const roomUsers = Array.from(this.onlineUsers.values())\n            .filter(u => u.room === socket.room && u.userId !== socket.userId)\n            .map(u => ({ nickname: u.nickname, role: u.role }));\n          this.io.to(socket.room).emit('online_users', roomUsers);\n        }\n\n        this.onlineUsers.delete(socket.id);\n      });\n    });\n  }\n\n  async start() {\n    console.log(`Starting socket server on port ${this.port}...`);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Server startup timeout after 10 seconds'));\n      }, 10000);\n\n      this.server.listen(this.port, (err) => {\n        clearTimeout(timeout);\n        if (err) {\n          console.error('Failed to start socket server:', err.message);\n          reject(err);\n        } else {\n          const assignedPort = this.server.address().port;\n          console.log(`Socket server successfully started on port ${assignedPort}`);\n          resolve(assignedPort);\n        }\n      });\n    });\n  }\n\n  async stop() {\n    return new Promise((resolve) => {\n      this.server.close(() => {\n        this.onlineUsers.clear();\n        this.voiceChannels.clear();\n        resolve();\n      });\n    });\n  }\n\n  getPort() {\n    return this.server.address()?.port;\n  }\n}\n\nmodule.exports = SocketTestServer;"],"mappings":"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","ignoreList":[]}