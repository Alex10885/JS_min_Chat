{"version":3,"names":["require","config","express","http","socketIo","jwt","cors","winston","swaggerJsdoc","swaggerUi","helmet","rateLimit","body","validationResult","mongoose","connectDB","closeDB","emailService","User","Message","Channel","logger","createLogger","level","format","combine","timestamp","errors","stack","json","defaultMeta","service","transports","File","filename","Console","colorize","simple","app","server","createServer","authRateLimiter","windowMs","max","message","error","standardHeaders","legacyHeaders","apiRateLimiter","generalRateLimiter","passwordResetRateLimiter","io","origin","methods","allowedHeaders","engine","on","err","console","log","code","httpStatus","status","headers","req","use","process","env","NODE_ENV","ALLOWED_ORIGINS","split","credentials","limit","errorHandler","res","next","url","method","ip","userAgent","get","name","Object","values","map","e","field","path","value","details","keys","keyValue","requestId","id","start","Date","now","duration","info","statusCode","user","nickname","JSON","stringify","undefined","authenticateToken","authHeader","token","decoded","verify","JWT_SECRET","findById","userId","warn","contentSecurityPolicy","directives","defaultSrc","styleSrc","fontSrc","imgSrc","scriptSrc","connectSrc","crossOriginEmbedderPolicy","swaggerOptions","definition","openapi","title","version","description","contact","servers","components","schemas","type","properties","minLength","maxLength","email","role","enum","default","createdAt","lastActive","required","createdBy","position","RegisterRequest","password","LoginRequest","identifier","AuthResponse","$ref","ChannelRequest","ErrorResponse","items","msg","param","location","securitySchemes","bearerAuth","scheme","bearerFormat","security","apis","swaggerSpec","removeHeader","serve","setup","setHeader","send","toISOString","uptime","post","isLength","min","trim","escape","isEmail","normalizeEmail","isEmpty","array","existingUser","findOne","$or","conflictField","errorMessage","save","sign","_id","expiresIn","isPasswordValid","comparePassword","authorization","channels","find","select","sort","channelCount","length","onlineUsers","Map","voiceChannels","socket","handshake","auth","Error","currentTime","updateResult","findOneAndUpdate","$ne","$lt","getTime","$set","new","runValidators","previousStatus","socketId","currentStatus","reason","statusUpdateError","set","room","size","data","emit","channel","leave","previousRoomUsers","Array","from","filter","u","to","join","joinMessage","author","text","roomUsers","history","target","messageData","debug","trimmedText","targetNickname","senderRoom","senderSocketId","targetUser","targetFound","targetRoom","onlineUsersInRoom","onlineUsersInSenderRoom","availableUsers","targetSocketId","sender","messageId","onlineUsersCount","messageLength","speaking","channelId","has","channelPeers","peerConnection","stream","voiceChannel","delete","offer","fromNickname","answer","candidate","leaveMessage","findByIdAndUpdate","initializeServer","defaultChannels","channelData","upsert","PORT","listen","exit","close","catch"],"sources":["server.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst winston = require('winston');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoose = require('mongoose');\nconst { connectDB, closeDB } = require('./db/connection');\nconst emailService = require('./services/emailService');\n\n// Import models\nconst User = require('./models/User');\nconst Message = require('./models/Message');\nconst Channel = require('./models/Channel');\n\n// Logger setup\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'chat-server' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/server.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\nconst app = express();\nconst server = http.createServer(app);\n\n// Rate limiting configuration\nconst authRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 auth requests per windowMs\n  message: { error: 'Too many authentication attempts, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst apiRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 API requests per windowMs\n  message: { error: 'Too many requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst generalRateLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 1000, // Limit each IP to 1000 requests per windowMs\n  message: { error: 'Too many requests from this IP, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst passwordResetRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 3, // Limit each IP to 3 password reset requests per windowMs\n  message: { error: 'Too many password reset requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"],\n    allowedHeaders: [\"authorization\", \"content-type\"]\n  },\n  // Ensure both transports are supported\n  transports: ['websocket', 'polling']\n});\n\n// Log socket connection errors for debugging\nio.engine.on('connection_error', (err) => {\n  console.log('🔌 Socket engine connection error:', err.code, err.message);\n  logger.error('Socket connection error:', {\n    code: err.code,\n    message: err.message,\n    httpStatus: err.status,\n    headers: err.req?.headers\n  });\n});\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production'\n    ? process.env.ALLOWED_ORIGINS?.split(',') || false\n    : true,\n  credentials: true\n}));\n\napp.use(express.json({ limit: '10mb' })); // Add payload size limit\n\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n  logger.error('Unhandled error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  // Mongoose validation errors\n  if (err.name === 'ValidationError') {\n    const errors = Object.values(err.errors).map(e => ({\n      field: e.path,\n      message: e.message,\n      value: e.value\n    }));\n\n    return res.status(422).json({\n      error: 'Validation failed',\n      details: errors,\n      code: 'VALIDATION_ERROR'\n    });\n  }\n\n  // Mongoose duplicate key error\n  if (err.code === 11000) {\n    const field = Object.keys(err.keyValue)[0];\n    const value = err.keyValue[field];\n    return res.status(409).json({\n      error: `${field} '${value}' already exists`,\n      code: 'DUPLICATE_ERROR'\n    });\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      error: 'Invalid or expired token',\n      code: 'INVALID_TOKEN'\n    });\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      error: 'Token has expired',\n      code: 'TOKEN_EXPIRED'\n    });\n  }\n\n  // Default server error\n  res.status(500).json({\n    error: 'Internal server error',\n    code: 'INTERNAL_ERROR',\n    requestId: req.id || 'unknown'\n  });\n};\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    logger.info(`${req.method} ${req.url} - ${res.statusCode} (${duration}ms)`, {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      user: req.user?.nickname || 'anonymous',\n      body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined\n    });\n  });\n\n  next();\n});\n\n// JWT authentication middleware\nconst authenticateToken = async (req, res, next) => {\n  try {\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n    if (!token) {\n      return res.status(401).json({\n        error: 'Access token required',\n        code: 'NO_TOKEN'\n      });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n\n    if (!user) {\n      return res.status(401).json({\n        error: 'User not found',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    req.user = user;\n    console.log('✅ JWT authentication successful for user:', user.nickname);\n    next();\n  } catch (error) {\n    logger.warn('JWT authentication failed:', {\n      error: error.message,\n      ip: req.ip\n    });\n\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: 'Invalid token format',\n        code: 'INVALID_TOKEN_FORMAT'\n      });\n    }\n\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Token has expired',\n        code: 'TOKEN_EXPIRED'\n      });\n    }\n\n    return res.status(401).json({\n      error: 'Token verification failed',\n      code: 'TOKEN_VERIFICATION_FAILED'\n    });\n  }\n};\n\n// General rate limiting (applied to all HTTP requests)\napp.use(generalRateLimiter);\n\n// Helmet security headers\napp.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        connectSrc: [\"'self'\"]\n      }\n    },\n    crossOriginEmbedderPolicy: false\n  })\n);\n\n// Swagger configuration\nconst swaggerOptions = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Chat-JS API',\n      version: '1.0.0',\n      description: 'REST API for Chat-JS application with real-time messaging and voice channels',\n      contact: {\n        name: 'Chat-JS Support'\n      }\n    },\n    servers: [\n      {\n        url: 'http://localhost:3001',\n        description: 'Development server'\n      }\n    ],\n    components: {\n      schemas: {\n        User: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'User unique identifier'\n            },\n            nickname: {\n              type: 'string',\n              description: 'User nickname',\n              minLength: 3,\n              maxLength: 50\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'User email address'\n            },\n            role: {\n              type: 'string',\n              enum: ['admin', 'member'],\n              default: 'member',\n              description: 'User role'\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              description: 'User creation timestamp'\n            },\n            lastActive: {\n              type: 'string',\n              format: 'date-time',\n              description: 'Last activity timestamp'\n            },\n            status: {\n              type: 'string',\n              enum: ['online', 'offline'],\n              description: 'User online status'\n            }\n          },\n          required: ['nickname', 'email', 'password', 'role']\n        },\n        Channel: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Channel unique identifier (auto-generated from name)'\n            },\n            name: {\n              type: 'string',\n              description: 'Channel display name',\n              minLength: 1,\n              maxLength: 100\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              description: 'Channel description',\n              maxLength: 500\n            },\n            createdBy: {\n              type: 'string',\n              description: 'Creator nickname'\n            },\n            position: {\n              type: 'number',\n              default: 0,\n              description: 'Channel display position'\n            }\n          },\n          required: ['id', 'name', 'type', 'createdBy']\n        },\n        RegisterRequest: {\n          type: 'object',\n          required: ['nickname', 'email', 'password'],\n          properties: {\n            nickname: {\n              type: 'string',\n              minLength: 3,\n              maxLength: 50,\n              description: 'Unique username'\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'Valid email address'\n            },\n            password: {\n              type: 'string',\n              minLength: 6,\n              description: 'User password'\n            }\n          }\n        },\n        LoginRequest: {\n          type: 'object',\n          required: ['identifier', 'password'],\n          properties: {\n            identifier: {\n              type: 'string',\n              description: 'Username or email'\n            },\n            password: {\n              type: 'string',\n              description: 'User password'\n            }\n          }\n        },\n        AuthResponse: {\n          type: 'object',\n          properties: {\n            token: {\n              type: 'string',\n              description: 'JWT access token'\n            },\n            user: {\n              $ref: '#/components/schemas/User'\n            }\n          }\n        },\n        ChannelRequest: {\n          type: 'object',\n          required: ['name', 'type'],\n          properties: {\n            name: {\n              type: 'string',\n              minLength: 1,\n              maxLength: 100,\n              description: 'Channel display name'\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              maxLength: 500,\n              description: 'Optional channel description'\n            }\n          }\n        },\n        ErrorResponse: {\n          type: 'object',\n          properties: {\n            error: {\n              type: 'string',\n              description: 'Error message'\n            },\n            errors: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  msg: { type: 'string' },\n                  param: { type: 'string' },\n                  location: { type: 'string' }\n                }\n              },\n              description: 'Validation errors array'\n            }\n          }\n        }\n      },\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT'\n        }\n      }\n    },\n    security: [\n      {\n        bearerAuth: []\n      }\n    ]\n  },\n  apis: ['./server.js'] // Path to the API routes\n};\n\nconst swaggerSpec = swaggerJsdoc(swaggerOptions);\n\n// Swagger UI with CSP disabled for this route\napp.use('/api-docs', (req, res, next) => {\n  // Disable CSP for Swagger UI\n  res.removeHeader('Content-Security-Policy');\n  next();\n}, swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n// Swagger JSON endpoint\napp.get('/api-docs.json', (req, res) => {\n  res.removeHeader('Content-Security-Policy');\n  res.setHeader('Content-Type', 'application/json');\n  res.send(swaggerSpec);\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Log middleware to check incoming requests\napp.use((req, res, next) => {\n  logger.info(`🔍 Incoming request: ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    headers: req.headers\n  });\n  next();\n});\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n  * @swagger\n  * /api/register:\n  *   post:\n  *     tags:\n  *       - Authentication\n  *     summary: Register new user\n  *     description: Creates a new user account and returns JWT token\n  *     requestBody:\n  *       required: true\n  *       content:\n  *         application/json:\n  *           schema:\n  *             $ref: '#/components/schemas/RegisterRequest'\n  *           example:\n  *             nickname: \"john_doe\"\n  *             email: \"john@example.com\"\n  *             password: \"securePass123\"\n  *     responses:\n  *       201:\n  *         description: Registration successful\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/AuthResponse'\n  *             example:\n  *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  *               user:\n  *                 id: \"507f1f77bcf86cd799439011\"\n  *                 nickname: \"john_doe\"\n  *                 email: \"john@example.com\"\n  *                 role: \"member\"\n  *       400:\n  *         description: Validation errors or user already exists\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/ErrorResponse'\n  *             example:\n  *               error: \"Nickname already taken\"\n  *       500:\n  *         description: Server error\n  */\napp.post('/api/register', authRateLimiter, [\n  body('nickname').isLength({ min: 3, max: 50 }).trim().escape(),\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { nickname, email, password } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({\n      $or: [{ nickname }, { email }]\n    });\n\n    if (existingUser) {\n      const conflictField = existingUser.nickname === nickname ? 'nickname' : 'email';\n      const errorMessage = conflictField === 'nickname' ? 'Nickname already taken' : 'Email already registered';\n      return res.status(409).json({ error: errorMessage });\n    }\n\n    // Create user\n    const user = new User({ nickname, email, password, role: 'member', status: 'online' });\n    await user.save();\n\n    console.log('JWT_SECRET present:', !!process.env.JWT_SECRET);\n    const token = jwt.sign(\n      { userId: user._id, nickname: user.nickname, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    console.log('JWT token generated successfully');\n    logger.info(`User registered: ${user.nickname}`);\n\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    logger.error('Registration error:', error);\n    res.status(500).json({ error: 'Server error during registration' });\n  }\n/**\n  * @swagger\n  * /api/login:\n  *   post:\n  *     tags:\n  *       - Authentication\n  *     summary: Login existing user\n  *     description: Authenticates and logs in an existing user with JWT token\n  *     requestBody:\n  *       required: true\n  *       content:\n  *         application/json:\n  *           schema:\n  *             $ref: '#/components/schemas/LoginRequest'\n  *     responses:\n  *       200:\n  *         description: Login successful\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/AuthResponse'\n  *             example:\n  *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  *               user:\n  *                 id: \"507f1f77bcf86cd799439011\"\n  *                 nickname: \"john_doe\"\n  *                 email: \"john@example.com\"\n  *                 role: \"member\"\n  *       400:\n  *         description: Invalid credentials or validation errors\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/ErrorResponse'\n  *             example:\n  *               error: \"Invalid credentials\"\n  *       500:\n  *         description: Server error\n  */\napp.post('/api/login', [\n  body('identifier').isLength({ min: 1 }).trim(),\n  body('password').isLength({ min: 1 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { identifier, password } = req.body;\n\n    // Find user by nickname or email\n    const user = await User.findOne({\n      $or: [{ nickname: identifier }, { email: identifier }]\n    });\n\n    if (!user) {\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    // Compare password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      return res.status(400).json({ error: 'Invalid credentials' });\n    }\n\n    // Update user status to online\n    user.status = 'online';\n    await user.save();\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: user._id, nickname: user.nickname, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    logger.info(`User logged in: ${user.nickname}`);\n\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    logger.error('Login error:', error);\n    res.status(500).json({ error: 'Server error during login' });\n  }\n});\n});\n\n/**\n * @swagger\n * /api/channels:\n *   get:\n *     tags:\n *       - Channels\n *     summary: Get list of channels\n *     description: Retrieves a list of all available channels\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of channels\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Channel'\n *             example:\n *               - id: \"general\"\n *                 name: \"General\"\n *                 type: \"text\"\n *                 description: \"\"\n *                 createdBy: \"system\"\n *                 position: 0\n *       401:\n *         description: Unauthorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *             example:\n *               error: \"Access token required\"\n *       500:\n *         description: Internal server error\n */\nconsole.log('🔧 GET /api/channels route registered at startup');\napp.get('/api/channels', authenticateToken, apiRateLimiter, async (req, res) => {\n  console.log('🚀 GET /api/channels endpoint called', { method: req.method, url: req.url, headers: req.headers.authorization ? 'auth header present' : 'no auth header' });\n  try {\n    const channels = await Channel.find({})\n      .select('-_id id name type description createdBy position')\n      .sort({ position: 1 });\n\n    logger.info(`Channels list requested by ${req.user.nickname}`, {\n      userId: req.user._id,\n      channelCount: channels.length\n    });\n\n    console.log('📤 Returning channels data:', channels.length);\n    res.json(channels);\n  } catch (error) {\n    logger.error('Error fetching channels:', error);\n    console.error('❌ Error in GET /api/channels:', error.message);\n    res.status(500).json({ error: 'Failed to fetch channels', code: 'DATABASE_ERROR' });\n  }\n});\n\n// 404 handler (must be before global error handler)\napp.use((req, res) => {\n  console.warn('❌ Final 404 handler executed - route not found!', { method: req.method, url: req.url });\n  logger.warn(`404 - ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  res.status(404).json({\n    error: 'Endpoint not found',\n    path: req.url,\n    method: req.method,\n    code: 'NOT_FOUND'\n  });\n});\n\n// Global error handling middleware (must be last)\napp.use(errorHandler);\n\n\n\n\n\n\n\n\n\n// Global users map for socket management {socketId: {userId, nickname, room}}\nlet onlineUsers = new Map();\n\n// Voice channels management\nconst voiceChannels = new Map(); // channelId -> { socketId: { peerConnection, stream } }\n\nio.use(async (socket, next) => {\n  const token = socket.handshake.auth.token;\n  console.log('🔑 Socket authentication attempt, token present:', !!token);\n\n  if (!token) {\n    console.log('❌ Socket authentication failed: No token provided');\n    return next(new Error('Authentication token required'));\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n\n    console.log(`✅ Socket auth success: ${decoded.nickname}, user found: ${!!user}`);\n\n    if (!user) {\n      console.log('❌ Socket authentication failed: User not found');\n      return next(new Error('User not found'));\n    }\n\n    // Atomic update user status to online with concurrency handling\n    try {\n      const userId = decoded.userId;\n      const currentTime = new Date();\n\n      const updateResult = await User.findOneAndUpdate(\n        {\n          _id: userId,\n          $or: [\n            { status: { $ne: 'online' } }, // If not online, update\n            { lastActive: { $lt: new Date(currentTime.getTime() - 30000) } } // If online but inactive for 30+ seconds\n          ]\n        },\n        {\n          $set: {\n            status: 'online',\n            lastActive: currentTime\n          }\n        },\n        {\n          new: true, // Return updated document\n          runValidators: true\n        }\n      );\n\n      if (updateResult) {\n        console.log(`🔄 Socket auth: User ${decoded.nickname} status set to online (was: ${updateResult.status})`);\n        logger.info(`User status updated to online via socket auth`, {\n          userId: userId,\n          nickname: decoded.nickname,\n          previousStatus: user.status, // Old status before update\n          socketId: socket.id,\n          timestamp: currentTime\n        });\n      } else {\n        console.log(`✅ Socket auth: User ${decoded.nickname} already online or recently active`);\n        logger.info(`User status unchanged via socket auth`, {\n          userId: userId,\n          nickname: decoded.nickname,\n          currentStatus: user.status,\n          socketId: socket.id,\n          reason: 'already_online_or_recent'\n        });\n      }\n\n      // Override local user object with updated data\n      user.status = updateResult ? updateResult.status : user.status;\n      user.lastActive = updateResult ? updateResult.lastActive : user.lastActive;\n\n    } catch (statusUpdateError) {\n      console.error(`❌ Socket auth: Failed to update user status for ${decoded.nickname}:`, statusUpdateError.message);\n      logger.error(`Status update failed during socket auth`, {\n        userId: decoded.userId,\n        nickname: decoded.nickname,\n        error: statusUpdateError.message,\n        socketId: socket.id\n      });\n\n      // Don't fail auth due to status update error - proceed with current status\n      console.log(`⚠️ Socket auth: Proceeding with current user status despite update failure`);\n    }\n\n    socket.userId = decoded.userId;\n    socket.nickname = decoded.nickname;\n    socket.role = decoded.role;\n    console.log(`🎉 Socket fully authenticated: ${socket.nickname}`);\n    return next();\n  } catch (err) {\n    console.error('❌ Socket authentication error:', err.message);\n\n    if (err.name === 'JsonWebTokenError') {\n      return next(new Error('Invalid authentication token'));\n    }\n\n    if (err.name === 'TokenExpiredError') {\n      return next(new Error('Authentication token has expired'));\n    }\n\n    return next(new Error('Authentication failed'));\n  }\n});\n\nio.on('connection', async (socket) => {\n  console.log('🚀 Socket connection established');\n  console.log(`👤 User ${socket.nickname} connected`);\n\n  // Track online user\n  onlineUsers.set(socket.id, {\n    userId: socket.userId,\n    nickname: socket.nickname,\n    role: socket.role,\n    room: null\n  });\n\n  // Log current active connections count\n  console.log(`📊 Active socket connections: ${onlineUsers.size} - auth success for ${socket.nickname}`);\n\n  socket.on('join_room', async (data) => {\n    const { room } = data;\n    if (!room) {\n      logger.warn('Join room failed: No room specified', {\n        userId: socket.userId,\n        nickname: socket.nickname\n      });\n      socket.emit('error', {\n        message: 'Room name is required',\n        code: 'MISSING_ROOM',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    if (typeof room !== 'string' || room.trim().length === 0) {\n      logger.warn('Join room failed: Invalid room format', {\n        userId: socket.userId,\n        nickname: socket.nickname,\n        room\n      });\n      socket.emit('error', {\n        message: 'Invalid room name format',\n        code: 'INVALID_ROOM_FORMAT',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    try {\n      // Verify channel exists\n      const channel = await Channel.findOne({ id: room });\n      if (!channel) {\n        logger.warn('Join room failed: Channel not found', {\n          userId: socket.userId,\n          nickname: socket.nickname,\n          room\n        });\n        socket.emit('error', {\n          message: `Channel '${room}' not found`,\n          code: 'CHANNEL_NOT_FOUND',\n          room,\n          timestamp: new Date().toISOString()\n        });\n        return;\n      }\n\n      // Leave previous room\n      if (socket.room) {\n        socket.leave(socket.room);\n        onlineUsers.set(socket.id, { ...onlineUsers.get(socket.id), room: null });\n\n        // Update online users in previous room\n        const previousRoomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', previousRoomUsers);\n      }\n\n      socket.room = room;\n      socket.join(socket.room);\n\n      // Update user tracking\n      onlineUsers.set(socket.id, {\n        ...onlineUsers.get(socket.id),\n        room: socket.room\n      });\n\n      logger.info(`User ${socket.nickname} joined room ${socket.room}`);\n\n      // Send system message about joining\n      const joinMessage = new Message({\n        author: 'System',\n        channel: socket.room,\n        text: `${socket.nickname} joined the channel.`,\n        type: 'system'\n      });\n      await joinMessage.save();\n\n      io.to(socket.room).emit('message', {\n        author: joinMessage.author,\n        channel: joinMessage.channel,\n        text: joinMessage.text,\n        type: joinMessage.type,\n        timestamp: joinMessage.timestamp\n      });\n\n      // Send online users in current room\n      const roomUsers = Array.from(onlineUsers.values())\n        .filter(u => u.room === socket.room)\n        .map(u => ({ nickname: u.nickname, role: u.role }));\n      io.to(socket.room).emit('online_users', roomUsers);\n\n      // Send message history\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n\n    } catch (error) {\n      logger.error('Error in join_room:', error);\n      socket.emit('error', { message: 'Failed to join room' });\n    }\n  });\n\n  // Load history (fallback, if needed)\n  socket.on('get_history', async () => {\n    if (!socket.room) {\n      socket.emit('history', []);\n      return;\n    }\n\n    try {\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel, // Using channel instead of room for consistency\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n    } catch (error) {\n      logger.error('Error getting history:', error);\n      socket.emit('error', { message: 'Failed to load message history' });\n    }\n  });\n\n  // Public message\n  socket.on('message', async (data) => {\n    if (!socket.room || !data.text?.trim()) return;\n\n    try {\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: data.text.trim(),\n        type: 'public'\n      });\n\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel, // Keeping 'room' for frontend compatibility\n        text: message.text,\n        timestamp: message.timestamp,\n        status: 'delivered',\n        type: message.type\n      };\n\n      io.to(socket.room).emit('message', messageData);\n      logger.debug(`Message saved from ${socket.nickname} in ${socket.room}`);\n    } catch (error) {\n      logger.error('Error saving message:', error);\n      socket.emit('error', { message: 'Failed to send message' });\n    }\n  });\n\n  // Private message\n  socket.on('private_message', async (data) => {\n    if (!socket.room || !data.to || !data.text?.trim()) return;\n\n    const trimmedText = data.text.trim();\n    const targetNickname = data.to.trim();\n\n    try {\n      logger.debug(`Private message attempt from ${socket.nickname} to ${targetNickname}`, {\n        senderRoom: socket.room,\n        senderSocketId: socket.id,\n        userId: socket.userId\n      });\n\n      // Validate target nickname format\n      if (targetNickname.length === 0 || targetNickname.length > 50) {\n        socket.emit('error', {\n          message: 'Invalid target user nickname',\n          code: 'INVALID_TARGET_NICKNAME'\n        });\n        return;\n      }\n\n      // Prevent self-messaging\n      if (targetNickname === socket.nickname) {\n        socket.emit('error', {\n          message: 'Cannot send private message to yourself',\n          code: 'SELF_MESSAGE_NOT_ALLOWED'\n        });\n        return;\n      }\n\n      // Find target user in same room with detailed logging\n      const targetUser = Array.from(onlineUsers.values()).find(\n        u => u.nickname === targetNickname && u.room === socket.room\n      );\n\n      logger.debug(`Private message target search result for ${targetNickname}`, {\n        targetFound: !!targetUser,\n        targetRoom: targetUser?.room,\n        senderRoom: socket.room,\n        onlineUsersInRoom: Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, room: u.room }))\n      });\n\n      if (!targetUser) {\n        // Enhanced error message with more context\n        const onlineUsersInSenderRoom = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => u.nickname);\n\n        socket.emit('error', {\n          message: `User '${targetNickname}' is not available in this channel. Available users: ${onlineUsersInSenderRoom.join(', ') || 'none'}`,\n          code: 'TARGET_USER_NOT_IN_ROOM',\n          target: targetNickname,\n          availableUsers: onlineUsersInSenderRoom,\n          senderRoom: socket.room\n        });\n        return;\n      }\n\n      // Create message object\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'private',\n        target: targetNickname\n      });\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: message.target,\n        status: 'delivered'\n      };\n\n      // Send to target user with error handling\n      const targetSocketId = Array.from(onlineUsers.keys()).find(\n        id => onlineUsers.get(id).nickname === targetNickname\n      );\n\n      if (targetSocketId) {\n        io.to(targetSocketId).emit('private_message', messageData);\n        logger.debug(`Private message sent to target ${targetNickname}`, {\n          targetSocketId: targetSocketId,\n          sender: socket.nickname,\n          room: socket.room,\n          messageId: message._id\n        });\n      } else {\n        logger.warn(`Target user ${targetNickname} found in onlineUsers but socket ID not found`, {\n          targetNickname,\n          room: socket.room,\n          onlineUsersCount: onlineUsers.size,\n          messageId: message._id\n        });\n        // Message still saved to database for later delivery if user reconnects\n      }\n\n      // Send confirmation to sender (without target for privacy)\n      socket.emit('private_message', {\n        author: message.author,\n        room: message.room,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: null, // Hide target from sender's confirmation\n        status: 'sent'\n      });\n\n      logger.info(`Private message sent successfully`, {\n        sender: socket.nickname,\n        target: targetNickname,\n        room: socket.room,\n        messageId: message._id,\n        messageLength: trimmedText.length\n      });\n\n    } catch (error) {\n      logger.error('Error sending private message:', {\n        error: error.message,\n        sender: socket.nickname,\n        target: data.to,\n        room: socket.room,\n        userId: socket.userId,\n        stack: error.stack\n      });\n      socket.emit('error', {\n        message: 'Failed to send private message',\n        code: 'PRIVATE_MESSAGE_FAILED'\n      });\n    }\n  });\n\n  // Speaking\n  socket.on('speaking', (data) => {\n    socket.to(socket.room).emit('speaking', { nickname: socket.nickname, speaking: data.speaking });\n  });\n\n  // Voice channel events\n  socket.on('join_voice_channel', async (data) => {\n    const { channelId } = data;\n    if (!channelId) return;\n\n    try {\n      // Verify channel exists and is voice\n      const channel = await Channel.findOne({ id: channelId, type: 'voice' });\n      if (!channel) {\n        socket.emit('voice_error', { message: 'Voice channel not found' });\n        return;\n      }\n\n      // Initialize voice channel if not exists\n      if (!voiceChannels.has(channelId)) {\n        voiceChannels.set(channelId, new Map());\n      }\n\n      const channelPeers = voiceChannels.get(channelId);\n\n      // Notify others in the channel\n      socket.to(channelId).emit('user_joined_voice', { nickname: socket.nickname, socketId: socket.id });\n\n      // Add socket to voice channel room\n      socket.join(channelId);\n      channelPeers.set(socket.id, { peerConnection: null, stream: null });\n\n      // Update user's voice channel status\n      socket.voiceChannel = channelId;\n\n      logger.info(`User ${socket.nickname} joined voice channel ${channelId}`);\n      socket.emit('voice_joined', { channelId });\n\n    } catch (error) {\n      logger.error('Error joining voice channel:', error);\n      socket.emit('voice_error', { message: 'Failed to join voice channel' });\n    }\n  });\n\n  socket.on('leave_voice_channel', () => {\n    if (!socket.voiceChannel) return;\n\n    const channelId = socket.voiceChannel;\n    const channelPeers = voiceChannels.get(channelId);\n\n    if (channelPeers) {\n      channelPeers.delete(socket.id);\n      if (channelPeers.size === 0) {\n        voiceChannels.delete(channelId);\n      }\n    }\n\n    // Notify others\n    socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n\n    socket.leave(channelId);\n    socket.voiceChannel = null;\n\n    logger.info(`User ${socket.nickname} left voice channel ${channelId}`);\n    socket.emit('voice_left');\n  });\n\n  socket.on('voice_offer', (data) => {\n    const { offer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_offer', {\n      offer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('voice_answer', (data) => {\n    const { answer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_answer', {\n      answer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('ice_candidate', (data) => {\n    const { candidate, targetSocketId } = data;\n    socket.to(targetSocketId).emit('ice_candidate', {\n      candidate,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  // Disconnect\n  socket.on('disconnect', async () => {\n    logger.info(`User ${socket.nickname} disconnected`);\n\n    try {\n      // Leave voice channel if in one\n      if (socket.voiceChannel) {\n        const channelId = socket.voiceChannel;\n        const channelPeers = voiceChannels.get(channelId);\n\n        if (channelPeers) {\n          channelPeers.delete(socket.id);\n          if (channelPeers.size === 0) {\n            voiceChannels.delete(channelId);\n          }\n        }\n\n        // Notify others\n        socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n      }\n\n      if (socket.room) {\n        socket.leave(socket.room);\n\n        // Create leave message\n        const leaveMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} left the channel.`,\n          type: 'system'\n        });\n        await leaveMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: leaveMessage.author,\n          room: leaveMessage.channel,\n          text: leaveMessage.text,\n          type: leaveMessage.type,\n          timestamp: leaveMessage.timestamp\n        });\n\n        // Update online users list\n        const roomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room && u.userId !== socket.userId)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', roomUsers);\n      }\n\n      // Remove from tracking\n      onlineUsers.delete(socket.id);\n\n      // Log current connections after disconnect\n      logger.info(`After disconnect, active socket connections: ${onlineUsers.size}`);\n\n      // Update user status in database if user exists\n      if (socket.userId) {\n        await User.findByIdAndUpdate(socket.userId, {\n          status: 'offline',\n          lastActive: new Date()\n        });\n      }\n\n    } catch (error) {\n      logger.error('Error in disconnect handler:', error);\n    }\n  });\n});\n\n// Initialize database and start server\nconst initializeServer = async () => {\n  try {\n    // Connect to MongoDB\n    await connectDB();\n\n    // Create default channels if they don't exist\n    const defaultChannels = [\n      { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n      { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' }\n    ];\n\n    for (const channelData of defaultChannels) {\n      await Channel.findOneAndUpdate(\n        { id: channelData.id },\n        channelData,\n        { upsert: true, new: true }\n      );\n    }\n\n    logger.info('Default channels initialized');\n\n    // Start server\n    const PORT = process.env.PORT || 3001;\n    server.listen(PORT, '0.0.0.0', () => {\n      logger.info(`Server running on port ${PORT}`);\n      console.log(`Server running on port ${PORT}`);\n    });\n\n  } catch (error) {\n    logger.error('Failed to initialize server:', error);\n    process.exit(1);\n  }\n};\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  logger.info('Received SIGINT, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGTERM', async () => {\n  logger.info('Received SIGTERM, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\n// Start the server\ninitializeServer().catch(err => {\n  logger.error('Unhandled error during server startup:', err);\n  process.exit(1);\n});"],"mappings":"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","ignoreList":[]}