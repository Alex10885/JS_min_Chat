1d4ea795bb7a98ce57dd64c53af4f6af
/* istanbul ignore next */
function cov_3apmh7tcr() {
  var path = "/home/raerlim/Chat-JS/backend/src/services/cacheService.js";
  var hash = "9d3fec43ec2ea3fdbee647757eec4bbcb13f1c6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/raerlim/Chat-JS/backend/src/services/cacheService.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 25
        },
        end: {
          line: 1,
          column: 51
        }
      },
      "1": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 2,
          column: 35
        }
      },
      "2": {
        start: {
          line: 3,
          column: 16
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 15,
          column: 7
        }
      },
      "4": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "5": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "6": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 35,
          column: 60
        }
      },
      "7": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 36,
          column: 59
        }
      },
      "8": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 29
        }
      },
      "9": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "10": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 41,
          column: 72
        }
      },
      "11": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 71
        }
      },
      "12": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "13": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 46,
          column: 87
        }
      },
      "14": {
        start: {
          line: 47,
          column: 10
        },
        end: {
          line: 47,
          column: 62
        }
      },
      "15": {
        start: {
          line: 51,
          column: 6
        },
        end: {
          line: 51,
          column: 57
        }
      },
      "16": {
        start: {
          line: 52,
          column: 6
        },
        end: {
          line: 52,
          column: 18
        }
      },
      "17": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 31
        }
      },
      "18": {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 55,
          column: 59
        }
      },
      "19": {
        start: {
          line: 56,
          column: 6
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "20": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "21": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 60
        }
      },
      "22": {
        start: {
          line: 68,
          column: 25
        },
        end: {
          line: 68,
          column: 62
        }
      },
      "23": {
        start: {
          line: 70,
          column: 6
        },
        end: {
          line: 76,
          column: 7
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 31
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 59
        }
      },
      "26": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 33
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 60
        }
      },
      "28": {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 24
        }
      },
      "29": {
        start: {
          line: 80,
          column: 6
        },
        end: {
          line: 80,
          column: 31
        }
      },
      "30": {
        start: {
          line: 81,
          column: 6
        },
        end: {
          line: 81,
          column: 69
        }
      },
      "31": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "32": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "33": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 60
        }
      },
      "34": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 75
        }
      },
      "35": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 97,
          column: 72
        }
      },
      "36": {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 102,
          column: 7
        }
      },
      "37": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 65
        }
      },
      "38": {
        start: {
          line: 105,
          column: 6
        },
        end: {
          line: 105,
          column: 47
        }
      },
      "39": {
        start: {
          line: 106,
          column: 6
        },
        end: {
          line: 106,
          column: 53
        }
      },
      "40": {
        start: {
          line: 109,
          column: 26
        },
        end: {
          line: 109,
          column: 65
        }
      },
      "41": {
        start: {
          line: 110,
          column: 6
        },
        end: {
          line: 110,
          column: 49
        }
      },
      "42": {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 112,
          column: 32
        }
      },
      "43": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 113,
          column: 61
        }
      },
      "44": {
        start: {
          line: 114,
          column: 6
        },
        end: {
          line: 114,
          column: 18
        }
      },
      "45": {
        start: {
          line: 116,
          column: 6
        },
        end: {
          line: 116,
          column: 31
        }
      },
      "46": {
        start: {
          line: 117,
          column: 6
        },
        end: {
          line: 117,
          column: 65
        }
      },
      "47": {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 118,
          column: 19
        }
      },
      "48": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "49": {
        start: {
          line: 130,
          column: 26
        },
        end: {
          line: 130,
          column: 72
        }
      },
      "50": {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 131,
          column: 84
        }
      },
      "51": {
        start: {
          line: 132,
          column: 6
        },
        end: {
          line: 132,
          column: 59
        }
      },
      "52": {
        start: {
          line: 133,
          column: 6
        },
        end: {
          line: 133,
          column: 18
        }
      },
      "53": {
        start: {
          line: 135,
          column: 6
        },
        end: {
          line: 135,
          column: 31
        }
      },
      "54": {
        start: {
          line: 136,
          column: 6
        },
        end: {
          line: 136,
          column: 63
        }
      },
      "55": {
        start: {
          line: 137,
          column: 6
        },
        end: {
          line: 137,
          column: 19
        }
      },
      "56": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "57": {
        start: {
          line: 148,
          column: 26
        },
        end: {
          line: 148,
          column: 72
        }
      },
      "58": {
        start: {
          line: 149,
          column: 23
        },
        end: {
          line: 149,
          column: 63
        }
      },
      "59": {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 155,
          column: 7
        }
      },
      "60": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 31
        }
      },
      "61": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 33
        }
      },
      "62": {
        start: {
          line: 157,
          column: 6
        },
        end: {
          line: 157,
          column: 22
        }
      },
      "63": {
        start: {
          line: 159,
          column: 6
        },
        end: {
          line: 159,
          column: 31
        }
      },
      "64": {
        start: {
          line: 160,
          column: 6
        },
        end: {
          line: 160,
          column: 73
        }
      },
      "65": {
        start: {
          line: 161,
          column: 6
        },
        end: {
          line: 161,
          column: 18
        }
      },
      "66": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 188,
          column: 5
        }
      },
      "67": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 173,
          column: 70
        }
      },
      "68": {
        start: {
          line: 174,
          column: 6
        },
        end: {
          line: 174,
          column: 80
        }
      },
      "69": {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 179,
          column: 7
        }
      },
      "70": {
        start: {
          line: 177,
          column: 30
        },
        end: {
          line: 177,
          column: 51
        }
      },
      "71": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 95
        }
      },
      "72": {
        start: {
          line: 181,
          column: 6
        },
        end: {
          line: 181,
          column: 29
        }
      },
      "73": {
        start: {
          line: 182,
          column: 6
        },
        end: {
          line: 182,
          column: 61
        }
      },
      "74": {
        start: {
          line: 183,
          column: 6
        },
        end: {
          line: 183,
          column: 18
        }
      },
      "75": {
        start: {
          line: 185,
          column: 6
        },
        end: {
          line: 185,
          column: 31
        }
      },
      "76": {
        start: {
          line: 186,
          column: 6
        },
        end: {
          line: 186,
          column: 62
        }
      },
      "77": {
        start: {
          line: 187,
          column: 6
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "78": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 212,
          column: 5
        }
      },
      "79": {
        start: {
          line: 198,
          column: 23
        },
        end: {
          line: 198,
          column: 70
        }
      },
      "80": {
        start: {
          line: 199,
          column: 26
        },
        end: {
          line: 199,
          column: 63
        }
      },
      "81": {
        start: {
          line: 201,
          column: 6
        },
        end: {
          line: 205,
          column: 7
        }
      },
      "82": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 31
        }
      },
      "83": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 33
        }
      },
      "84": {
        start: {
          line: 207,
          column: 6
        },
        end: {
          line: 207,
          column: 25
        }
      },
      "85": {
        start: {
          line: 209,
          column: 6
        },
        end: {
          line: 209,
          column: 31
        }
      },
      "86": {
        start: {
          line: 210,
          column: 6
        },
        end: {
          line: 210,
          column: 72
        }
      },
      "87": {
        start: {
          line: 211,
          column: 6
        },
        end: {
          line: 211,
          column: 18
        }
      },
      "88": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 235,
          column: 5
        }
      },
      "89": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 83
        }
      },
      "90": {
        start: {
          line: 224,
          column: 20
        },
        end: {
          line: 224,
          column: 68
        }
      },
      "91": {
        start: {
          line: 226,
          column: 6
        },
        end: {
          line: 229,
          column: 7
        }
      },
      "92": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 29
        }
      },
      "93": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 83
        }
      },
      "94": {
        start: {
          line: 231,
          column: 6
        },
        end: {
          line: 231,
          column: 18
        }
      },
      "95": {
        start: {
          line: 233,
          column: 6
        },
        end: {
          line: 233,
          column: 70
        }
      },
      "96": {
        start: {
          line: 234,
          column: 6
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "97": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 256,
          column: 5
        }
      },
      "98": {
        start: {
          line: 246,
          column: 28
        },
        end: {
          line: 246,
          column: 83
        }
      },
      "99": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 247,
          column: 68
        }
      },
      "100": {
        start: {
          line: 249,
          column: 6
        },
        end: {
          line: 249,
          column: 52
        }
      },
      "101": {
        start: {
          line: 249,
          column: 37
        },
        end: {
          line: 249,
          column: 50
        }
      },
      "102": {
        start: {
          line: 250,
          column: 6
        },
        end: {
          line: 250,
          column: 81
        }
      },
      "103": {
        start: {
          line: 252,
          column: 6
        },
        end: {
          line: 252,
          column: 18
        }
      },
      "104": {
        start: {
          line: 254,
          column: 6
        },
        end: {
          line: 254,
          column: 74
        }
      },
      "105": {
        start: {
          line: 255,
          column: 6
        },
        end: {
          line: 255,
          column: 19
        }
      },
      "106": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 295,
          column: 5
        }
      },
      "107": {
        start: {
          line: 266,
          column: 25
        },
        end: {
          line: 266,
          column: 72
        }
      },
      "108": {
        start: {
          line: 269,
          column: 28
        },
        end: {
          line: 269,
          column: 51
        }
      },
      "109": {
        start: {
          line: 270,
          column: 22
        },
        end: {
          line: 270,
          column: 70
        }
      },
      "110": {
        start: {
          line: 273,
          column: 6
        },
        end: {
          line: 278,
          column: 7
        }
      },
      "111": {
        start: {
          line: 274,
          column: 32
        },
        end: {
          line: 274,
          column: 78
        }
      },
      "112": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 77
        }
      },
      "113": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 67
        }
      },
      "114": {
        start: {
          line: 276,
          column: 49
        },
        end: {
          line: 276,
          column: 65
        }
      },
      "115": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 90
        }
      },
      "116": {
        start: {
          line: 281,
          column: 6
        },
        end: {
          line: 281,
          column: 49
        }
      },
      "117": {
        start: {
          line: 282,
          column: 6
        },
        end: {
          line: 282,
          column: 52
        }
      },
      "118": {
        start: {
          line: 285,
          column: 29
        },
        end: {
          line: 285,
          column: 79
        }
      },
      "119": {
        start: {
          line: 286,
          column: 6
        },
        end: {
          line: 286,
          column: 52
        }
      },
      "120": {
        start: {
          line: 288,
          column: 6
        },
        end: {
          line: 288,
          column: 32
        }
      },
      "121": {
        start: {
          line: 289,
          column: 6
        },
        end: {
          line: 289,
          column: 67
        }
      },
      "122": {
        start: {
          line: 290,
          column: 6
        },
        end: {
          line: 290,
          column: 18
        }
      },
      "123": {
        start: {
          line: 292,
          column: 6
        },
        end: {
          line: 292,
          column: 31
        }
      },
      "124": {
        start: {
          line: 293,
          column: 6
        },
        end: {
          line: 293,
          column: 68
        }
      },
      "125": {
        start: {
          line: 294,
          column: 6
        },
        end: {
          line: 294,
          column: 19
        }
      },
      "126": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 323,
          column: 5
        }
      },
      "127": {
        start: {
          line: 307,
          column: 23
        },
        end: {
          line: 307,
          column: 96
        }
      },
      "128": {
        start: {
          line: 308,
          column: 6
        },
        end: {
          line: 308,
          column: 80
        }
      },
      "129": {
        start: {
          line: 311,
          column: 6
        },
        end: {
          line: 314,
          column: 7
        }
      },
      "130": {
        start: {
          line: 312,
          column: 24
        },
        end: {
          line: 312,
          column: 77
        }
      },
      "131": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 64
        }
      },
      "132": {
        start: {
          line: 316,
          column: 6
        },
        end: {
          line: 316,
          column: 29
        }
      },
      "133": {
        start: {
          line: 317,
          column: 6
        },
        end: {
          line: 317,
          column: 56
        }
      },
      "134": {
        start: {
          line: 318,
          column: 6
        },
        end: {
          line: 318,
          column: 18
        }
      },
      "135": {
        start: {
          line: 320,
          column: 6
        },
        end: {
          line: 320,
          column: 31
        }
      },
      "136": {
        start: {
          line: 321,
          column: 6
        },
        end: {
          line: 321,
          column: 57
        }
      },
      "137": {
        start: {
          line: 322,
          column: 6
        },
        end: {
          line: 322,
          column: 19
        }
      },
      "138": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "139": {
        start: {
          line: 335,
          column: 22
        },
        end: {
          line: 335,
          column: 24
        }
      },
      "140": {
        start: {
          line: 338,
          column: 6
        },
        end: {
          line: 338,
          column: 58
        }
      },
      "141": {
        start: {
          line: 341,
          column: 6
        },
        end: {
          line: 341,
          column: 63
        }
      },
      "142": {
        start: {
          line: 344,
          column: 6
        },
        end: {
          line: 344,
          column: 71
        }
      },
      "143": {
        start: {
          line: 346,
          column: 6
        },
        end: {
          line: 346,
          column: 18
        }
      },
      "144": {
        start: {
          line: 348,
          column: 6
        },
        end: {
          line: 348,
          column: 72
        }
      },
      "145": {
        start: {
          line: 349,
          column: 6
        },
        end: {
          line: 349,
          column: 19
        }
      },
      "146": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 374,
          column: 5
        }
      },
      "147": {
        start: {
          line: 360,
          column: 22
        },
        end: {
          line: 360,
          column: 75
        }
      },
      "148": {
        start: {
          line: 361,
          column: 23
        },
        end: {
          line: 361,
          column: 71
        }
      },
      "149": {
        start: {
          line: 363,
          column: 6
        },
        end: {
          line: 369,
          column: 7
        }
      },
      "150": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 31
        }
      },
      "151": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 24
        }
      },
      "152": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 33
        }
      },
      "153": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 18
        }
      },
      "154": {
        start: {
          line: 371,
          column: 6
        },
        end: {
          line: 371,
          column: 31
        }
      },
      "155": {
        start: {
          line: 372,
          column: 6
        },
        end: {
          line: 372,
          column: 74
        }
      },
      "156": {
        start: {
          line: 373,
          column: 6
        },
        end: {
          line: 373,
          column: 16
        }
      },
      "157": {
        start: {
          line: 382,
          column: 4
        },
        end: {
          line: 400,
          column: 5
        }
      },
      "158": {
        start: {
          line: 384,
          column: 23
        },
        end: {
          line: 389,
          column: 7
        }
      },
      "159": {
        start: {
          line: 391,
          column: 6
        },
        end: {
          line: 393,
          column: 7
        }
      },
      "160": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 67
        }
      },
      "161": {
        start: {
          line: 395,
          column: 6
        },
        end: {
          line: 395,
          column: 44
        }
      },
      "162": {
        start: {
          line: 396,
          column: 6
        },
        end: {
          line: 396,
          column: 18
        }
      },
      "163": {
        start: {
          line: 398,
          column: 6
        },
        end: {
          line: 398,
          column: 56
        }
      },
      "164": {
        start: {
          line: 399,
          column: 6
        },
        end: {
          line: 399,
          column: 19
        }
      },
      "165": {
        start: {
          line: 408,
          column: 18
        },
        end: {
          line: 408,
          column: 40
        }
      },
      "166": {
        start: {
          line: 409,
          column: 18
        },
        end: {
          line: 409,
          column: 43
        }
      },
      "167": {
        start: {
          line: 410,
          column: 4
        },
        end: {
          line: 410,
          column: 83
        }
      },
      "168": {
        start: {
          line: 411,
          column: 4
        },
        end: {
          line: 411,
          column: 63
        }
      },
      "169": {
        start: {
          line: 412,
          column: 4
        },
        end: {
          line: 412,
          column: 17
        }
      },
      "170": {
        start: {
          line: 422,
          column: 4
        },
        end: {
          line: 442,
          column: 5
        }
      },
      "171": {
        start: {
          line: 423,
          column: 6
        },
        end: {
          line: 423,
          column: 51
        }
      },
      "172": {
        start: {
          line: 426,
          column: 6
        },
        end: {
          line: 429,
          column: 7
        }
      },
      "173": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 62
        }
      },
      "174": {
        start: {
          line: 432,
          column: 6
        },
        end: {
          line: 435,
          column: 7
        }
      },
      "175": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 68
        }
      },
      "176": {
        start: {
          line: 437,
          column: 6
        },
        end: {
          line: 437,
          column: 49
        }
      },
      "177": {
        start: {
          line: 438,
          column: 6
        },
        end: {
          line: 438,
          column: 18
        }
      },
      "178": {
        start: {
          line: 440,
          column: 6
        },
        end: {
          line: 440,
          column: 61
        }
      },
      "179": {
        start: {
          line: 441,
          column: 6
        },
        end: {
          line: 441,
          column: 19
        }
      },
      "180": {
        start: {
          line: 453,
          column: 4
        },
        end: {
          line: 464,
          column: 5
        }
      },
      "181": {
        start: {
          line: 454,
          column: 23
        },
        end: {
          line: 454,
          column: 69
        }
      },
      "182": {
        start: {
          line: 455,
          column: 6
        },
        end: {
          line: 455,
          column: 57
        }
      },
      "183": {
        start: {
          line: 457,
          column: 6
        },
        end: {
          line: 457,
          column: 29
        }
      },
      "184": {
        start: {
          line: 458,
          column: 6
        },
        end: {
          line: 458,
          column: 60
        }
      },
      "185": {
        start: {
          line: 459,
          column: 6
        },
        end: {
          line: 459,
          column: 18
        }
      },
      "186": {
        start: {
          line: 461,
          column: 6
        },
        end: {
          line: 461,
          column: 31
        }
      },
      "187": {
        start: {
          line: 462,
          column: 6
        },
        end: {
          line: 462,
          column: 62
        }
      },
      "188": {
        start: {
          line: 463,
          column: 6
        },
        end: {
          line: 463,
          column: 19
        }
      },
      "189": {
        start: {
          line: 473,
          column: 4
        },
        end: {
          line: 490,
          column: 5
        }
      },
      "190": {
        start: {
          line: 474,
          column: 23
        },
        end: {
          line: 474,
          column: 69
        }
      },
      "191": {
        start: {
          line: 475,
          column: 21
        },
        end: {
          line: 475,
          column: 58
        }
      },
      "192": {
        start: {
          line: 477,
          column: 6
        },
        end: {
          line: 483,
          column: 7
        }
      },
      "193": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 31
        }
      },
      "194": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 58
        }
      },
      "195": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 33
        }
      },
      "196": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 482,
          column: 59
        }
      },
      "197": {
        start: {
          line: 485,
          column: 6
        },
        end: {
          line: 485,
          column: 20
        }
      },
      "198": {
        start: {
          line: 487,
          column: 6
        },
        end: {
          line: 487,
          column: 31
        }
      },
      "199": {
        start: {
          line: 488,
          column: 6
        },
        end: {
          line: 488,
          column: 72
        }
      },
      "200": {
        start: {
          line: 489,
          column: 6
        },
        end: {
          line: 489,
          column: 18
        }
      },
      "201": {
        start: {
          line: 499,
          column: 4
        },
        end: {
          line: 515,
          column: 5
        }
      },
      "202": {
        start: {
          line: 500,
          column: 23
        },
        end: {
          line: 500,
          column: 50
        }
      },
      "203": {
        start: {
          line: 502,
          column: 6
        },
        end: {
          line: 505,
          column: 7
        }
      },
      "204": {
        start: {
          line: 503,
          column: 25
        },
        end: {
          line: 503,
          column: 73
        }
      },
      "205": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 504,
          column: 81
        }
      },
      "206": {
        start: {
          line: 507,
          column: 6
        },
        end: {
          line: 507,
          column: 28
        }
      },
      "207": {
        start: {
          line: 508,
          column: 6
        },
        end: {
          line: 508,
          column: 46
        }
      },
      "208": {
        start: {
          line: 509,
          column: 6
        },
        end: {
          line: 509,
          column: 68
        }
      },
      "209": {
        start: {
          line: 510,
          column: 6
        },
        end: {
          line: 510,
          column: 18
        }
      },
      "210": {
        start: {
          line: 512,
          column: 6
        },
        end: {
          line: 512,
          column: 31
        }
      },
      "211": {
        start: {
          line: 513,
          column: 6
        },
        end: {
          line: 513,
          column: 64
        }
      },
      "212": {
        start: {
          line: 514,
          column: 6
        },
        end: {
          line: 514,
          column: 19
        }
      },
      "213": {
        start: {
          line: 524,
          column: 4
        },
        end: {
          line: 557,
          column: 5
        }
      },
      "214": {
        start: {
          line: 525,
          column: 23
        },
        end: {
          line: 525,
          column: 50
        }
      },
      "215": {
        start: {
          line: 526,
          column: 25
        },
        end: {
          line: 526,
          column: 34
        }
      },
      "216": {
        start: {
          line: 528,
          column: 6
        },
        end: {
          line: 531,
          column: 7
        }
      },
      "217": {
        start: {
          line: 529,
          column: 25
        },
        end: {
          line: 529,
          column: 72
        }
      },
      "218": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 31
        }
      },
      "219": {
        start: {
          line: 533,
          column: 22
        },
        end: {
          line: 533,
          column: 43
        }
      },
      "220": {
        start: {
          line: 535,
          column: 6
        },
        end: {
          line: 549,
          column: 9
        }
      },
      "221": {
        start: {
          line: 536,
          column: 23
        },
        end: {
          line: 536,
          column: 37
        }
      },
      "222": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 548,
          column: 9
        }
      },
      "223": {
        start: {
          line: 538,
          column: 10
        },
        end: {
          line: 545,
          column: 11
        }
      },
      "224": {
        start: {
          line: 539,
          column: 28
        },
        end: {
          line: 539,
          column: 49
        }
      },
      "225": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 540,
          column: 47
        }
      },
      "226": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 541,
          column: 35
        }
      },
      "227": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 82
        }
      },
      "228": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 544,
          column: 37
        }
      },
      "229": {
        start: {
          line: 547,
          column: 10
        },
        end: {
          line: 547,
          column: 35
        }
      },
      "230": {
        start: {
          line: 551,
          column: 6
        },
        end: {
          line: 551,
          column: 103
        }
      },
      "231": {
        start: {
          line: 552,
          column: 6
        },
        end: {
          line: 552,
          column: 24
        }
      },
      "232": {
        start: {
          line: 554,
          column: 6
        },
        end: {
          line: 554,
          column: 31
        }
      },
      "233": {
        start: {
          line: 555,
          column: 6
        },
        end: {
          line: 555,
          column: 71
        }
      },
      "234": {
        start: {
          line: 556,
          column: 6
        },
        end: {
          line: 556,
          column: 23
        }
      },
      "235": {
        start: {
          line: 565,
          column: 4
        },
        end: {
          line: 572,
          column: 5
        }
      },
      "236": {
        start: {
          line: 567,
          column: 36
        },
        end: {
          line: 567,
          column: 66
        }
      },
      "237": {
        start: {
          line: 568,
          column: 6
        },
        end: {
          line: 568,
          column: 44
        }
      },
      "238": {
        start: {
          line: 570,
          column: 6
        },
        end: {
          line: 570,
          column: 68
        }
      },
      "239": {
        start: {
          line: 571,
          column: 6
        },
        end: {
          line: 571,
          column: 16
        }
      },
      "240": {
        start: {
          line: 584,
          column: 4
        },
        end: {
          line: 601,
          column: 5
        }
      },
      "241": {
        start: {
          line: 585,
          column: 23
        },
        end: {
          line: 585,
          column: 105
        }
      },
      "242": {
        start: {
          line: 586,
          column: 6
        },
        end: {
          line: 586,
          column: 77
        }
      },
      "243": {
        start: {
          line: 589,
          column: 24
        },
        end: {
          line: 589,
          column: 79
        }
      },
      "244": {
        start: {
          line: 590,
          column: 6
        },
        end: {
          line: 592,
          column: 7
        }
      },
      "245": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 591,
          column: 71
        }
      },
      "246": {
        start: {
          line: 594,
          column: 6
        },
        end: {
          line: 594,
          column: 29
        }
      },
      "247": {
        start: {
          line: 595,
          column: 6
        },
        end: {
          line: 595,
          column: 95
        }
      },
      "248": {
        start: {
          line: 596,
          column: 6
        },
        end: {
          line: 596,
          column: 18
        }
      },
      "249": {
        start: {
          line: 598,
          column: 6
        },
        end: {
          line: 598,
          column: 31
        }
      },
      "250": {
        start: {
          line: 599,
          column: 6
        },
        end: {
          line: 599,
          column: 66
        }
      },
      "251": {
        start: {
          line: 600,
          column: 6
        },
        end: {
          line: 600,
          column: 19
        }
      },
      "252": {
        start: {
          line: 612,
          column: 4
        },
        end: {
          line: 629,
          column: 5
        }
      },
      "253": {
        start: {
          line: 613,
          column: 23
        },
        end: {
          line: 613,
          column: 105
        }
      },
      "254": {
        start: {
          line: 614,
          column: 23
        },
        end: {
          line: 614,
          column: 60
        }
      },
      "255": {
        start: {
          line: 616,
          column: 6
        },
        end: {
          line: 622,
          column: 7
        }
      },
      "256": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 617,
          column: 31
        }
      },
      "257": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 618,
          column: 70
        }
      },
      "258": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 620,
          column: 33
        }
      },
      "259": {
        start: {
          line: 621,
          column: 8
        },
        end: {
          line: 621,
          column: 71
        }
      },
      "260": {
        start: {
          line: 624,
          column: 6
        },
        end: {
          line: 624,
          column: 22
        }
      },
      "261": {
        start: {
          line: 626,
          column: 6
        },
        end: {
          line: 626,
          column: 31
        }
      },
      "262": {
        start: {
          line: 627,
          column: 6
        },
        end: {
          line: 627,
          column: 76
        }
      },
      "263": {
        start: {
          line: 628,
          column: 6
        },
        end: {
          line: 628,
          column: 18
        }
      },
      "264": {
        start: {
          line: 637,
          column: 4
        },
        end: {
          line: 654,
          column: 5
        }
      },
      "265": {
        start: {
          line: 638,
          column: 6
        },
        end: {
          line: 640,
          column: 7
        }
      },
      "266": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 639,
          column: 50
        }
      },
      "267": {
        start: {
          line: 642,
          column: 19
        },
        end: {
          line: 642,
          column: 59
        }
      },
      "268": {
        start: {
          line: 643,
          column: 25
        },
        end: {
          line: 643,
          column: 111
        }
      },
      "269": {
        start: {
          line: 643,
          column: 64
        },
        end: {
          line: 643,
          column: 95
        }
      },
      "270": {
        start: {
          line: 644,
          column: 25
        },
        end: {
          line: 644,
          column: 116
        }
      },
      "271": {
        start: {
          line: 644,
          column: 64
        },
        end: {
          line: 644,
          column: 100
        }
      },
      "272": {
        start: {
          line: 646,
          column: 6
        },
        end: {
          line: 650,
          column: 8
        }
      },
      "273": {
        start: {
          line: 652,
          column: 6
        },
        end: {
          line: 652,
          column: 67
        }
      },
      "274": {
        start: {
          line: 653,
          column: 6
        },
        end: {
          line: 653,
          column: 18
        }
      },
      "275": {
        start: {
          line: 659,
          column: 21
        },
        end: {
          line: 659,
          column: 39
        }
      },
      "276": {
        start: {
          line: 661,
          column: 0
        },
        end: {
          line: 687,
          column: 2
        }
      },
      "277": {
        start: {
          line: 664,
          column: 36
        },
        end: {
          line: 664,
          column: 77
        }
      },
      "278": {
        start: {
          line: 665,
          column: 29
        },
        end: {
          line: 665,
          column: 63
        }
      },
      "279": {
        start: {
          line: 666,
          column: 35
        },
        end: {
          line: 666,
          column: 75
        }
      },
      "280": {
        start: {
          line: 667,
          column: 37
        },
        end: {
          line: 667,
          column: 79
        }
      },
      "281": {
        start: {
          line: 668,
          column: 35
        },
        end: {
          line: 668,
          column: 75
        }
      },
      "282": {
        start: {
          line: 669,
          column: 41
        },
        end: {
          line: 669,
          column: 87
        }
      },
      "283": {
        start: {
          line: 670,
          column: 48
        },
        end: {
          line: 670,
          column: 101
        }
      },
      "284": {
        start: {
          line: 671,
          column: 41
        },
        end: {
          line: 671,
          column: 87
        }
      },
      "285": {
        start: {
          line: 672,
          column: 23
        },
        end: {
          line: 672,
          column: 51
        }
      },
      "286": {
        start: {
          line: 673,
          column: 23
        },
        end: {
          line: 673,
          column: 51
        }
      },
      "287": {
        start: {
          line: 674,
          column: 40
        },
        end: {
          line: 674,
          column: 85
        }
      },
      "288": {
        start: {
          line: 675,
          column: 23
        },
        end: {
          line: 675,
          column: 51
        }
      },
      "289": {
        start: {
          line: 677,
          column: 47
        },
        end: {
          line: 677,
          column: 99
        }
      },
      "290": {
        start: {
          line: 678,
          column: 38
        },
        end: {
          line: 678,
          column: 81
        }
      },
      "291": {
        start: {
          line: 680,
          column: 36
        },
        end: {
          line: 680,
          column: 77
        }
      },
      "292": {
        start: {
          line: 681,
          column: 42
        },
        end: {
          line: 681,
          column: 89
        }
      },
      "293": {
        start: {
          line: 683,
          column: 62
        },
        end: {
          line: 683,
          column: 129
        }
      },
      "294": {
        start: {
          line: 684,
          column: 56
        },
        end: {
          line: 684,
          column: 117
        }
      },
      "295": {
        start: {
          line: 686,
          column: 30
        },
        end: {
          line: 686,
          column: 65
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        },
        loc: {
          start: {
            line: 6,
            column: 16
          },
          end: {
            line: 24,
            column: 3
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        },
        loc: {
          start: {
            line: 33,
            column: 65
          },
          end: {
            line: 58,
            column: 3
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 65,
            column: 3
          }
        },
        loc: {
          start: {
            line: 65,
            column: 30
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 91,
            column: 3
          }
        },
        loc: {
          start: {
            line: 91,
            column: 36
          },
          end: {
            line: 120,
            column: 3
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 128,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        },
        loc: {
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 139,
            column: 3
          }
        },
        line: 128
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 146,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        },
        loc: {
          start: {
            line: 146,
            column: 38
          },
          end: {
            line: 163,
            column: 3
          }
        },
        line: 146
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 171,
            column: 2
          },
          end: {
            line: 171,
            column: 3
          }
        },
        loc: {
          start: {
            line: 171,
            column: 45
          },
          end: {
            line: 189,
            column: 3
          }
        },
        line: 171
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 196,
            column: 2
          },
          end: {
            line: 196,
            column: 3
          }
        },
        loc: {
          start: {
            line: 196,
            column: 36
          },
          end: {
            line: 213,
            column: 3
          }
        },
        line: 196
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 221,
            column: 3
          }
        },
        loc: {
          start: {
            line: 221,
            column: 49
          },
          end: {
            line: 236,
            column: 3
          }
        },
        line: 221
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 244,
            column: 2
          },
          end: {
            line: 244,
            column: 3
          }
        },
        loc: {
          start: {
            line: 244,
            column: 54
          },
          end: {
            line: 257,
            column: 3
          }
        },
        line: 244
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 249,
            column: 31
          },
          end: {
            line: 249,
            column: 32
          }
        },
        loc: {
          start: {
            line: 249,
            column: 37
          },
          end: {
            line: 249,
            column: 50
          }
        },
        line: 249
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 264,
            column: 2
          },
          end: {
            line: 264,
            column: 3
          }
        },
        loc: {
          start: {
            line: 264,
            column: 42
          },
          end: {
            line: 296,
            column: 3
          }
        },
        line: 264
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 276,
            column: 43
          },
          end: {
            line: 276,
            column: 44
          }
        },
        loc: {
          start: {
            line: 276,
            column: 49
          },
          end: {
            line: 276,
            column: 65
          }
        },
        line: 276
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 305,
            column: 2
          },
          end: {
            line: 305,
            column: 3
          }
        },
        loc: {
          start: {
            line: 305,
            column: 63
          },
          end: {
            line: 324,
            column: 3
          }
        },
        line: 305
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 332,
            column: 2
          },
          end: {
            line: 332,
            column: 3
          }
        },
        loc: {
          start: {
            line: 332,
            column: 53
          },
          end: {
            line: 351,
            column: 3
          }
        },
        line: 332
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 358,
            column: 2
          },
          end: {
            line: 358,
            column: 3
          }
        },
        loc: {
          start: {
            line: 358,
            column: 42
          },
          end: {
            line: 375,
            column: 3
          }
        },
        line: 358
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 381,
            column: 2
          },
          end: {
            line: 381,
            column: 3
          }
        },
        loc: {
          start: {
            line: 381,
            column: 24
          },
          end: {
            line: 401,
            column: 3
          }
        },
        line: 381
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 407,
            column: 2
          },
          end: {
            line: 407,
            column: 3
          }
        },
        loc: {
          start: {
            line: 407,
            column: 18
          },
          end: {
            line: 413,
            column: 3
          }
        },
        line: 407
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 421,
            column: 2
          },
          end: {
            line: 421,
            column: 3
          }
        },
        loc: {
          start: {
            line: 421,
            column: 51
          },
          end: {
            line: 443,
            column: 3
          }
        },
        line: 421
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 452,
            column: 2
          },
          end: {
            line: 452,
            column: 3
          }
        },
        loc: {
          start: {
            line: 452,
            column: 54
          },
          end: {
            line: 465,
            column: 3
          }
        },
        line: 452
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 472,
            column: 2
          },
          end: {
            line: 472,
            column: 3
          }
        },
        loc: {
          start: {
            line: 472,
            column: 39
          },
          end: {
            line: 491,
            column: 3
          }
        },
        line: 472
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 498,
            column: 2
          },
          end: {
            line: 498,
            column: 3
          }
        },
        loc: {
          start: {
            line: 498,
            column: 37
          },
          end: {
            line: 516,
            column: 3
          }
        },
        line: 498
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 523,
            column: 2
          },
          end: {
            line: 523,
            column: 3
          }
        },
        loc: {
          start: {
            line: 523,
            column: 43
          },
          end: {
            line: 558,
            column: 3
          }
        },
        line: 523
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 535,
            column: 25
          },
          end: {
            line: 535,
            column: 26
          }
        },
        loc: {
          start: {
            line: 535,
            column: 47
          },
          end: {
            line: 549,
            column: 7
          }
        },
        line: 535
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 564,
            column: 2
          },
          end: {
            line: 564,
            column: 3
          }
        },
        loc: {
          start: {
            line: 564,
            column: 25
          },
          end: {
            line: 573,
            column: 3
          }
        },
        line: 564
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 583,
            column: 2
          },
          end: {
            line: 583,
            column: 3
          }
        },
        loc: {
          start: {
            line: 583,
            column: 73
          },
          end: {
            line: 602,
            column: 3
          }
        },
        line: 583
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 611,
            column: 2
          },
          end: {
            line: 611,
            column: 3
          }
        },
        loc: {
          start: {
            line: 611,
            column: 67
          },
          end: {
            line: 630,
            column: 3
          }
        },
        line: 611
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 636,
            column: 2
          },
          end: {
            line: 636,
            column: 3
          }
        },
        loc: {
          start: {
            line: 636,
            column: 24
          },
          end: {
            line: 655,
            column: 3
          }
        },
        line: 636
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 643,
            column: 56
          },
          end: {
            line: 643,
            column: 57
          }
        },
        loc: {
          start: {
            line: 643,
            column: 64
          },
          end: {
            line: 643,
            column: 95
          }
        },
        line: 643
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 644,
            column: 56
          },
          end: {
            line: 644,
            column: 57
          }
        },
        loc: {
          start: {
            line: 644,
            column: 64
          },
          end: {
            line: 644,
            column: 100
          }
        },
        line: 644
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 664,
            column: 13
          },
          end: {
            line: 664,
            column: 14
          }
        },
        loc: {
          start: {
            line: 664,
            column: 36
          },
          end: {
            line: 664,
            column: 77
          }
        },
        line: 664
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 665,
            column: 17
          },
          end: {
            line: 665,
            column: 18
          }
        },
        loc: {
          start: {
            line: 665,
            column: 29
          },
          end: {
            line: 665,
            column: 63
          }
        },
        line: 665
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 666,
            column: 23
          },
          end: {
            line: 666,
            column: 24
          }
        },
        loc: {
          start: {
            line: 666,
            column: 35
          },
          end: {
            line: 666,
            column: 75
          }
        },
        line: 666
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 667,
            column: 16
          },
          end: {
            line: 667,
            column: 17
          }
        },
        loc: {
          start: {
            line: 667,
            column: 37
          },
          end: {
            line: 667,
            column: 79
          }
        },
        line: 667
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 668,
            column: 20
          },
          end: {
            line: 668,
            column: 21
          }
        },
        loc: {
          start: {
            line: 668,
            column: 35
          },
          end: {
            line: 668,
            column: 75
          }
        },
        line: 668
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 669,
            column: 26
          },
          end: {
            line: 669,
            column: 27
          }
        },
        loc: {
          start: {
            line: 669,
            column: 41
          },
          end: {
            line: 669,
            column: 87
          }
        },
        line: 669
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 670,
            column: 16
          },
          end: {
            line: 670,
            column: 17
          }
        },
        loc: {
          start: {
            line: 670,
            column: 48
          },
          end: {
            line: 670,
            column: 101
          }
        },
        line: 670
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 671,
            column: 26
          },
          end: {
            line: 671,
            column: 27
          }
        },
        loc: {
          start: {
            line: 671,
            column: 41
          },
          end: {
            line: 671,
            column: 87
          }
        },
        line: 671
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 672,
            column: 17
          },
          end: {
            line: 672,
            column: 18
          }
        },
        loc: {
          start: {
            line: 672,
            column: 23
          },
          end: {
            line: 672,
            column: 51
          }
        },
        line: 672
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 673,
            column: 17
          },
          end: {
            line: 673,
            column: 18
          }
        },
        loc: {
          start: {
            line: 673,
            column: 23
          },
          end: {
            line: 673,
            column: 51
          }
        },
        line: 673
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 674,
            column: 15
          },
          end: {
            line: 674,
            column: 16
          }
        },
        loc: {
          start: {
            line: 674,
            column: 40
          },
          end: {
            line: 674,
            column: 85
          }
        },
        line: 674
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 675,
            column: 17
          },
          end: {
            line: 675,
            column: 18
          }
        },
        loc: {
          start: {
            line: 675,
            column: 23
          },
          end: {
            line: 675,
            column: 51
          }
        },
        line: 675
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 677,
            column: 20
          },
          end: {
            line: 677,
            column: 21
          }
        },
        loc: {
          start: {
            line: 677,
            column: 47
          },
          end: {
            line: 677,
            column: 99
          }
        },
        line: 677
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 678,
            column: 24
          },
          end: {
            line: 678,
            column: 25
          }
        },
        loc: {
          start: {
            line: 678,
            column: 38
          },
          end: {
            line: 678,
            column: 81
          }
        },
        line: 678
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 680,
            column: 22
          },
          end: {
            line: 680,
            column: 23
          }
        },
        loc: {
          start: {
            line: 680,
            column: 36
          },
          end: {
            line: 680,
            column: 77
          }
        },
        line: 680
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 681,
            column: 26
          },
          end: {
            line: 681,
            column: 27
          }
        },
        loc: {
          start: {
            line: 681,
            column: 42
          },
          end: {
            line: 681,
            column: 89
          }
        },
        line: 681
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 683,
            column: 24
          },
          end: {
            line: 683,
            column: 25
          }
        },
        loc: {
          start: {
            line: 683,
            column: 62
          },
          end: {
            line: 683,
            column: 129
          }
        },
        line: 683
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 684,
            column: 28
          },
          end: {
            line: 684,
            column: 29
          }
        },
        loc: {
          start: {
            line: 684,
            column: 56
          },
          end: {
            line: 684,
            column: 117
          }
        },
        line: 684
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 686,
            column: 24
          },
          end: {
            line: 686,
            column: 25
          }
        },
        loc: {
          start: {
            line: 686,
            column: 30
          },
          end: {
            line: 686,
            column: 65
          }
        },
        line: 686
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 36
          },
          end: {
            line: 33,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 33,
            column: 42
          },
          end: {
            line: 33,
            column: 63
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 6
          },
          end: {
            line: 49,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 6
          },
          end: {
            line: 49,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        }, {
          start: {
            line: 73,
            column: 13
          },
          end: {
            line: 76,
            column: 7
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 97,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 97,
            column: 66
          }
        }, {
          start: {
            line: 97,
            column: 70
          },
          end: {
            line: 97,
            column: 72
          }
        }],
        line: 97
      },
      "4": {
        loc: {
          start: {
            line: 151,
            column: 6
          },
          end: {
            line: 155,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 6
          },
          end: {
            line: 155,
            column: 7
          }
        }, {
          start: {
            line: 153,
            column: 13
          },
          end: {
            line: 155,
            column: 7
          }
        }],
        line: 151
      },
      "5": {
        loc: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 179,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 179,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "6": {
        loc: {
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 205,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 6
          },
          end: {
            line: 205,
            column: 7
          }
        }, {
          start: {
            line: 203,
            column: 13
          },
          end: {
            line: 205,
            column: 7
          }
        }],
        line: 201
      },
      "7": {
        loc: {
          start: {
            line: 224,
            column: 20
          },
          end: {
            line: 224,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 20
          },
          end: {
            line: 224,
            column: 62
          }
        }, {
          start: {
            line: 224,
            column: 66
          },
          end: {
            line: 224,
            column: 68
          }
        }],
        line: 224
      },
      "8": {
        loc: {
          start: {
            line: 226,
            column: 6
          },
          end: {
            line: 229,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 6
          },
          end: {
            line: 229,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "9": {
        loc: {
          start: {
            line: 247,
            column: 20
          },
          end: {
            line: 247,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 20
          },
          end: {
            line: 247,
            column: 62
          }
        }, {
          start: {
            line: 247,
            column: 66
          },
          end: {
            line: 247,
            column: 68
          }
        }],
        line: 247
      },
      "10": {
        loc: {
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 64
          }
        }, {
          start: {
            line: 270,
            column: 68
          },
          end: {
            line: 270,
            column: 70
          }
        }],
        line: 270
      },
      "11": {
        loc: {
          start: {
            line: 275,
            column: 27
          },
          end: {
            line: 275,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 27
          },
          end: {
            line: 275,
            column: 71
          }
        }, {
          start: {
            line: 275,
            column: 75
          },
          end: {
            line: 275,
            column: 77
          }
        }],
        line: 275
      },
      "12": {
        loc: {
          start: {
            line: 305,
            column: 45
          },
          end: {
            line: 305,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 305,
            column: 57
          },
          end: {
            line: 305,
            column: 61
          }
        }],
        line: 305
      },
      "13": {
        loc: {
          start: {
            line: 307,
            column: 60
          },
          end: {
            line: 307,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 60
          },
          end: {
            line: 307,
            column: 69
          }
        }, {
          start: {
            line: 307,
            column: 73
          },
          end: {
            line: 307,
            column: 81
          }
        }],
        line: 307
      },
      "14": {
        loc: {
          start: {
            line: 311,
            column: 6
          },
          end: {
            line: 314,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 6
          },
          end: {
            line: 314,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "15": {
        loc: {
          start: {
            line: 363,
            column: 6
          },
          end: {
            line: 369,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 6
          },
          end: {
            line: 369,
            column: 7
          }
        }, {
          start: {
            line: 366,
            column: 13
          },
          end: {
            line: 369,
            column: 7
          }
        }],
        line: 363
      },
      "16": {
        loc: {
          start: {
            line: 363,
            column: 10
          },
          end: {
            line: 363,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 10
          },
          end: {
            line: 363,
            column: 18
          }
        }, {
          start: {
            line: 363,
            column: 22
          },
          end: {
            line: 363,
            column: 41
          }
        }],
        line: 363
      },
      "17": {
        loc: {
          start: {
            line: 410,
            column: 20
          },
          end: {
            line: 410,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 32
          },
          end: {
            line: 410,
            column: 75
          }
        }, {
          start: {
            line: 410,
            column: 78
          },
          end: {
            line: 410,
            column: 82
          }
        }],
        line: 410
      },
      "18": {
        loc: {
          start: {
            line: 421,
            column: 20
          },
          end: {
            line: 421,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 421,
            column: 30
          },
          end: {
            line: 421,
            column: 32
          }
        }],
        line: 421
      },
      "19": {
        loc: {
          start: {
            line: 421,
            column: 34
          },
          end: {
            line: 421,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 421,
            column: 47
          },
          end: {
            line: 421,
            column: 49
          }
        }],
        line: 421
      },
      "20": {
        loc: {
          start: {
            line: 452,
            column: 43
          },
          end: {
            line: 452,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 452,
            column: 49
          },
          end: {
            line: 452,
            column: 52
          }
        }],
        line: 452
      },
      "21": {
        loc: {
          start: {
            line: 477,
            column: 6
          },
          end: {
            line: 483,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 6
          },
          end: {
            line: 483,
            column: 7
          }
        }, {
          start: {
            line: 480,
            column: 13
          },
          end: {
            line: 483,
            column: 7
          }
        }],
        line: 477
      },
      "22": {
        loc: {
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 548,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 548,
            column: 9
          }
        }, {
          start: {
            line: 546,
            column: 15
          },
          end: {
            line: 548,
            column: 9
          }
        }],
        line: 537
      },
      "23": {
        loc: {
          start: {
            line: 537,
            column: 12
          },
          end: {
            line: 537,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 537,
            column: 12
          },
          end: {
            line: 537,
            column: 18
          }
        }, {
          start: {
            line: 537,
            column: 22
          },
          end: {
            line: 537,
            column: 31
          }
        }],
        line: 537
      },
      "24": {
        loc: {
          start: {
            line: 583,
            column: 50
          },
          end: {
            line: 583,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 583,
            column: 57
          },
          end: {
            line: 583,
            column: 58
          }
        }],
        line: 583
      },
      "25": {
        loc: {
          start: {
            line: 583,
            column: 60
          },
          end: {
            line: 583,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 583,
            column: 68
          },
          end: {
            line: 583,
            column: 71
          }
        }],
        line: 583
      },
      "26": {
        loc: {
          start: {
            line: 590,
            column: 6
          },
          end: {
            line: 592,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 6
          },
          end: {
            line: 592,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 590
      },
      "27": {
        loc: {
          start: {
            line: 611,
            column: 44
          },
          end: {
            line: 611,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 611,
            column: 51
          },
          end: {
            line: 611,
            column: 52
          }
        }],
        line: 611
      },
      "28": {
        loc: {
          start: {
            line: 611,
            column: 54
          },
          end: {
            line: 611,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 611,
            column: 62
          },
          end: {
            line: 611,
            column: 65
          }
        }],
        line: 611
      },
      "29": {
        loc: {
          start: {
            line: 616,
            column: 6
          },
          end: {
            line: 622,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 6
          },
          end: {
            line: 622,
            column: 7
          }
        }, {
          start: {
            line: 619,
            column: 13
          },
          end: {
            line: 622,
            column: 7
          }
        }],
        line: 616
      },
      "30": {
        loc: {
          start: {
            line: 638,
            column: 6
          },
          end: {
            line: 640,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 6
          },
          end: {
            line: 640,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 638
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0],
      "28": [0],
      "29": [0, 0],
      "30": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9d3fec43ec2ea3fdbee647757eec4bbcb13f1c6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3apmh7tcr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3apmh7tcr();
const {
  redisManager
} =
/* istanbul ignore next */
(cov_3apmh7tcr().s[0]++, require('../config/redis'));
const config =
/* istanbul ignore next */
(cov_3apmh7tcr().s[1]++, require('../config'));
const winston =
/* istanbul ignore next */
(cov_3apmh7tcr().s[2]++, require('winston'));
class CacheService {
  constructor() {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[0]++;
    cov_3apmh7tcr().s[3]++;
    this.logger = winston.createLogger({
      level: 'info',
      format: winston.format.json(),
      transports: [new winston.transports.Console({
        format: winston.format.simple()
      })]
    });
    /* istanbul ignore next */
    cov_3apmh7tcr().s[4]++;
    this.cacheStats = {
      hits: 0,
      misses: 0,
      sets: 0,
      deletes: 0,
      errors: 0
    };
  }

  /**
   * Cache user data with automatic TTL
   * @param {string} userId - User ID
   * @param {Object} userData - User data to cache
   * @param {number} ttl - Time to live in seconds (optional, uses default)
   * @returns {Promise<boolean>} - Success status
   */
  async cacheUser(userId, userData, ttl =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[0][0]++, config.redis.cacheTTL)) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[1]++;
    cov_3apmh7tcr().s[5]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[6]++, `${config.redis.userPrefix}${userId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[7]++;
      await redisManager.setCache(cacheKey, userData, ttl);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[8]++;
      this.cacheStats.sets++;

      // Store user channel memberships for invalidation
      /* istanbul ignore next */
      cov_3apmh7tcr().s[9]++;
      if (userData.channels) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[1][0]++;
        const memberKey =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[10]++, `${config.redis.userPrefix}${userId}:channels`);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[11]++;
        await redisManager.setCache(memberKey, userData.channels, ttl);

        // Update reverse mapping (channel -> users)
        /* istanbul ignore next */
        cov_3apmh7tcr().s[12]++;
        for (const channelId of userData.channels) {
          const membershipKey =
          /* istanbul ignore next */
          (cov_3apmh7tcr().s[13]++, `${config.redis.keyPrefix}channel:${channelId}:members`);
          /* istanbul ignore next */
          cov_3apmh7tcr().s[14]++;
          await this.addUserToChannelCache(channelId, userId);
        }
      } else
      /* istanbul ignore next */
      {
        cov_3apmh7tcr().b[1][1]++;
      }
      cov_3apmh7tcr().s[15]++;
      this.logger.debug(`User data cached: ${cacheKey}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[16]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[17]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[18]++;
      this.logger.error('Error caching user data:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[19]++;
      return false;
    }
  }

  /**
   * Get cached user data with hit/miss tracking
   * @param {string} userId - User ID
   * @returns {Promise<Object|null>} - Cached user data or null
   */
  async getCachedUser(userId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[2]++;
    cov_3apmh7tcr().s[20]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[21]++, `${config.redis.userPrefix}${userId}`);
      const cachedData =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[22]++, await redisManager.getCache(cacheKey));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[23]++;
      if (cachedData) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[2][0]++;
        cov_3apmh7tcr().s[24]++;
        this.cacheStats.hits++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[25]++;
        this.logger.debug(`Cache hit for user: ${userId}`);
      } else {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[2][1]++;
        cov_3apmh7tcr().s[26]++;
        this.cacheStats.misses++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[27]++;
        this.logger.debug(`Cache miss for user: ${userId}`);
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[28]++;
      return cachedData;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[29]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[30]++;
      this.logger.error('Error retrieving cached user data:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[31]++;
      return null;
    }
  }

  /**
   * Invalidate user cache and related entries
   * @param {string} userId - User ID
   * @returns {Promise<boolean>} - Success status
   */
  async invalidateUserCache(userId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[3]++;
    cov_3apmh7tcr().s[32]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[33]++, `${config.redis.userPrefix}${userId}`);

      // Get user's channels before invalidating
      const membershipsKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[34]++, `${config.redis.userPrefix}${userId}:channels`);
      const channels =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[35]++,
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[3][0]++, await redisManager.getCache(membershipsKey)) ||
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[3][1]++, []));

      // Remove user from all channel membership caches
      /* istanbul ignore next */
      cov_3apmh7tcr().s[36]++;
      for (const channelId of channels) {
        /* istanbul ignore next */
        cov_3apmh7tcr().s[37]++;
        await this.removeUserFromChannelCache(channelId, userId);
      }

      // Delete all user-related cache entries
      /* istanbul ignore next */
      cov_3apmh7tcr().s[38]++;
      await redisManager.deleteCache(cacheKey);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[39]++;
      await redisManager.deleteCache(membershipsKey);

      // Delete pattern-based entries (messages, activity, etc.)
      const userPattern =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[40]++, `${config.redis.userPrefix}${userId}:*`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[41]++;
      await redisManager.clearCache(userPattern);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[42]++;
      this.cacheStats.deletes++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[43]++;
      this.logger.debug(`User cache invalidated: ${userId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[44]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[45]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[46]++;
      this.logger.error('Error invalidating user cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[47]++;
      return false;
    }
  }

  /**
   * Cache user activity and status
   * @param {string} userId - User ID
   * @param {Object} activity - Activity data (online status, last seen, etc.)
   * @returns {Promise<boolean>} - Success status
   */
  async cacheUserActivity(userId, activity) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[4]++;
    cov_3apmh7tcr().s[48]++;
    try {
      const activityKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[49]++, `${config.redis.userPrefix}${userId}:activity`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[50]++;
      await redisManager.setCache(activityKey, activity, config.redis.cacheTTL * 2); // Longer TTL for activity
      /* istanbul ignore next */
      cov_3apmh7tcr().s[51]++;
      this.logger.debug(`User activity cached: ${userId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[52]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[53]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[54]++;
      this.logger.error('Error caching user activity:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[55]++;
      return false;
    }
  }

  /**
   * Get cached user activity
   * @param {string} userId - User ID
   * @returns {Promise<Object|null>} - Cached activity data
   */
  async getCachedUserActivity(userId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[5]++;
    cov_3apmh7tcr().s[56]++;
    try {
      const activityKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[57]++, `${config.redis.userPrefix}${userId}:activity`);
      const activity =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[58]++, await redisManager.getCache(activityKey));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[59]++;
      if (activity) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[4][0]++;
        cov_3apmh7tcr().s[60]++;
        this.cacheStats.hits++;
      } else {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[4][1]++;
        cov_3apmh7tcr().s[61]++;
        this.cacheStats.misses++;
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[62]++;
      return activity;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[63]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[64]++;
      this.logger.error('Error retrieving cached user activity:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[65]++;
      return null;
    }
  }

  /**
   * Cache channel data and memberships
   * @param {string} channelId - Channel ID
   * @param {Object} channelData - Channel data
   * @returns {Promise<boolean>} - Success status
   */
  async cacheChannel(channelId, channelData) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[6]++;
    cov_3apmh7tcr().s[66]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[67]++, `${config.redis.keyPrefix}channel:${channelId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[68]++;
      await redisManager.setCache(cacheKey, channelData, config.redis.cacheTTL);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[69]++;
      if (channelData.members) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[5][0]++;
        const membershipKey =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[70]++, `${cacheKey}:members`);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[71]++;
        await redisManager.setCache(membershipKey, channelData.members, config.redis.cacheTTL);
      } else
      /* istanbul ignore next */
      {
        cov_3apmh7tcr().b[5][1]++;
      }
      cov_3apmh7tcr().s[72]++;
      this.cacheStats.sets++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[73]++;
      this.logger.debug(`Channel data cached: ${channelId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[74]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[75]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[76]++;
      this.logger.error('Error caching channel data:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[77]++;
      return false;
    }
  }

  /**
   * Get cached channel data
   * @param {string} channelId - Channel ID
   * @returns {Promise<Object|null>} - Cached channel data
   */
  async getCachedChannel(channelId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[7]++;
    cov_3apmh7tcr().s[78]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[79]++, `${config.redis.keyPrefix}channel:${channelId}`);
      const channelData =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[80]++, await redisManager.getCache(cacheKey));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[81]++;
      if (channelData) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[6][0]++;
        cov_3apmh7tcr().s[82]++;
        this.cacheStats.hits++;
      } else {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[6][1]++;
        cov_3apmh7tcr().s[83]++;
        this.cacheStats.misses++;
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[84]++;
      return channelData;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[85]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[86]++;
      this.logger.error('Error retrieving cached channel data:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[87]++;
      return null;
    }
  }

  /**
   * Add user to channel membership cache
   * @param {string} channelId - Channel ID
   * @param {string} userId - User ID
   * @returns {Promise<boolean>} - Success status
   */
  async addUserToChannelCache(channelId, userId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[8]++;
    cov_3apmh7tcr().s[88]++;
    try {
      const membershipKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[89]++, `${config.redis.keyPrefix}channel:${channelId}:members`);
      let members =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[90]++,
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[7][0]++, await redisManager.getCache(membershipKey)) ||
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[7][1]++, []));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[91]++;
      if (!members.includes(userId)) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[8][0]++;
        cov_3apmh7tcr().s[92]++;
        members.push(userId);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[93]++;
        await redisManager.setCache(membershipKey, members, config.redis.cacheTTL);
      } else
      /* istanbul ignore next */
      {
        cov_3apmh7tcr().b[8][1]++;
      }
      cov_3apmh7tcr().s[94]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[95]++;
      this.logger.error('Error adding user to channel cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[96]++;
      return false;
    }
  }

  /**
   * Remove user from channel membership cache
   * @param {string} channelId - Channel ID
   * @param {string} userId - User ID
   * @returns {Promise<boolean>} - Success status
   */
  async removeUserFromChannelCache(channelId, userId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[9]++;
    cov_3apmh7tcr().s[97]++;
    try {
      const membershipKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[98]++, `${config.redis.keyPrefix}channel:${channelId}:members`);
      let members =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[99]++,
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[9][0]++, await redisManager.getCache(membershipKey)) ||
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[9][1]++, []));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[100]++;
      members = members.filter(id => {
        /* istanbul ignore next */
        cov_3apmh7tcr().f[10]++;
        cov_3apmh7tcr().s[101]++;
        return id !== userId;
      });
      /* istanbul ignore next */
      cov_3apmh7tcr().s[102]++;
      await redisManager.setCache(membershipKey, members, config.redis.cacheTTL);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[103]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[104]++;
      this.logger.error('Error removing user from channel cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[105]++;
      return false;
    }
  }

  /**
   * Invalidate channel cache and related entries
   * @param {string} channelId - Channel ID
   * @returns {Promise<boolean>} - Success status
   */
  async invalidateChannelCache(channelId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[11]++;
    cov_3apmh7tcr().s[106]++;
    try {
      const channelKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[107]++, `${config.redis.keyPrefix}channel:${channelId}`);

      // Get members before invalidating
      const membershipKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[108]++, `${channelKey}:members`);
      const members =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[109]++,
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[10][0]++, await redisManager.getCache(membershipKey)) ||
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[10][1]++, []));

      // Remove channel from all user membership caches
      /* istanbul ignore next */
      cov_3apmh7tcr().s[110]++;
      for (const userId of members) {
        const userChannelsKey =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[111]++, `${config.redis.userPrefix}${userId}:channels`);
        let userChannels =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[112]++,
        /* istanbul ignore next */
        (cov_3apmh7tcr().b[11][0]++, await redisManager.getCache(userChannelsKey)) ||
        /* istanbul ignore next */
        (cov_3apmh7tcr().b[11][1]++, []));
        /* istanbul ignore next */
        cov_3apmh7tcr().s[113]++;
        userChannels = userChannels.filter(id => {
          /* istanbul ignore next */
          cov_3apmh7tcr().f[12]++;
          cov_3apmh7tcr().s[114]++;
          return id !== channelId;
        });
        /* istanbul ignore next */
        cov_3apmh7tcr().s[115]++;
        await redisManager.setCache(userChannelsKey, userChannels, config.redis.cacheTTL);
      }

      // Delete channel cache entries
      /* istanbul ignore next */
      cov_3apmh7tcr().s[116]++;
      await redisManager.deleteCache(channelKey);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[117]++;
      await redisManager.deleteCache(membershipKey);

      // Clear message cache for the channel
      const messagePattern =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[118]++, `${config.redis.keyPrefix}messages:${channelId}:*`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[119]++;
      await redisManager.clearCache(messagePattern);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[120]++;
      this.cacheStats.deletes++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[121]++;
      this.logger.debug(`Channel cache invalidated: ${channelId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[122]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[123]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[124]++;
      this.logger.error('Error invalidating channel cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[125]++;
      return false;
    }
  }

  /**
   * Cache message for offline delivery
   * @param {string} messageId - Message ID
   * @param {Object} messageData - Message data
   * @param {string} channelId - Channel ID (optional)
   * @returns {Promise<boolean>} - Success status
   */
  async cacheMessage(messageId, messageData, channelId =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[12][0]++, null)) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[13]++;
    cov_3apmh7tcr().s[126]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[127]++, `${config.redis.keyPrefix}messages:${
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[13][0]++, channelId) ||
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[13][1]++, 'direct')}:${messageId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[128]++;
      await redisManager.setCache(cacheKey, messageData, config.redis.cacheTTL);

      // Cache recent messages list for channel
      /* istanbul ignore next */
      cov_3apmh7tcr().s[129]++;
      if (channelId) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[14][0]++;
        const listKey =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[130]++, `${config.redis.keyPrefix}messages:${channelId}:list`);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[131]++;
        await this.addToRecentMessagesCache(listKey, messageId);
      } else
      /* istanbul ignore next */
      {
        cov_3apmh7tcr().b[14][1]++;
      }
      cov_3apmh7tcr().s[132]++;
      this.cacheStats.sets++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[133]++;
      this.logger.debug(`Message cached: ${messageId}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[134]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[135]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[136]++;
      this.logger.error('Error caching message:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[137]++;
      return false;
    }
  }

  /**
   * Add message to recent messages cache (LRU-style)
   * @param {string} listKey - Redis key for messages list
   * @param {string} messageId - Message ID
   * @returns {Promise<boolean>} - Success status
   */
  async addToRecentMessagesCache(listKey, messageId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[14]++;
    cov_3apmh7tcr().s[138]++;
    try {
      // Use Redis list with fixed size (recent 50 messages per channel)
      const maxSize =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[139]++, 50);

      // Add to list (left push)
      /* istanbul ignore next */
      cov_3apmh7tcr().s[140]++;
      await redisManager.client.lpush(listKey, messageId);

      // Trim to keep only recent messages
      /* istanbul ignore next */
      cov_3apmh7tcr().s[141]++;
      await redisManager.client.ltrim(listKey, 0, maxSize - 1);

      // Set TTL for the list
      /* istanbul ignore next */
      cov_3apmh7tcr().s[142]++;
      await redisManager.client.expire(listKey, config.redis.cacheTTL);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[143]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[144]++;
      this.logger.error('Error managing recent messages cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[145]++;
      return false;
    }
  }

  /**
   * Get recent messages cache for channel
   * @param {string} channelId - Channel ID
   * @returns {Promise<Array>} - Array of message IDs
   */
  async getRecentMessagesCache(channelId) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[15]++;
    cov_3apmh7tcr().s[146]++;
    try {
      const listKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[147]++, `${config.redis.keyPrefix}messages:${channelId}:list`);
      const messages =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[148]++, await redisManager.client.lrange(listKey, 0, -1));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[149]++;
      if (
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[16][0]++, messages) &&
      /* istanbul ignore next */
      (cov_3apmh7tcr().b[16][1]++, messages.length > 0)) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[15][0]++;
        cov_3apmh7tcr().s[150]++;
        this.cacheStats.hits++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[151]++;
        return messages;
      } else {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[15][1]++;
        cov_3apmh7tcr().s[152]++;
        this.cacheStats.misses++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[153]++;
        return [];
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[154]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[155]++;
      this.logger.error('Error retrieving recent messages cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[156]++;
      return [];
    }
  }

  /**
   * Clear all cache entries (emergency cleanup)
   * @returns {Promise<boolean>} - Success status
   */
  async clearAllCache() {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[16]++;
    cov_3apmh7tcr().s[157]++;
    try {
      // Clear all cache keys (but keep sessions)
      const patterns =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[158]++, [`${config.redis.userPrefix}*`, `${config.redis.cachePrefix}*`, `${config.redis.keyPrefix}channel:*`, `${config.redis.keyPrefix}messages:*`]);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[159]++;
      for (const pattern of patterns) {
        /* istanbul ignore next */
        cov_3apmh7tcr().s[160]++;
        await redisManager.clearCache(pattern.replace(/\*/g, '*'));
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[161]++;
      this.logger.info('All cache cleared');
      /* istanbul ignore next */
      cov_3apmh7tcr().s[162]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[163]++;
      this.logger.error('Error clearing cache:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[164]++;
      return false;
    }
  }

  /**
   * Get cache performance statistics
   * @returns {Object} - Cache statistics
   */
  getCacheStats() {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[17]++;
    const stats =
    /* istanbul ignore next */
    (cov_3apmh7tcr().s[165]++, {
      ...this.cacheStats
    });
    const total =
    /* istanbul ignore next */
    (cov_3apmh7tcr().s[166]++, stats.hits + stats.misses);
    /* istanbul ignore next */
    cov_3apmh7tcr().s[167]++;
    stats.hitRate = total > 0 ?
    /* istanbul ignore next */
    (cov_3apmh7tcr().b[17][0]++, (stats.hits / total * 100).toFixed(2) + '%') :
    /* istanbul ignore next */
    (cov_3apmh7tcr().b[17][1]++, '0%');
    /* istanbul ignore next */
    cov_3apmh7tcr().s[168]++;
    stats.totalOperations = total + stats.sets + stats.deletes;
    /* istanbul ignore next */
    cov_3apmh7tcr().s[169]++;
    return stats;
  }

  /**
   * Warm up cache with frequently accessed data
   * @param {Array} userIds - User IDs to preload
   * @param {Array} channelIds - Channel IDs to preload
   * @returns {Promise<boolean>} - Success status
   */
  async warmupCache(userIds =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[18][0]++, []), channelIds =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[19][0]++, [])) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[18]++;
    cov_3apmh7tcr().s[170]++;
    try {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[171]++;
      this.logger.info('Starting cache warmup...');

      // Load critical user data
      /* istanbul ignore next */
      cov_3apmh7tcr().s[172]++;
      for (const userId of userIds) {
        /* istanbul ignore next */
        cov_3apmh7tcr().s[173]++;
        // This would typically fetch from DB and cache
        this.logger.debug(`Warming up user cache: ${userId}`);
      }

      // Load critical channel data
      /* istanbul ignore next */
      cov_3apmh7tcr().s[174]++;
      for (const channelId of channelIds) {
        /* istanbul ignore next */
        cov_3apmh7tcr().s[175]++;
        // This would typically fetch from DB and cache
        this.logger.debug(`Warming up channel cache: ${channelId}`);
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[176]++;
      this.logger.info('Cache warmup completed');
      /* istanbul ignore next */
      cov_3apmh7tcr().s[177]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[178]++;
      this.logger.error('Error during cache warmup:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[179]++;
      return false;
    }
  }

  /**
   * Cache query result with TTL for database optimization
   * @param {string} queryKey - Unique key for the query
   * @param {Object|Array} result - Query result to cache
   * @param {number} ttl - Time to live in seconds (default: 5 minutes)
   * @returns {Promise<boolean>} - Success status
   */
  async cacheQueryResult(queryKey, result, ttl =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[20][0]++, 300)) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[19]++;
    cov_3apmh7tcr().s[180]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[181]++, `${config.redis.queryPrefix}query:${queryKey}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[182]++;
      await redisManager.setCache(cacheKey, result, ttl);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[183]++;
      this.cacheStats.sets++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[184]++;
      this.logger.debug(`Query result cached: ${queryKey}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[185]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[186]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[187]++;
      this.logger.error('Error caching query result:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[188]++;
      return false;
    }
  }

  /**
   * Get cached query result
   * @param {string} queryKey - Query key
   * @returns {Promise<Object|Array|null>} - Cached result or null
   */
  async getCachedQueryResult(queryKey) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[20]++;
    cov_3apmh7tcr().s[189]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[190]++, `${config.redis.queryPrefix}query:${queryKey}`);
      const result =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[191]++, await redisManager.getCache(cacheKey));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[192]++;
      if (result !== null) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[21][0]++;
        cov_3apmh7tcr().s[193]++;
        this.cacheStats.hits++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[194]++;
        this.logger.debug(`Query cache hit: ${queryKey}`);
      } else {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[21][1]++;
        cov_3apmh7tcr().s[195]++;
        this.cacheStats.misses++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[196]++;
        this.logger.debug(`Query cache miss: ${queryKey}`);
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[197]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[198]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[199]++;
      this.logger.error('Error retrieving cached query result:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[200]++;
      return null;
    }
  }

  /**
   * Batch cache multiple channels for optimized queries
   * @param {Array} channels - Array of channel objects
   * @returns {Promise<boolean>} - Success status
   */
  async batchCacheChannels(channels) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[21]++;
    cov_3apmh7tcr().s[201]++;
    try {
      const pipeline =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[202]++, redisManager.client.multi());
      /* istanbul ignore next */
      cov_3apmh7tcr().s[203]++;
      for (const channel of channels) {
        const cacheKey =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[204]++, `${config.redis.keyPrefix}channel:${channel.id}`);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[205]++;
        pipeline.setex(cacheKey, config.redis.cacheTTL, JSON.stringify(channel));
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[206]++;
      await pipeline.exec();
      /* istanbul ignore next */
      cov_3apmh7tcr().s[207]++;
      this.cacheStats.sets += channels.length;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[208]++;
      this.logger.debug(`Batch cached ${channels.length} channels`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[209]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[210]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[211]++;
      this.logger.error('Error batch caching channels:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[212]++;
      return false;
    }
  }

  /**
   * Batch get cached channels
   * @param {Array} channelIds - Array of channel IDs
   * @returns {Promise<Object>} - Map of found channels
   */
  async batchGetCachedChannels(channelIds) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[22]++;
    cov_3apmh7tcr().s[213]++;
    try {
      const pipeline =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[214]++, redisManager.client.multi());
      const channelMap =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[215]++, new Map());
      /* istanbul ignore next */
      cov_3apmh7tcr().s[216]++;
      for (const channelId of channelIds) {
        const cacheKey =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[217]++, `${config.redis.keyPrefix}channel:${channelId}`);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[218]++;
        pipeline.get(cacheKey);
      }
      const results =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[219]++, await pipeline.exec());
      /* istanbul ignore next */
      cov_3apmh7tcr().s[220]++;
      channelIds.forEach((channelId, index) => {
        /* istanbul ignore next */
        cov_3apmh7tcr().f[23]++;
        const result =
        /* istanbul ignore next */
        (cov_3apmh7tcr().s[221]++, results[index]);
        /* istanbul ignore next */
        cov_3apmh7tcr().s[222]++;
        if (
        /* istanbul ignore next */
        (cov_3apmh7tcr().b[23][0]++, result) &&
        /* istanbul ignore next */
        (cov_3apmh7tcr().b[23][1]++, result[1])) {
          /* istanbul ignore next */
          cov_3apmh7tcr().b[22][0]++;
          cov_3apmh7tcr().s[223]++;
          try {
            const channel =
            /* istanbul ignore next */
            (cov_3apmh7tcr().s[224]++, JSON.parse(result[1]));
            /* istanbul ignore next */
            cov_3apmh7tcr().s[225]++;
            channelMap.set(channelId, channel);
            /* istanbul ignore next */
            cov_3apmh7tcr().s[226]++;
            this.cacheStats.hits++;
          } catch (parseError) {
            /* istanbul ignore next */
            cov_3apmh7tcr().s[227]++;
            this.logger.warn(`Parse error for channel ${channelId}:`, parseError);
            /* istanbul ignore next */
            cov_3apmh7tcr().s[228]++;
            this.cacheStats.errors++;
          }
        } else {
          /* istanbul ignore next */
          cov_3apmh7tcr().b[22][1]++;
          cov_3apmh7tcr().s[229]++;
          this.cacheStats.misses++;
        }
      });
      /* istanbul ignore next */
      cov_3apmh7tcr().s[230]++;
      this.logger.debug(`Batch retrieved ${channelMap.size}/${channelIds.length} channels from cache`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[231]++;
      return channelMap;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[232]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[233]++;
      this.logger.error('Error batch getting cached channels:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[234]++;
      return new Map();
    }
  }

  /**
   * Expose connection monitor metrics to parent services
   * @returns {Object} - Connection metrics
   */
  getConnectionMetrics() {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[24]++;
    cov_3apmh7tcr().s[235]++;
    try {
      // Import the connection monitor when needed
      const {
        connectionMonitor
      } =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[236]++, require('../../db/connection'));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[237]++;
      return connectionMonitor.getMetrics();
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[238]++;
      this.logger.error('Error getting connection metrics:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[239]++;
      return {};
    }
  }

  /**
   * Cache channel messages with pagination support
   * @param {string} channelId - Channel ID
   * @param {Array} messages - Messages to cache
   * @param {number} page - Page number
   * @param {number} limit - Messages per page
   * @returns {Promise<boolean>} - Success status
   */
  async cacheChannelMessages(channelId, messages, page =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[24][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[25][0]++, 100)) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[25]++;
    cov_3apmh7tcr().s[240]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[241]++, `${config.redis.keyPrefix}channel:${channelId}:messages:page${page}:limit${limit}`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[242]++;
      await redisManager.setCache(cacheKey, messages, config.redis.cacheTTL);

      // Also add to recent messages list
      const recentKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[243]++, `${config.redis.keyPrefix}messages:${channelId}:recent`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[244]++;
      if (messages.length > 0) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[26][0]++;
        cov_3apmh7tcr().s[245]++;
        await this.addToRecentMessagesCache(recentKey, messages[0].id);
      } else
      /* istanbul ignore next */
      {
        cov_3apmh7tcr().b[26][1]++;
      }
      cov_3apmh7tcr().s[246]++;
      this.cacheStats.sets++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[247]++;
      this.logger.debug(`Channel messages cached: ${channelId} (${messages.length} messages)`);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[248]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[249]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[250]++;
      this.logger.error('Error caching channel messages:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[251]++;
      return false;
    }
  }

  /**
   * Get cached channel messages
   * @param {string} channelId - Channel ID
   * @param {number} page - Page number
   * @param {number} limit - Messages per page
   * @returns {Promise<Array|null>} - Cached messages or null
   */
  async getCachedChannelMessages(channelId, page =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[27][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_3apmh7tcr().b[28][0]++, 100)) {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[26]++;
    cov_3apmh7tcr().s[252]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[253]++, `${config.redis.keyPrefix}channel:${channelId}:messages:page${page}:limit${limit}`);
      const messages =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[254]++, await redisManager.getCache(cacheKey));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[255]++;
      if (messages) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[29][0]++;
        cov_3apmh7tcr().s[256]++;
        this.cacheStats.hits++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[257]++;
        this.logger.debug(`Channel messages cache hit: ${channelId}`);
      } else {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[29][1]++;
        cov_3apmh7tcr().s[258]++;
        this.cacheStats.misses++;
        /* istanbul ignore next */
        cov_3apmh7tcr().s[259]++;
        this.logger.debug(`Channel messages cache miss: ${channelId}`);
      }
      /* istanbul ignore next */
      cov_3apmh7tcr().s[260]++;
      return messages;
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[261]++;
      this.cacheStats.errors++;
      /* istanbul ignore next */
      cov_3apmh7tcr().s[262]++;
      this.logger.error('Error retrieving cached channel messages:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[263]++;
      return null;
    }
  }

  /**
   * Get memory usage information from Redis
   * @returns {Promise<Object>} - Memory usage data
   */
  async getMemoryInfo() {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[27]++;
    cov_3apmh7tcr().s[264]++;
    try {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[265]++;
      if (!redisManager.isClientReady()) {
        /* istanbul ignore next */
        cov_3apmh7tcr().b[30][0]++;
        cov_3apmh7tcr().s[266]++;
        throw new Error('Redis client not ready');
      } else
      /* istanbul ignore next */
      {
        cov_3apmh7tcr().b[30][1]++;
      }
      const info =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[267]++, await redisManager.client.info('memory'));
      const usedMemory =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[268]++, parseInt(info.split('\n').find(line => {
        /* istanbul ignore next */
        cov_3apmh7tcr().f[28]++;
        cov_3apmh7tcr().s[269]++;
        return line.startsWith('used_memory:');
      }).split(':')[1]));
      const peakMemory =
      /* istanbul ignore next */
      (cov_3apmh7tcr().s[270]++, parseInt(info.split('\n').find(line => {
        /* istanbul ignore next */
        cov_3apmh7tcr().f[29]++;
        cov_3apmh7tcr().s[271]++;
        return line.startsWith('used_memory_peak:');
      }).split(':')[1]));
      /* istanbul ignore next */
      cov_3apmh7tcr().s[272]++;
      return {
        used: usedMemory,
        peak: peakMemory,
        usagePercent: Math.round(usedMemory / peakMemory * 100)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_3apmh7tcr().s[273]++;
      this.logger.error('Error getting Redis memory info:', error);
      /* istanbul ignore next */
      cov_3apmh7tcr().s[274]++;
      throw error;
    }
  }
}

// Export singleton instance
const cacheService =
/* istanbul ignore next */
(cov_3apmh7tcr().s[275]++, new CacheService());
/* istanbul ignore next */
cov_3apmh7tcr().s[276]++;
module.exports = {
  cacheService,
  // Convenience exports
  cacheUser: (userId, data, ttl) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[30]++;
    cov_3apmh7tcr().s[277]++;
    return cacheService.cacheUser(userId, data, ttl);
  },
  getCachedUser: userId => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[31]++;
    cov_3apmh7tcr().s[278]++;
    return cacheService.getCachedUser(userId);
  },
  invalidateUserCache: userId => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[32]++;
    cov_3apmh7tcr().s[279]++;
    return cacheService.invalidateUserCache(userId);
  },
  cacheChannel: (channelId, data) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[33]++;
    cov_3apmh7tcr().s[280]++;
    return cacheService.cacheChannel(channelId, data);
  },
  getCachedChannel: channelId => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[34]++;
    cov_3apmh7tcr().s[281]++;
    return cacheService.getCachedChannel(channelId);
  },
  invalidateChannelCache: channelId => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[35]++;
    cov_3apmh7tcr().s[282]++;
    return cacheService.invalidateChannelCache(channelId);
  },
  cacheMessage: (messageId, data, channelId) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[36]++;
    cov_3apmh7tcr().s[283]++;
    return cacheService.cacheMessage(messageId, data, channelId);
  },
  getRecentMessagesCache: channelId => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[37]++;
    cov_3apmh7tcr().s[284]++;
    return cacheService.getRecentMessagesCache(channelId);
  },
  clearAllCache: () => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[38]++;
    cov_3apmh7tcr().s[285]++;
    return cacheService.clearAllCache();
  },
  getCacheStats: () => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[39]++;
    cov_3apmh7tcr().s[286]++;
    return cacheService.getCacheStats();
  },
  warmupCache: (userIds, channelIds) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[40]++;
    cov_3apmh7tcr().s[287]++;
    return cacheService.warmupCache(userIds, channelIds);
  },
  getMemoryInfo: () => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[41]++;
    cov_3apmh7tcr().s[288]++;
    return cacheService.getMemoryInfo();
  },
  // Query result caching exports
  cacheQueryResult: (queryKey, result, ttl) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[42]++;
    cov_3apmh7tcr().s[289]++;
    return cacheService.cacheQueryResult(queryKey, result, ttl);
  },
  getCachedQueryResult: queryKey => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[43]++;
    cov_3apmh7tcr().s[290]++;
    return cacheService.getCachedQueryResult(queryKey);
  },
  // Batch operations exports
  batchCacheChannels: channels => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[44]++;
    cov_3apmh7tcr().s[291]++;
    return cacheService.batchCacheChannels(channels);
  },
  batchGetCachedChannels: channelIds => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[45]++;
    cov_3apmh7tcr().s[292]++;
    return cacheService.batchGetCachedChannels(channelIds);
  },
  // Channel messages caching exports
  cacheChannelMessages: (channelId, messages, page, limit) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[46]++;
    cov_3apmh7tcr().s[293]++;
    return cacheService.cacheChannelMessages(channelId, messages, page, limit);
  },
  getCachedChannelMessages: (channelId, page, limit) => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[47]++;
    cov_3apmh7tcr().s[294]++;
    return cacheService.getCachedChannelMessages(channelId, page, limit);
  },
  // Connection monitoring exports
  getConnectionMetrics: () => {
    /* istanbul ignore next */
    cov_3apmh7tcr().f[48]++;
    cov_3apmh7tcr().s[295]++;
    return cacheService.getConnectionMetrics();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,