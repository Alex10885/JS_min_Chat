{"version":3,"names":["mongoose","require","winston","performance","PerformanceObserver","logger","createLogger","level","format","combine","timestamp","errors","stack","json","defaultMeta","service","transports","File","filename","Console","colorize","simple","connectionMetrics","activeCount","inUseCount","availableCount","createdCount","closedCount","pendingCount","lastHealthCheck","connectionLifetime","averageQueryTime","queriesPerSecond","ConnectionPoolMonitor","constructor","metrics","healthCheckInterval","performanceObserver","list","entries","getEntries","forEach","entry","name","updateQueryMetrics","duration","observe","type","startHealthChecks","intervalMs","setInterval","performHealthCheck","info","stopHealthChecks","clearInterval","stats","connection","db","Date","activeConnections","availableConnections","pendingOperations","error","updatePoolMetrics","readyState","poolSize","serverConfig","Math","max","debug","warn","message","getMetrics","connectionMonitor","connectDB","retries","i","startTime","now","conn","connect","process","env","MONGODB_URI","maxPoolSize","minPoolSize","maxIdleTimeMS","serverSelectionTimeoutMS","socketTimeoutMS","connectTimeoutMS","heartbeatFrequencyMS","connectTime","host","toFixed","on","data","totalCreated","totalClosed","err","setTimeout","active","inUse","available","pending","delay","min","pow","Promise","resolve","closeDB","close","forceError","getConnectionStatus","isConnected","database","trackQueryPerformance","queryName","next","start","mark","result","end","measure","clearMarks","module","exports"],"sources":["connection.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst winston = require('winston');\nconst { performance, PerformanceObserver } = require('perf_hooks');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'database' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/database.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\n// Connection pool metrics\nlet connectionMetrics = {\n  activeCount: 0,\n  inUseCount: 0,\n  availableCount: 0,\n  createdCount: 0,\n  closedCount: 0,\n  pendingCount: 0,\n  lastHealthCheck: null,\n  connectionLifetime: 0,\n  averageQueryTime: 0,\n  queriesPerSecond: 0\n};\n\nclass ConnectionPoolMonitor {\n  constructor() {\n    this.metrics = connectionMetrics;\n    this.healthCheckInterval = null;\n    this.performanceObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        if (entry.name === 'mongodb-query') {\n          this.updateQueryMetrics(entry.duration);\n        }\n      });\n    });\n    this.performanceObserver.observe({ type: 'measure' });\n  }\n\n  startHealthChecks(intervalMs = 30000) {\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthCheck();\n    }, intervalMs);\n    logger.info('Connection pool health checks started');\n  }\n\n  stopHealthChecks() {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n      logger.info('Connection pool health checks stopped');\n    }\n  }\n\n  performHealthCheck() {\n    try {\n      const stats = mongoose.connection.db.stats();\n      this.metrics.lastHealthCheck = new Date();\n      logger.info('Connection pool health check passed', {\n        activeConnections: this.metrics.activeCount,\n        availableConnections: this.metrics.availableCount,\n        pendingOperations: this.metrics.pendingCount\n      });\n    } catch (error) {\n      logger.error('Connection pool health check failed:', error);\n    }\n  }\n\n  updateQueryMetrics(duration) {\n    this.metrics.averageQueryTime = (this.metrics.averageQueryTime + duration) / 2;\n    this.metrics.queriesPerSecond = 1000 / duration; // approximate\n  }\n\n  updatePoolMetrics() {\n    if (mongoose.connection.readyState === 1) {\n      try {\n        const poolSize = mongoose.connection.db.serverConfig.poolSize || 0;\n        this.metrics.activeCount = poolSize;\n        this.metrics.availableCount = Math.max(0, 20 - this.metrics.inUseCount); // assuming maxPoolSize = 20\n        logger.debug('Pool metrics updated', this.metrics);\n      } catch (error) {\n        logger.warn('Failed to get pool metrics:', error.message);\n      }\n    }\n  }\n\n  getMetrics() {\n    this.updatePoolMetrics();\n    return { ...this.metrics };\n  }\n}\n\n// Initialize connection monitor\nconst connectionMonitor = new ConnectionPoolMonitor();\n\nconst connectDB = async (retries = 5) => {\n  for (let i = 1; i <= retries; i++) {\n    try {\n      const startTime = performance.now();\n\n      const conn = await mongoose.connect(process.env.MONGODB_URI, {\n        maxPoolSize: 20,           // Maximum 20 connections in the pool\n        minPoolSize: 5,            // Maintain minimum 5 connections\n        maxIdleTimeMS: 30000,      // Close connections after 30s of inactivity\n        serverSelectionTimeoutMS: 30000,\n        socketTimeoutMS: 45000,\n        connectTimeoutMS: 30000,\n        heartbeatFrequencyMS: 10000, // Check health every 10 seconds\n      });\n\n      const connectTime = performance.now() - startTime;\n      connectionMonitor.metrics.connectionLifetime = connectTime;\n\n      logger.info(`MongoDB Connected: ${conn.connection.host} (${connectTime.toFixed(2)}ms)`);\n\n      // Start connection monitoring\n      connectionMonitor.startHealthChecks();\n\n      // Handle connection events with enhanced tracking\n      mongoose.connection.on('connectionCreated', (data) => {\n        connectionMonitor.metrics.createdCount++;\n        connectionMonitor.metrics.activeCount++;\n        logger.info('Connection created', {\n          totalCreated: connectionMonitor.metrics.createdCount,\n          activeCount: connectionMonitor.metrics.activeCount\n        });\n      });\n\n      mongoose.connection.on('connectionClosed', (data) => {\n        connectionMonitor.metrics.closedCount++;\n        connectionMonitor.metrics.activeCount = Math.max(0, connectionMonitor.metrics.activeCount - 1);\n        logger.info('Connection closed', {\n          totalClosed: connectionMonitor.metrics.closedCount,\n          activeCount: connectionMonitor.metrics.activeCount\n        });\n      });\n\n      mongoose.connection.on('connectionReady', (data) => {\n        logger.debug('Connection ready for use');\n      });\n\n      mongoose.connection.on('connectionLeased', (data) => {\n        connectionMonitor.metrics.inUseCount++;\n        logger.debug(`Connection leased - In use: ${connectionMonitor.metrics.inUseCount}`);\n      });\n\n      mongoose.connection.on('connectionReturned', (data) => {\n        connectionMonitor.metrics.inUseCount = Math.max(0, connectionMonitor.metrics.inUseCount - 1);\n        logger.debug(`Connection returned - Available: ${connectionMonitor.metrics.availableCount}`);\n      });\n\n      mongoose.connection.on('error', (err) => {\n        logger.error('Database connection error:', err);\n      });\n\n      mongoose.connection.on('disconnected', () => {\n        connectionMonitor.stopHealthChecks();\n        logger.warn('Database disconnected');\n\n        // Enhanced reconnection strategy with exponential backoff\n        setTimeout(() => {\n          logger.info('Attempting automated reconnection...');\n          connectDB(3); // 3 retries on disconnection\n        }, 5000);\n      });\n\n      mongoose.connection.on('reconnected', () => {\n        logger.info('Database reconnected successfully');\n        connectionMonitor.startHealthChecks(); // Restart health checks\n      });\n\n      mongoose.connection.on('reconnectFailed', (err) => {\n        logger.error('Database reconnection failed:', err);\n      });\n\n      // Periodic pool status logging\n      setInterval(() => {\n        const metrics = connectionMonitor.getMetrics();\n        logger.info('Connection Pool Status', {\n          active: metrics.activeCount,\n          inUse: metrics.inUseCount,\n          available: metrics.availableCount,\n          pending: metrics.pendingCount,\n          averageQueryTime: `${metrics.averageQueryTime.toFixed(2)}ms`,\n          queriesPerSecond: metrics.queriesPerSecond.toFixed(2)\n        });\n      }, 60000); // Log every minute\n\n      return conn;\n    } catch (error) {\n      logger.error(`Database connection attempt ${i}/${retries} failed:`, error);\n\n      if (i === retries) {\n        logger.error('Database connection failed after all retries:', error);\n        throw error; // Let the caller handle it\n      }\n\n      // Exponential backoff for retries\n      const delay = Math.min(1000 * Math.pow(2, i - 1), 30000);\n      logger.info(`Retrying database connection in ${delay}ms...`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n};\n\nconst closeDB = async () => {\n  try {\n    // Stop health checks before closing\n    connectionMonitor.stopHealthChecks();\n\n    if (mongoose.connection.readyState === 1) {\n      await mongoose.connection.close();\n      logger.info('Database connection closed gracefully');\n      logger.info('Final connection metrics:', connectionMonitor.getMetrics());\n    } else {\n      logger.info('Database connection was not open, no need to close');\n    }\n  } catch (error) {\n    logger.error('Error closing database connection:', error);\n    // Force close if graceful close fails\n    try {\n      mongoose.connection.close(true);\n      logger.warn('Database connection force closed');\n    } catch (forceError) {\n      logger.error('Force close failed:', forceError);\n    }\n  }\n};\n\n// Utility function to get connection status\nconst getConnectionStatus = () => {\n  return {\n    isConnected: mongoose.connection.readyState === 1,\n    readyState: mongoose.connection.readyState,\n    host: mongoose.connection.host || null,\n    database: mongoose.connection.name || null,\n    metrics: connectionMonitor.getMetrics()\n  };\n};\n\n// Middleware function to track query performance (can be used in routes)\nconst trackQueryPerformance = (queryName) => {\n  return async (next) => {\n    const start = performance.mark(`${queryName}-start`);\n    try {\n      const result = await next();\n      const end = performance.mark(`${queryName}-end`);\n      performance.measure(`${queryName}-duration`, `${queryName}-start`, `${queryName}-end`);\n      return result;\n    } catch (error) {\n      performance.clearMarks(`${queryName}-start`);\n      performance.clearMarks(`${queryName}-end`);\n      throw error;\n    }\n  };\n};\n\nmodule.exports = {\n  connectDB,\n  closeDB,\n  getConnectionStatus,\n  trackQueryPerformance,\n  connectionMonitor\n};"],"mappings":"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","ignoreList":[]}