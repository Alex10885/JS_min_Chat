{"version":3,"names":["cov_1ub814s3ey","actualCoverage","authService","s","require","logger","AuthController","constructor","f","login","req","res","console","log","identifier","body","hasPassword","password","ip","captchaToken","user","loginUser","sessionId","session","authenticated","userId","_id","toString","nickname","role","csrfToken","generateCsrfToken","loginTime","Date","toISOString","csrfTokenHash","Promise","resolve","reject","save","err","b","error","info","token","generateToken","json","id","email","expires","cookie","status","message","register","registerUser","registrationTime","includes","logout","logoutUser","success","logoutSession","hasJwtAuth","hasSessionAuth","sessionUser","getUserFromToken","destroy","type","sessionDestroyed","code","logoutComplete","jwtLogoutResult","sessionLogoutResult","jwtError","sessionError","overallSuccess","jwt","checkSecurityStatus","query","captchaRequired","accountLocked","lockTimeRemaining","User","findOne","$or","isLocked","isAccountLocked","Math","ceil","accountLockedUntil","failedAttempts","failedLoginAttempts","unlockAccount","trim","length","max","remainingAttempts","module","exports"],"sources":["authController.js"],"sourcesContent":["const authService = require('../services/authService');\nconst { logger } = require('../middleware/auth');\n\nclass AuthController {\n  constructor() {\n    this.logger = logger;\n  }\n\n  async login(req, res) {\n    try {\n      console.log('🔑 Incoming login request:', {\n        identifier: req.body.identifier,\n        hasPassword: !!req.body.password,\n        ip: req.ip\n      });\n\n      const { identifier, password, captchaToken } = req.body;\n\n      const user = await authService.loginUser(identifier, password, captchaToken);\n\n      // Setup session\n      console.log('🔏 Creating and storing user session');\n      console.log('🏷️ Generating sessionId:', req.sessionId);\n\n      req.session.authenticated = true;\n      req.session.userId = user._id.toString();\n      req.session.nickname = user.nickname;\n      req.session.role = user.role;\n      req.session.csrfToken = authService.generateCsrfToken();\n      req.session.loginTime = new Date().toISOString();\n\n      console.log('🔓 Session fingerprint generated:', {\n        csrfTokenHash: authService.generateCsrfToken(), // Show just hash\n        loginTime: req.session.loginTime\n      });\n\n      await new Promise((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) {\n            console.error('❌ Session save error:', err);\n            reject(err);\n          } else {\n            console.log('✅ Session saved successfully');\n            logger.info('Session saved during login', {\n              userId: req.session.userId,\n              nickname: req.session.nickname,\n              role: req.session.role,\n              ip: req.ip\n            });\n            resolve();\n          }\n        });\n      });\n\n      const token = authService.generateToken(user, req.sessionId, req.session.csrfToken);\n\n      console.log('📤 Sending login response');\n      res.json({\n        token,\n        user: {\n          id: user._id,\n          nickname: user.nickname,\n          email: user.email,\n          role: user.role\n        },\n        session: {\n          authenticated: true,\n          id: req.sessionId,\n          expires: req.session.cookie.expires\n        }\n      });\n    } catch (error) {\n      this.logger.error('Login controller error:', error);\n      res.status(400).json({ error: error.message });\n    }\n  }\n\n  async register(req, res) {\n    try {\n      const { nickname, email, password } = req.body;\n\n      const user = await authService.registerUser({ nickname, email, password });\n\n      console.log('🔏 Creating and storing registration session');\n\n      // Setup session\n      req.session.authenticated = true;\n      req.session.userId = user._id.toString();\n      req.session.nickname = user.nickname;\n      req.session.role = user.role;\n      req.session.csrfToken = authService.generateCsrfToken();\n      req.session.registrationTime = new Date().toISOString();\n\n      console.log('🔓 Registration session fingerprint generated:', {\n        csrfTokenHash: authService.generateCsrfToken(),\n        registrationTime: req.session.registrationTime\n      });\n\n      await new Promise((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) {\n            console.error('❌ Registration session save error:', err);\n            reject(err);\n          } else {\n            console.log('✅ Registration session saved successfully');\n            logger.info('Session saved during registration', {\n              userId: req.session.userId,\n              nickname: req.session.nickname,\n              role: req.session.role,\n              ip: req.ip\n            });\n            resolve();\n          }\n        });\n      });\n\n      const token = authService.generateToken(user, req.sessionId, req.session.csrfToken);\n\n      console.log('JWT token generated successfully');\n      logger.info(`User registered: ${user.nickname}`);\n\n      res.status(201).json({\n        token,\n        user: {\n          id: user._id,\n          nickname: user.nickname,\n          email: user.email,\n          role: user.role\n        },\n        session: {\n          authenticated: true,\n          id: req.sessionId,\n          expires: req.session.cookie.expires\n        }\n      });\n    } catch (error) {\n      this.logger.error('Registration controller error:', error);\n      if (error.message.includes('already taken') || error.message.includes('already registered')) {\n        res.status(409).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: 'Server error during registration' });\n      }\n    }\n  }\n\n  async logout(req, res) {\n    try {\n      console.log('🚪 Logout request from user:', req.user.nickname, { userId: req.user._id });\n\n      await authService.logoutUser(req.user._id);\n\n      // Disconnect all Socket.IO connections for this user would be handled by socket manager\n\n      console.log(`✅ User ${req.user.nickname} logged out successfully`);\n      logger.info(`User logged out: ${req.user.nickname}`, {\n        userId: req.user._id\n        // disconnectedSockets would be handled by socket manager\n      });\n\n      res.json({\n        success: true,\n        message: 'Logged out successfully'\n        // disconnectedCount would be handled by socket manager\n      });\n    } catch (error) {\n      this.logger.error('Logout controller error:', error);\n      res.status(500).json({ error: 'Server error during logout' });\n    }\n  }\n\n  async logoutSession(req, res) {\n    try {\n      console.log('🚪 Session logout request, sessionId:', req.sessionId);\n\n      const hasJwtAuth = !!req.user;\n      const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n\n      if (hasSessionAuth && req.session) {\n        const sessionUser = req.session.userId ?\n          await authService.getUserFromToken(null) || { nickname: 'unknown' } :\n          req.sessionUser;\n        const nickname = sessionUser ? sessionUser.nickname : 'unknown';\n\n        console.log('✅ Session logout: Destroying session for user:', nickname);\n\n        await new Promise((resolve, reject) => {\n          req.session.destroy((err) => {\n            if (err) {\n              console.error('❌ Session destroy error:', err);\n              reject(err);\n            } else {\n              console.log('✅ Session destroyed successfully');\n              resolve();\n            }\n          });\n        });\n\n        logger.info(`Session logged out: ${nickname}`, {\n          sessionId: req.sessionId,\n          ip: req.ip\n        });\n\n        res.json({\n          success: true,\n          message: 'Session logged out successfully',\n          type: 'session_logout',\n          sessionDestroyed: true\n        });\n      } else {\n        console.log('⚠️ Session logout: No authenticated session to destroy');\n        res.json({\n          success: true,\n          message: 'No active session to log out',\n          type: 'session_logout',\n          sessionDestroyed: false\n        });\n      }\n\n    } catch (error) {\n      this.logger.error('Session logout controller error:', error);\n      res.status(500).json({\n        error: 'Server error during session logout',\n        code: 'SESSION_LOGOUT_ERROR'\n      });\n    }\n  }\n\n  async logoutComplete(req, res) {\n    try {\n      console.log('🚪 Complete logout request, sessionId:', req.sessionId);\n\n      const hasJwtAuth = !!req.user;\n      const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n\n      let jwtLogoutResult = null;\n      let sessionLogoutResult = null;\n\n      // Handle JWT logout\n      if (hasJwtAuth) {\n        try {\n          await authService.logoutUser(req.user._id);\n          jwtLogoutResult = {\n            success: true\n            // disconnectedCount would be handled by socket manager\n          };\n        } catch (jwtError) {\n          jwtLogoutResult = {\n            success: false,\n            error: jwtError.message\n          };\n        }\n      }\n\n      // Handle session logout\n      if (hasSessionAuth && req.session) {\n        try {\n          if (req.session.userId) {\n            sessionLogoutResult = {\n              success: true,\n              sessionDestroyed: true\n            };\n          }\n\n          await new Promise((resolve, reject) => {\n            req.session.destroy((err) => {\n              if (err) reject(err);\n              else resolve(req.session = null);\n            });\n          });\n        } catch (sessionError) {\n          sessionLogoutResult = {\n            success: false,\n            error: sessionError.message\n          };\n        }\n      }\n\n      const overallSuccess = (!jwtLogoutResult || jwtLogoutResult.success) &&\n                            (!sessionLogoutResult || sessionLogoutResult.success);\n\n      res.json({\n        success: overallSuccess,\n        message: 'Complete logout processed',\n        type: 'complete_logout',\n        jwt: jwtLogoutResult,\n        session: sessionLogoutResult\n      });\n\n    } catch (error) {\n      this.logger.error('Complete logout controller error:', error);\n      res.status(500).json({\n        error: 'Server error during complete logout',\n        code: 'COMPLETE_LOGOUT_ERROR'\n      });\n    }\n  }\n\n  async checkSecurityStatus(req, res) {\n    try {\n      const { identifier } = req.query;\n\n      if (!identifier) {\n        return res.json({\n          captchaRequired: false,\n          accountLocked: false,\n          lockTimeRemaining: 0\n        });\n      }\n\n      // Find user by nickname or email\n      const User = require('../models/User');\n      const user = await User.findOne({\n        $or: [{ nickname: identifier }, { email: identifier }]\n      });\n\n      if (!user) {\n        return res.json({\n          captchaRequired: false,\n          accountLocked: false,\n          lockTimeRemaining: 0\n        });\n      }\n\n      const isLocked = user.isAccountLocked();\n      let lockTimeRemaining = 0;\n\n      if (isLocked) {\n        lockTimeRemaining = Math.ceil((user.accountLockedUntil - new Date()) / 1000 / 60);\n      }\n\n      res.json({\n        captchaRequired: user.captchaRequired,\n        accountLocked: isLocked,\n        lockTimeRemaining: lockTimeRemaining,\n        failedAttempts: user.failedLoginAttempts\n      });\n    } catch (error) {\n      this.logger.error('Security status check error:', error);\n      res.status(500).json({\n        error: 'Server error during security check',\n        code: 'SECURITY_CHECK_ERROR'\n      });\n    }\n  }\n\n  async unlockAccount(req, res) {\n    try {\n      const { identifier, captchaToken } = req.body;\n\n      const User = require('../models/User');\n      const user = await User.findOne({\n        $or: [{ nickname: identifier }, { email: identifier }]\n      });\n\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Validate CAPTCHA token in production\n      // For now, accept any non-empty token as valid\n      if (!captchaToken || captchaToken.trim().length === 0) {\n        return res.status(400).json({ error: 'Valid CAPTCHA token is required' });\n      }\n\n      // Temporarily reduce failed attempts and unlock account\n      user.failedLoginAttempts = Math.max(0, user.failedLoginAttempts - 1);\n      if (user.failedLoginAttempts < 2) {\n        user.captchaRequired = false;\n      }\n      await user.save();\n\n      // Log security event\n      this.logger.info('Account unlocked via CAPTCHA', {\n        userId: user._id,\n        nickname: user.nickname,\n        remainingAttempts: user.failedLoginAttempts,\n        captchaRequired: user.captchaRequired\n      });\n\n      res.json({\n        success: true,\n        message: 'Account unlocked successfully',\n        captchaRequired: user.captchaRequired\n      });\n    } catch (error) {\n      this.logger.error('Unlock account error:', error);\n      res.status(500).json({\n        error: 'Server error during unlock',\n        code: 'UNLOCK_ERROR'\n      });\n    }\n  }\n}\n\nmodule.exports = new AuthController();"],"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","ignoreList":[]}