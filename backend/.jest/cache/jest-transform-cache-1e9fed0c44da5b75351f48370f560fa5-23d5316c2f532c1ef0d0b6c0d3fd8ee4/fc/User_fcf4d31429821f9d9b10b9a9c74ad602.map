{"version":3,"names":["cov_2axo3ffj21","actualCoverage","mongoose","s","require","bcrypt","crypto","userSchema","Schema","nickname","type","String","required","unique","trim","minlength","maxlength","index","email","lowercase","password","role","enum","default","createdAt","Date","now","lastActive","status","banned","Boolean","banReason","banExpires","warnings","reason","issuedBy","Types","ObjectId","ref","issuedAt","expires","muteExpires","resetPasswordToken","resetPasswordExpires","moderationToken","moderationTokenExpires","pre","next","f","isModified","b","console","log","salt","genSalt","hash","error","message","methods","comparePassword","candidatePassword","compare","generateResetToken","resetToken","randomBytes","toString","createHash","update","digest","resetPassword","token","newPassword","hashedToken","Error","save","ban","duration","unban","isBanned","warn","warning","push","cleanWarnings","filter","getActiveWarningsCount","length","mute","unmute","isMuted","generateModerationToken","then","verifyModerationToken","hasModeratorPrivileges","hasAdminPrivileges","toJSON","userObject","toObject","module","exports","model"],"sources":["User.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst crypto = require('crypto');\n\nconst userSchema = new mongoose.Schema({\n  nickname: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 50,\n    index: true // Remove duplicate index call below\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true,\n    index: true // Remove duplicate index call below\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  role: {\n    type: String,\n    enum: ['admin', 'moderator', 'member'],\n    default: 'member'\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  lastActive: {\n    type: Date,\n    default: Date.now\n  },\n  status: {\n    type: String,\n    enum: ['online', 'offline'],\n    default: 'offline'\n  },\n  // Moderation fields\n  banned: {\n    type: Boolean,\n    default: false\n  },\n  banReason: {\n    type: String,\n    default: null\n  },\n  banExpires: {\n    type: Date,\n    default: null\n  },\n  warnings: [{\n    reason: String,\n    issuedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n    issuedAt: { type: Date, default: Date.now },\n    expires: Date\n  }],\n  muteExpires: {\n    type: Date,\n    default: null\n  },\n  // Temporary tokens\n  resetPasswordToken: {\n    type: String,\n    default: null\n  },\n  resetPasswordExpires: {\n    type: Date,\n    default: null\n  },\n  moderationToken: {\n    type: String,\n    default: null\n  },\n  moderationTokenExpires: {\n    type: Date,\n    default: null\n  }\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n   if (!this.isModified('password')) return next();\n\n   console.log('Hashing password for user:', this.nickname);\n   try {\n     const salt = await bcrypt.genSalt(12);\n     console.log('Salt generated:', salt);\n     this.password = await bcrypt.hash(this.password, salt);\n     console.log('Password hashed successfully');\n     next();\n   } catch (error) {\n     console.error('Error hashing password:', error.message);\n     next(error);\n   }\n });\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Generate reset password token\nuserSchema.methods.generateResetToken = function() {\n  // Generate random token\n  const resetToken = crypto.randomBytes(32).toString('hex');\n\n  // Hash token before storing\n  this.resetPasswordToken = crypto\n    .createHash('sha256')\n    .update(resetToken)\n    .digest('hex');\n\n  // Set expiration (1 hour from now)\n  this.resetPasswordExpires = Date.now() + 60 * 60 * 1000; // 1 hour\n\n  return resetToken;\n};\n\n// Reset password using token\nuserSchema.methods.resetPassword = function(token, newPassword) {\n  const hashedToken = crypto\n    .createHash('sha256')\n    .update(token)\n    .digest('hex');\n\n  if (hashedToken !== this.resetPasswordToken) {\n    throw new Error('Invalid or expired password reset token');\n  }\n\n  if (Date.now() > this.resetPasswordExpires) {\n    throw new Error('Password reset token has expired');\n  }\n\n  this.password = newPassword;\n  this.resetPasswordToken = null;\n  this.resetPasswordExpires = null;\n\n  return this.save();\n};\n\n// Ban user\nuserSchema.methods.ban = function(reason, duration = null, issuedBy = null) {\n  this.banned = true;\n  this.banReason = reason;\n  if (duration) {\n    this.banExpires = new Date(Date.now() + duration);\n  } else {\n    this.banExpires = null; // permanent ban\n  }\n  return this.save();\n};\n\n// Unban user\nuserSchema.methods.unban = function() {\n  this.banned = false;\n  this.banReason = null;\n  this.banExpires = null;\n  return this.save();\n};\n\n// Check if user is banned and if ban is active\nuserSchema.methods.isBanned = function() {\n  if (!this.banned) return false;\n  if (!this.banExpires) return true; // permanent ban\n  return this.banExpires > new Date(); // temporary ban still active\n};\n\n// Add warning to user\nuserSchema.methods.warn = function(reason, issuedBy, duration = null) {\n  const warning = {\n    reason: reason,\n    issuedBy: issuedBy,\n    issuedAt: new Date(),\n    expires: duration ? new Date(Date.now() + duration) : null\n  };\n  this.warnings.push(warning);\n  return this.save();\n};\n\n// Remove expired warnings\nuserSchema.methods.cleanWarnings = function() {\n  this.warnings = this.warnings.filter(warning => {\n    return !warning.expires || warning.expires > new Date();\n  });\n  return this.save();\n};\n\n// Get active warnings count\nuserSchema.methods.getActiveWarningsCount = function() {\n  this.cleanWarnings();\n  return this.warnings.length;\n};\n\n// Mute user (for chat)\nuserSchema.methods.mute = function(duration = 3600000) { // default 1 hour\n  this.muteExpires = new Date(Date.now() + duration);\n  return this.save();\n};\n\n// Unmute user\nuserSchema.methods.unmute = function() {\n  this.muteExpires = null;\n  return this.save();\n};\n\n// Check if user is muted\nuserSchema.methods.isMuted = function() {\n  return this.muteExpires && this.muteExpires > new Date();\n};\n\n// Generate moderation token for admin actions\nuserSchema.methods.generateModerationToken = function() {\n  const moderationToken = crypto.randomBytes(32).toString('hex');\n  this.moderationToken = crypto\n    .createHash('sha256')\n    .update(moderationToken)\n    .digest('hex');\n  this.moderationTokenExpires = Date.now() + 3600000; // 1 hour\n  return this.save().then(() => moderationToken);\n};\n\n// Verify moderation token\nuserSchema.methods.verifyModerationToken = function(token) {\n  const hashedToken = crypto\n    .createHash('sha256')\n    .update(token)\n    .digest('hex');\n\n  if (hashedToken !== this.moderationToken) {\n    throw new Error('Invalid moderation token');\n  }\n\n  if (Date.now() > this.moderationTokenExpires) {\n    throw new Error('Moderation token expired');\n  }\n\n  this.moderationToken = null;\n  this.moderationTokenExpires = null;\n  return this.save();\n};\n\n// Check if user has moderator/admin permissions\nuserSchema.methods.hasModeratorPrivileges = function() {\n  return this.role === 'admin' || this.role === 'moderator';\n};\n\nuserSchema.methods.hasAdminPrivileges = function() {\n  return this.role === 'admin';\n};\n\n// Remove password and sensitive data from JSON output\nuserSchema.methods.toJSON = function() {\n  const userObject = this.toObject();\n  delete userObject.password;\n  delete userObject.resetPasswordToken;\n  delete userObject.resetPasswordExpires;\n  delete userObject.moderationToken;\n  delete userObject.moderationTokenExpires;\n  // Don't show ban details to regular users\n  if (!this.hasModeratorPrivileges()) {\n    delete userObject.banReason;\n    delete userObject.banExpires;\n    delete userObject.warnings;\n  }\n  return userObject;\n};\n\nmodule.exports = mongoose.model('User', userSchema);"],"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","ignoreList":[]}