{"version":3,"names":["cov_l7pdl3a5t","actualCoverage","Message","s","require","Channel","User","logger","ChatService","constructor","f","saveMessage","messageData","author","channel","text","type","target","message","b","save","debug","error","getChannelHistory","channelId","limit","findOne","id","Error","history","find","$or","sort","timestamp","map","msg","room","getUserChannelHistory","userNickname","joinChannel","socket","io","leave","join","info","nickname","joinMessage","to","emit","leaveChannel","leaveMessage","sendPublicMessage","data","user","isBanned","isMuted","trim","status","sendPrivateMessage","onlineUsers","trimmedText","targetNickname","length","targetUser","Array","from","values","u","targetSocketId","keys","get","sender","getOnlineUsers","sockets","roomUsers","filter","role","createSystemMessage","systemMessage","module","exports"],"sources":["chatService.js"],"sourcesContent":["const Message = require('../models/Message');\nconst Channel = require('../models/Channel');\nconst User = require('../models/User');\nconst { logger } = require('../middleware/auth');\n\nclass ChatService {\n  constructor() {\n    this.logger = logger;\n  }\n\n  async saveMessage(messageData) {\n    try {\n      const { author, channel, text, type, target } = messageData;\n\n      const message = new Message({\n        author,\n        channel,\n        text,\n        type: type || 'public',\n        target\n      });\n\n      await message.save();\n\n      this.logger.debug(`Message saved from ${author} in ${channel}`);\n      return message;\n    } catch (error) {\n      this.logger.error('Error saving message:', error);\n      throw error;\n    }\n  }\n\n  async getChannelHistory(channelId, limit = 100) {\n    try {\n      const channel = await Channel.findOne({ id: channelId });\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      const history = await Message.find({\n        channel: channelId,\n        $or: [\n          { type: 'public' },\n          { type: 'system' }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(limit)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      return history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      }));\n    } catch (error) {\n      this.logger.error('Error getting channel history:', error);\n      throw error;\n    }\n  }\n\n  async getUserChannelHistory(channelId, userNickname, limit = 100) {\n    try {\n      const history = await Message.find({\n        channel: channelId,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: userNickname },\n          { target: userNickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(limit)\n        .sort({ timestamp: 1 });\n\n      return history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      }));\n    } catch (error) {\n      this.logger.error('Error getting user channel history:', error);\n      throw error;\n    }\n  }\n\n  async joinChannel(socket, channelId, io) {\n    try {\n      // Verify channel exists\n      const channel = await Channel.findOne({ id: channelId });\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      // Leave previous room\n      if (socket.room) {\n        socket.leave(socket.room);\n        // Update online users count would be handled elsewhere\n      }\n\n      socket.room = channelId;\n      socket.join(socket.room);\n\n      this.logger.info(`User ${socket.nickname} joined room ${socket.room}`);\n\n      // Send system message about joining\n      const joinMessage = new Message({\n        author: 'System',\n        channel: socket.room,\n        text: `${socket.nickname} joined the channel.`,\n        type: 'system'\n      });\n      await joinMessage.save();\n\n      io.to(socket.room).emit('message', {\n        author: joinMessage.author,\n        channel: joinMessage.channel,\n        text: joinMessage.text,\n        type: joinMessage.type,\n        timestamp: joinMessage.timestamp\n      });\n\n      // Send message history\n      const history = await this.getUserChannelHistory(channelId, socket.nickname);\n\n      return { channel, history };\n    } catch (error) {\n      this.logger.error('Error joining channel:', error);\n      throw error;\n    }\n  }\n\n  async leaveChannel(socket, io) {\n    try {\n      if (socket.room) {\n        // Create leave message\n        const leaveMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} left the channel.`,\n          type: 'system'\n        });\n        await leaveMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: leaveMessage.author,\n          room: leaveMessage.channel,\n          text: leaveMessage.text,\n          type: leaveMessage.type,\n          timestamp: leaveMessage.timestamp\n        });\n      }\n    } catch (error) {\n      this.logger.error('Error leaving channel:', error);\n      throw error;\n    }\n  }\n\n  async sendPublicMessage(socket, data, io) {\n    try {\n      // Check if user is banned\n      const user = await User.findOne({ nickname: socket.nickname });\n      if (user.isBanned()) {\n        throw new Error('You are banned and cannot send messages');\n      }\n\n      // Check if user is muted\n      if (user.isMuted()) {\n        throw new Error('You are muted and cannot send messages');\n      }\n\n      if (!socket.room || !data.text?.trim()) {\n        throw new Error('Invalid message data');\n      }\n\n      const message = await this.saveMessage({\n        author: socket.nickname,\n        channel: socket.room,\n        text: data.text.trim(),\n        type: 'public'\n      });\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        status: 'delivered',\n        type: message.type\n      };\n\n      io.to(socket.room).emit('message', messageData);\n      return messageData;\n    } catch (error) {\n      this.logger.error('Error sending public message:', error);\n      throw error;\n    }\n  }\n\n  async sendPrivateMessage(socket, data, onlineUsers, io) {\n    try {\n      const trimmedText = data.text.trim();\n      const targetNickname = data.to.trim();\n\n      if (!socket.room || !targetNickname || !trimmedText) {\n        throw new Error('Invalid private message data');\n      }\n\n      // Check if user is banned\n      const user = await User.findOne({ nickname: socket.nickname });\n      if (user.isBanned()) {\n        throw new Error('You are banned and cannot send messages');\n      }\n\n      // Check if user is muted\n      if (user.isMuted()) {\n        throw new Error('You are muted and cannot send messages');\n      }\n\n      // Validate target nickname format\n      if (targetNickname.length === 0 || targetNickname.length > 50) {\n        throw new Error('Invalid target user nickname');\n      }\n\n      // Prevent self-messaging\n      if (targetNickname === socket.nickname) {\n        throw new Error('Cannot send private message to yourself');\n      }\n\n      // Find target user in same room\n      const targetUser = Array.from(onlineUsers.values()).find(\n        u => u.nickname === targetNickname && u.room === socket.room\n      );\n\n      if (!targetUser) {\n        throw new Error(`User '${targetNickname}' is not available in this channel`);\n      }\n\n      const message = await this.saveMessage({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'private',\n        target: targetNickname\n      });\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: message.target,\n        status: 'delivered'\n      };\n\n      // Find target socket and send message\n      const targetSocketId = Array.from(onlineUsers.keys()).find(\n        id => onlineUsers.get(id).nickname === targetNickname\n      );\n\n      if (targetSocketId) {\n        io.to(targetSocketId).emit('private_message', messageData);\n      }\n\n      // Send confirmation to sender (without target for privacy)\n      socket.emit('private_message', {\n        author: message.author,\n        room: message.room,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: null, // Hide target from sender's confirmation\n        status: 'sent'\n      });\n\n      this.logger.info(`Private message sent successfully`, {\n        sender: socket.nickname,\n        target: targetNickname,\n        room: socket.room\n      });\n\n      return messageData;\n    } catch (error) {\n      this.logger.error('Error sending private message:', error);\n      throw error;\n    }\n  }\n\n  async getOnlineUsers(sockets, room) {\n    try {\n      const roomUsers = Array.from(sockets.values())\n        .filter(u => u.room === room)\n        .map(u => ({ nickname: u.nickname, role: u.role }));\n\n      return roomUsers;\n    } catch (error) {\n      this.logger.error('Error getting online users:', error);\n      return [];\n    }\n  }\n\n  async createSystemMessage(channel, message, io) {\n    try {\n      const systemMessage = await this.saveMessage({\n        author: 'System',\n        channel,\n        text: message,\n        type: 'system'\n      });\n\n      io.to(channel).emit('message', {\n        author: systemMessage.author,\n        channel: systemMessage.channel,\n        text: systemMessage.text,\n        type: systemMessage.type,\n        timestamp: systemMessage.timestamp\n      });\n    } catch (error) {\n      this.logger.error('Error creating system message:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = new ChatService();"],"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","ignoreList":[]}