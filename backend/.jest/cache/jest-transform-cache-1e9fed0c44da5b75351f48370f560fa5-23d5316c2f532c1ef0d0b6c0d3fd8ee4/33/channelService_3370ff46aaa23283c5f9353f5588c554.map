{"version":3,"names":["cov_2p4831m7el","actualCoverage","Channel","s","require","logger","ChannelService","constructor","f","getAllChannels","channels","find","select","sort","position","error","getChannelById","id","channel","findOne","createChannel","channelData","name","type","description","createdBy","save","info","channelId","code","b","Error","updateChannel","updateData","findOneAndUpdate","new","deleteChannel","result","findOneAndDelete","validateChannelExists","warn","message","createDefaultChannels","defaultChannels","upsert","module","exports"],"sources":["channelService.js"],"sourcesContent":["const Channel = require('../models/Channel');\nconst { logger } = require('../middleware/auth');\n\nclass ChannelService {\n  constructor() {\n    this.logger = logger;\n  }\n\n  async getAllChannels() {\n    try {\n      const channels = await Channel.find({})\n        .select('-_id id name type description createdBy position')\n        .sort({ position: 1 });\n\n      return channels;\n    } catch (error) {\n      this.logger.error('Error fetching channels:', error);\n      throw error;\n    }\n  }\n\n  async getChannelById(id) {\n    try {\n      const channel = await Channel.findOne({ id });\n      return channel;\n    } catch (error) {\n      this.logger.error('Error fetching channel by ID:', error);\n      throw error;\n    }\n  }\n\n  async createChannel(channelData) {\n    try {\n      const { name, type, description, createdBy } = channelData;\n\n      // Create new channel (ID will be auto-generated in pre-save middleware)\n      const channel = new Channel({\n        name,\n        type,\n        description,\n        createdBy\n      });\n\n      await channel.save();\n\n      this.logger.info(`Channel '${name}' created by ${createdBy}`, {\n        channelId: channel.id,\n        type,\n        createdBy\n      });\n\n      return channel;\n    } catch (error) {\n      if (error.code === 11000) {\n        throw new Error('Channel name already exists');\n      }\n      this.logger.error('Error creating channel:', error);\n      throw error;\n    }\n  }\n\n  async updateChannel(channelId, updateData) {\n    try {\n      const channel = await Channel.findOneAndUpdate(\n        { id: channelId },\n        updateData,\n        { new: true }\n      );\n\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      this.logger.info(`Channel '${channelId}' updated`);\n      return channel;\n    } catch (error) {\n      this.logger.error('Error updating channel:', error);\n      throw error;\n    }\n  }\n\n  async deleteChannel(channelId) {\n    try {\n      const result = await Channel.findOneAndDelete({ id: channelId });\n      if (!result) {\n        throw new Error('Channel not found');\n      }\n\n      this.logger.info(`Channel '${channelId}' deleted`);\n      return result;\n    } catch (error) {\n      this.logger.error('Error deleting channel:', error);\n      throw error;\n    }\n  }\n\n  async validateChannelExists(channelId) {\n    try {\n      const channel = await this.getChannelById(channelId);\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n      return channel;\n    } catch (error) {\n      this.logger.warn('Channel validation failed:', error.message);\n      throw error;\n    }\n  }\n\n  async createDefaultChannels() {\n    try {\n      const defaultChannels = [\n        { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n        { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' }\n      ];\n\n      for (const channelData of defaultChannels) {\n        await Channel.findOneAndUpdate(\n          { id: channelData.id },\n          channelData,\n          { upsert: true, new: true }\n        );\n      }\n\n      this.logger.info('Default channels initialized');\n    } catch (error) {\n      this.logger.error('Error creating default channels:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = new ChannelService();"],"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","ignoreList":[]}