{"version":3,"names":["io","require","jwt","connectDB","closeDB","User","Channel","Message","SocketTestServer","testServer","testUser","testToken","serverPort","describe","beforeAll","jest","setTimeout","start","nickname","email","password","status","save","generalChannel","findOne","id","name","type","description","createdBy","voiceChannel","sign","_id","role","process","env","JWT_SECRET","expiresIn","afterAll","stop","test","done","invalidSocket","auth","token","forceNew","on","error","expect","message","toContain","disconnect","noTokenSocket","toBe","socket","clientSocket","listenerSocket","emit","room","users","some","user","updatedUsers","every","Error","secondSocket","beforeEach","secondUser","then","secondToken","afterEach","privateMessage","waitForConnection","Promise","resolve","connected","all","to","text","senderReceived","receiverReceived","data","author","messages","Array","isArray","toHaveProperty","code","reconnectCount","newSocket","sockets","connectedCount","totalSockets","i","push","forEach","sock","channelId","startTime","Date","now","operationCount","targetOperations","performOperation","endTime","duration","toBeLessThan","malformedMessages","undefined","malformed"],"sources":["socket-extended.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst jwt = require('jsonwebtoken');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Channel = require('../models/Channel');\nconst Message = require('../models/Message');\nconst SocketTestServer = require('./socket-server.test');\n\nlet testServer;\nlet testUser;\nlet testToken;\nlet serverPort;\n\ndescribe('Socket.IO Extended Tests - Fixed', () => {\n  beforeAll(async () => {\n    jest.setTimeout(60000); // 60 seconds for setup\n    await connectDB();\n\n    testServer = new SocketTestServer();\n    serverPort = await testServer.start();\n\n    testUser = new User({\n      nickname: 'extendedSocketTestUser',\n      email: 'extended-socket@test.com',\n      password: 'testpass123',\n      status: 'online'\n    });\n    await testUser.save();\n\n    // Create test channels\n    let generalChannel = await Channel.findOne({ id: 'general' });\n    if (!generalChannel) {\n      generalChannel = new Channel({\n        id: 'general',\n        name: 'General Chat',\n        type: 'text',\n        description: 'General discussion channel',\n        createdBy: testUser.nickname\n      });\n      await generalChannel.save();\n    }\n\n    // Create voice channel for tests\n    let voiceChannel = await Channel.findOne({ id: 'voice-chat' });\n    if (!voiceChannel) {\n      voiceChannel = new Channel({\n        id: 'voice-chat',\n        name: 'Voice Chat',\n        type: 'voice',\n        description: 'Voice discussion channel',\n        createdBy: testUser.nickname\n      });\n      await voiceChannel.save();\n    }\n\n    // Create JWT token\n    testToken = jwt.sign(\n      { id: testUser._id, nickname: testUser.nickname, role: testUser.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n  });\n\n  afterAll(async () => {\n    if (testServer) {\n      await testServer.stop();\n    }\n    await closeDB();\n  });\n\n  describe('Authentication Edge Cases', () => {\n    test('should reject invalid JWT token', (done) => {\n      const invalidSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: 'invalid-token' },\n        forceNew: true\n      });\n\n      invalidSocket.on('connect_error', (error) => {\n        expect(error.message).toContain('Authentication');\n        invalidSocket.disconnect();\n        done();\n      });\n    });\n\n    test('should reject connection without token', (done) => {\n      const noTokenSocket = io(`http://localhost:${serverPort}`, {\n        forceNew: true\n      });\n\n      noTokenSocket.on('connect_error', (error) => {\n        expect(error.message).toBe('Authentication token required');\n        noTokenSocket.disconnect();\n        done();\n      });\n    });\n  });\n\n  describe('Disconnection Handling', () => {\n    test('should handle user disconnect gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.on('disconnect', () => {\n          done();\n        });\n        socket.disconnect();\n      });\n    });\n\n    test('should update online users list on disconnect', (done) => {\n      let clientSocket, listenerSocket;\n\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        clientSocket.emit('join_room', { room: 'general' });\n\n        clientSocket.on('online_users', () => {\n          listenerSocket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true\n          });\n\n          listenerSocket.on('connect', () => {\n            listenerSocket.emit('join_room', { room: 'general' });\n\n            listenerSocket.on('online_users', (users) => {\n              expect(users.some(user => user.nickname === testUser.nickname)).toBe(true);\n              clientSocket.disconnect();\n\n              setTimeout(() => {\n                listenerSocket.emit('get_online_users');\n                listenerSocket.on('online_users', (updatedUsers) => {\n                  expect(updatedUsers.every(user => user.nickname !== testUser.nickname)).toBe(true);\n                  listenerSocket.disconnect();\n                  done();\n                });\n              }, 500);\n            });\n          });\n        });\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Private Messages - /w Command Edge Cases', () => {\n    let clientSocket, secondSocket;\n\n    beforeEach((done) => {\n      const secondUser = new User({\n        nickname: 'extendedTestUser2',\n        email: 'extended-test2@test.com',\n        password: 'testpass123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        clientSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        secondSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        secondSocket.on('connect', () => {\n          clientSocket.emit('join_room', { room: 'general' });\n          secondSocket.emit('join_room', { room: 'general' });\n          done();\n        });\n\n        secondSocket.on('connect_error', (error) => {\n          done(new Error(`Second socket failed: ${error.message}`));\n        });\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n      if (secondSocket) secondSocket.disconnect();\n    });\n\n    test('should send private message between users', (done) => {\n      const privateMessage = 'Private message from extended test';\n\n      // Use Promise to wait for connection before emitting\n      const waitForConnection = (socket) => {\n        return new Promise((resolve) => {\n          if (socket.connected) {\n            resolve();\n          } else {\n            socket.on('connect', resolve);\n          }\n        });\n      };\n\n      // Wait for both sockets to connect\n      Promise.all([\n        waitForConnection(clientSocket),\n        waitForConnection(secondSocket)\n      ]).then(() => {\n        // Now emit the message only after both are connected\n        clientSocket.emit('private_message', {\n          to: 'extendedTestUser2',\n          text: privateMessage\n        });\n      });\n\n      let senderReceived = false;\n      let receiverReceived = false;\n\n      clientSocket.on('private_message', (data) => {\n        if (data.text === privateMessage) {\n          senderReceived = true;\n          if (receiverReceived) done();\n        }\n      });\n\n      secondSocket.on('private_message', (data) => {\n        if (data.text === privateMessage && data.author === testUser.nickname) {\n          receiverReceived = true;\n          if (senderReceived) done();\n        }\n      });\n\n      // Timeout as fallback\n      setTimeout(() => {\n        if (!senderReceived || !receiverReceived) {\n          done(new Error('Timeout: Private message not received by both sides'));\n        }\n      }, 15000);\n    });\n  });\n\n  describe('Message History and Archival', () => {\n    let clientSocket;\n\n    beforeEach((done) => {\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        done();\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n    });\n\n    test('should receive history when joining room', (done) => {\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        expect(messages[0]).toHaveProperty('author');\n        expect(messages[0]).toHaveProperty('text');\n        expect(messages[0]).toHaveProperty('timestamp');\n        done();\n      });\n    });\n\n    test('should handle history request without room', (done) => {\n      clientSocket.emit('get_history');\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        done();\n      });\n    });\n  });\n\n  describe('Room Switching and Channel Validation', () => {\n    test('should handle invalid room names', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: '' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('INVALID_ROOM_FORMAT');\n          socket.disconnect();\n          done();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    test('should handle non-existent channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'non-existent-channel' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('CHANNEL_NOT_FOUND');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Connection Management and Recovery', () => {\n    test('should handle connection recovery after disconnect', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      let reconnectCount = 0;\n\n      socket.on('connect', () => {\n        reconnectCount++;\n        if (reconnectCount === 2) {\n          expect(socket.connected).toBe(true);\n          done();\n        }\n      });\n\n      socket.on('disconnect', () => {\n        if (reconnectCount === 1) {\n          setTimeout(() => {\n            const newSocket = io(`http://localhost:${serverPort}`, {\n              auth: { token: testToken },\n              forceNew: true\n            });\n          }, 200);\n        }\n      });\n    });\n\n    test('should handle rapid connections', (done) => {\n      const sockets = [];\n      let connectedCount = 0;\n      const totalSockets = 3;\n\n      for (let i = 0; i < totalSockets; i++) {\n        const socket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        socket.on('connect', () => {\n          connectedCount++;\n          sockets.push(socket);\n          if (connectedCount === totalSockets) {\n            expect(connectedCount).toBe(totalSockets);\n            sockets.forEach(sock => sock.disconnect());\n            done();\n          }\n        });\n      }\n    });\n  });\n\n  describe('Advanced Voice Channel Scenarios', () => {\n    test('should reject joining text channel as voice channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'general' }); // Text channel\n        socket.on('voice_error', (data) => {\n          expect(data.message).toBe('Voice channel not found');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n\n    test('should join voice channel without room first', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n        socket.on('voice_joined', (data) => {\n          expect(data.channelId).toBe('voice-chat');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Rate Limiting and Performance', () => {\n    test('should maintain performance under load', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        const startTime = Date.now();\n        let operationCount = 0;\n        const targetOperations = 20;\n\n        const performOperation = () => {\n          socket.emit('message', { text: `Load test ${operationCount + 1}` });\n          operationCount++;\n\n          if (operationCount >= targetOperations) {\n            const endTime = Date.now();\n            const duration = endTime - startTime;\n            expect(duration).toBeLessThan(5000); // 5 seconds max\n            socket.disconnect();\n            done();\n          } else {\n            setTimeout(performOperation, 50);\n          }\n        };\n\n        socket.emit('join_room', { room: 'general' });\n        socket.on('online_users', () => {\n          performOperation();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    test('should handle malformed messages gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'general' });\n\n        socket.on('online_users', () => {\n          const malformedMessages = [null, undefined, { text: '' }, { text: '   ' }, {}];\n\n          malformedMessages.forEach((malformed) => {\n            socket.emit('message', malformed);\n          });\n\n          setTimeout(() => {\n            expect(true).toBe(true); // Test passes if no errors thrown\n            socket.disconnect();\n            done();\n          }, 1000);\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}