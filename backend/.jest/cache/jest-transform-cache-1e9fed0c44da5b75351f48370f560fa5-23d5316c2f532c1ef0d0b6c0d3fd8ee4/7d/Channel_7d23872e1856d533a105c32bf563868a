7a2407abb89b34bd92b86dedf0f712c9
const mongoose = require('mongoose');
const channelSchema = new mongoose.Schema({
  id: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  parent: {
    type: String,
    default: null
  },
  type: {
    type: String,
    enum: ['text', 'voice'],
    required: true
  },
  description: {
    type: String,
    maxlength: 500
  },
  position: {
    type: Number,
    default: 0
  },
  createdBy: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  permissions: {
    read: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    },
    write: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    }
  },
  locked: {
    type: Boolean,
    default: false
  }
});

// Indexes
channelSchema.index({
  id: 1,
  type: 1
}); // For channel queries by type
channelSchema.index({
  parent: 1
}); // For nested channels
channelSchema.index({
  position: 1
}); // For ordering

// Update timestamp on save
channelSchema.pre('save', function (next) {
  this.updatedAt = new Date();
  next();
});

// Remove channel method (used for deleting with checks)
channelSchema.methods.safeDelete = async function () {
  // Count messages in this channel
  const messageCount = await mongoose.model('Message').countDocuments({
    channel: this.id
  });
  if (messageCount > 0) {
    throw new Error(`Cannot delete channel with ${messageCount} messages. Channel must be empty or archived.`);
  }
  return this.remove();
};
module.exports = mongoose.model('Channel', channelSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJjaGFubmVsU2NoZW1hIiwiU2NoZW1hIiwiaWQiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJ1bmlxdWUiLCJ0cmltIiwibmFtZSIsIm1heGxlbmd0aCIsInBhcmVudCIsImRlZmF1bHQiLCJlbnVtIiwiZGVzY3JpcHRpb24iLCJwb3NpdGlvbiIsIk51bWJlciIsImNyZWF0ZWRCeSIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJ1cGRhdGVkQXQiLCJwZXJtaXNzaW9ucyIsInJlYWQiLCJ3cml0ZSIsImxvY2tlZCIsIkJvb2xlYW4iLCJpbmRleCIsInByZSIsIm5leHQiLCJtZXRob2RzIiwic2FmZURlbGV0ZSIsIm1lc3NhZ2VDb3VudCIsIm1vZGVsIiwiY291bnREb2N1bWVudHMiLCJjaGFubmVsIiwiRXJyb3IiLCJyZW1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQ2hhbm5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5cbmNvbnN0IGNoYW5uZWxTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcbiAgaWQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdW5pcXVlOiB0cnVlLFxuICAgIHRyaW06IHRydWVcbiAgfSxcbiAgbmFtZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB0cmltOiB0cnVlLFxuICAgIG1heGxlbmd0aDogMTAwXG4gIH0sXG4gIHBhcmVudDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIHR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWyd0ZXh0JywgJ3ZvaWNlJ10sXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgZGVzY3JpcHRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgbWF4bGVuZ3RoOiA1MDBcbiAgfSxcbiAgcG9zaXRpb246IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBjcmVhdGVkQnk6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgY3JlYXRlZEF0OiB7XG4gICAgdHlwZTogRGF0ZSxcbiAgICBkZWZhdWx0OiBEYXRlLm5vd1xuICB9LFxuICB1cGRhdGVkQXQ6IHtcbiAgICB0eXBlOiBEYXRlLFxuICAgIGRlZmF1bHQ6IERhdGUubm93XG4gIH0sXG4gIHBlcm1pc3Npb25zOiB7XG4gICAgcmVhZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZW51bTogWydldmVyeW9uZScsICdhZG1pbiddLFxuICAgICAgZGVmYXVsdDogJ2V2ZXJ5b25lJ1xuICAgIH0sXG4gICAgd3JpdGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGVudW06IFsnZXZlcnlvbmUnLCAnYWRtaW4nXSxcbiAgICAgIGRlZmF1bHQ6ICdldmVyeW9uZSdcbiAgICB9XG4gIH0sXG4gIGxvY2tlZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfVxufSk7XG5cbi8vIEluZGV4ZXNcbmNoYW5uZWxTY2hlbWEuaW5kZXgoeyBpZDogMSwgdHlwZTogMSB9KTsgLy8gRm9yIGNoYW5uZWwgcXVlcmllcyBieSB0eXBlXG5jaGFubmVsU2NoZW1hLmluZGV4KHsgcGFyZW50OiAxIH0pOyAvLyBGb3IgbmVzdGVkIGNoYW5uZWxzXG5jaGFubmVsU2NoZW1hLmluZGV4KHsgcG9zaXRpb246IDEgfSk7IC8vIEZvciBvcmRlcmluZ1xuXG4vLyBVcGRhdGUgdGltZXN0YW1wIG9uIHNhdmVcbmNoYW5uZWxTY2hlbWEucHJlKCdzYXZlJywgZnVuY3Rpb24obmV4dCkge1xuICB0aGlzLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gIG5leHQoKTtcbn0pO1xuXG4vLyBSZW1vdmUgY2hhbm5lbCBtZXRob2QgKHVzZWQgZm9yIGRlbGV0aW5nIHdpdGggY2hlY2tzKVxuY2hhbm5lbFNjaGVtYS5tZXRob2RzLnNhZmVEZWxldGUgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgLy8gQ291bnQgbWVzc2FnZXMgaW4gdGhpcyBjaGFubmVsXG4gIGNvbnN0IG1lc3NhZ2VDb3VudCA9IGF3YWl0IG1vbmdvb3NlLm1vZGVsKCdNZXNzYWdlJykuY291bnREb2N1bWVudHMoeyBjaGFubmVsOiB0aGlzLmlkIH0pO1xuXG4gIGlmIChtZXNzYWdlQ291bnQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVsZXRlIGNoYW5uZWwgd2l0aCAke21lc3NhZ2VDb3VudH0gbWVzc2FnZXMuIENoYW5uZWwgbXVzdCBiZSBlbXB0eSBvciBhcmNoaXZlZC5gKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnJlbW92ZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnQ2hhbm5lbCcsIGNoYW5uZWxTY2hlbWEpOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRXBDLE1BQU1DLGFBQWEsR0FBRyxJQUFJRixRQUFRLENBQUNHLE1BQU0sQ0FBQztFQUN4Q0MsRUFBRSxFQUFFO0lBQ0ZDLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxNQUFNLEVBQUUsSUFBSTtJQUNaQyxJQUFJLEVBQUU7RUFDUixDQUFDO0VBQ0RDLElBQUksRUFBRTtJQUNKTCxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLElBQUk7SUFDZEUsSUFBSSxFQUFFLElBQUk7SUFDVkUsU0FBUyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxNQUFNLEVBQUU7SUFDTlAsSUFBSSxFQUFFQyxNQUFNO0lBQ1pPLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFDRFIsSUFBSSxFQUFFO0lBQ0pBLElBQUks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