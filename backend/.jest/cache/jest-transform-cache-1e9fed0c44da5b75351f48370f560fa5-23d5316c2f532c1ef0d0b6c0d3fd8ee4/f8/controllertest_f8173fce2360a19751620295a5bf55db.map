{"version":3,"names":["request","require","mongoose","MongoMemoryServer","app","User","Channel","mongoServer","describe","beforeAll","create","mongoUri","getUri","connect","findOneAndUpdate","id","name","type","createdBy","upsert","new","afterAll","disconnect","stop","beforeEach","deleteMany","validUserData","nickname","email","password","it","response","post","send","expect","body","toHaveProperty","user","toBe","save","error","toContain","shortNickname","userData","identifier","authToken","loginResponse","token","get","set","Array","isArray","length","toBeGreaterThanOrEqual","hasGeneral","some","ch","hasTestChannel","position","pos0Channel","find","test","options","headers","toBeDefined","requests","i","push","responses","Promise","all","rateLimited","resp","status"],"sources":["controller.test.js"],"sourcesContent":["const request = require('supertest');\nconst mongoose = require('mongoose');\nconst { MongoMemoryServer } = require('mongodb-memory-server');\nconst app = require('../../server');\nconst User = require('../../models/User');\nconst Channel = require('../../models/Channel');\n\nlet mongoServer;\n\ndescribe('API Controllers Integration Tests', () => {\n  beforeAll(async () => {\n    // Start in-memory MongoDB\n    mongoServer = await MongoMemoryServer.create();\n    const mongoUri = mongoServer.getUri();\n    await mongoose.connect(mongoUri);\n\n    // Create default channels\n    await Channel.findOneAndUpdate(\n      { id: 'general' },\n      { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n      { upsert: true, new: true }\n    );\n  });\n\n  afterAll(async () => {\n    await mongoose.disconnect();\n    await mongoServer.stop();\n  });\n\n  beforeEach(async () => {\n    // Clear users but keep channels\n    await User.deleteMany({});\n  });\n\n  describe('POST /api/register', () => {\n    const validUserData = {\n      nickname: 'testuser',\n      email: 'test@example.com',\n      password: 'password123'\n    };\n\n    it('should register a new user successfully', async () => {\n      const response = await request(app)\n        .post('/api/register')\n        .send(validUserData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.nickname).toBe('testuser');\n      expect(response.body.user.email).toBe('test@example.com');\n    });\n\n    it('should return 409 for duplicate nickname', async () => {\n      // Create existing user\n      await new User(validUserData).save();\n\n      const response = await request(app)\n        .post('/api/register')\n        .send(validUserData)\n        .expect(409);\n\n      expect(response.body.error).toContain('already');\n    });\n\n    it('should validate nickname length', async () => {\n      const shortNickname = { ...validUserData, nickname: 'ab' };\n\n      await request(app)\n        .post('/api/register')\n        .send(shortNickname)\n        .expect(400);\n    });\n  });\n\n  describe('POST /api/login', () => {\n    const userData = {\n      nickname: 'loginuser',\n      email: 'login@example.com',\n      password: 'password123'\n    };\n\n    beforeEach(async () => {\n      await new User(userData).save();\n    });\n\n    it('should login with correct credentials', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'loginuser',\n          password: 'password123'\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.nickname).toBe('loginuser');\n    });\n\n    it('should login by email', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'login@example.com',\n          password: 'password123'\n        })\n        .expect(200);\n\n      expect(response.body.user.email).toBe('login@example.com');\n    });\n\n    it('should return 400 for invalid credentials', async () => {\n      await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'loginuser',\n          password: 'wrongpassword'\n        })\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/channels', () => {\n    let authToken;\n\n    beforeEach(async () => {\n      // Create user for authentication\n      const user = await new User({\n        nickname: 'channeluser',\n        email: 'channel@example.com',\n        password: 'password123'\n      }).save();\n\n      // Login to get token\n      const loginResponse = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'channeluser',\n          password: 'password123'\n        });\n\n      authToken = loginResponse.body.token;\n\n      // Create additional test channel\n      await new Channel({\n        id: 'testchannel',\n        name: 'Test Channel',\n        type: 'text',\n        createdBy: 'channeluser'\n      }).save();\n    });\n\n    it('should return channels list for authenticated user', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThanOrEqual(2); // At least general + testchannel\n\n      const hasGeneral = response.body.some(ch => ch.id === 'general');\n      const hasTestChannel = response.body.some(ch => ch.id === 'testchannel');\n\n      expect(hasGeneral).toBe(true);\n      expect(hasTestChannel).toBe(true);\n    });\n\n    it('should return 401 without authentication', async () => {\n      await request(app)\n        .get('/api/channels')\n        .expect(401);\n    });\n\n    it('should return channels sorted by position', async () => {\n      // Create channel with position 0\n      await new Channel({\n        id: 'pos0',\n        name: 'Position 0',\n        type: 'text',\n        createdBy: 'channeluser',\n        position: 0\n      }).save();\n\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Find the pos0 channel\n      const pos0Channel = response.body.find(ch => ch.id === 'pos0');\n      expect(pos0Channel.position).toBe(0);\n    });\n  });\n});\n\ndescribe('Server Configuration & Middleware', () => {\n  test('should have CORS enabled', async () => {\n    const response = await request(app)\n      .options('/api/health')\n      .set('Origin', 'http://localhost:3000')\n      .expect(204);\n\n    expect(response.headers['access-control-allow-origin']).toBeDefined();\n  });\n\n  test('should have rate limiting configured', async () => {\n    const requests = [];\n    for (let i = 0; i < 6; i++) {\n      requests.push(\n        request(app)\n          .post('/api/login')\n          .send({ identifier: 'test', password: 'test' })\n      );\n    }\n\n    const responses = await Promise.all(requests);\n\n    // Some should be rate limited (429)\n    const rateLimited = responses.some(resp => resp.status === 429);\n    expect(rateLimited).toBe(true);\n  });\n\n  test('should serve health check endpoint', async () => {\n    const response = await request(app)\n      .get('/health')\n      .expect(200);\n\n    expect(response.body).toHaveProperty('status', 'healthy');\n    expect(response.body).toHaveProperty('uptime');\n    expect(response.body).toHaveProperty('timestamp');\n  });\n});"],"mappings":"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","ignoreList":[]}