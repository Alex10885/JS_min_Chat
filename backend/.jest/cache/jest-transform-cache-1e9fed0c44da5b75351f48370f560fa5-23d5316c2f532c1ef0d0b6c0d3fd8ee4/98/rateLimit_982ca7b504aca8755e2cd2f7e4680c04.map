{"version":3,"names":["cov_hy7z8td6s","actualCoverage","rateLimit","s","require","config","progressiveDelay","attempts","f","b","authRateLimiter","windowMs","max","req","isAuthenticated","user","session","authenticated","geoMultiplier","baseLimit","maxAuthAuthenticated","maxAuthAnonymous","Math","floor","message","res","remainingHit","delay","maxAuth","error","attemptsLeft","standardHeaders","legacyHeaders","skip","get","includes","handler","next","options","setTimeout","status","statusCode","json","apiRateLimiter","hasModeratorPrivileges","role","hasAdminPrivileges","maxApi","keyGenerator","ip","id","userId","generalRateLimiter","maxGeneral","passwordResetRateLimiter","maxPasswordReset","module","exports"],"sources":["rateLimit.js"],"sourcesContent":["const rateLimit = require('express-rate-limit');\nconst config = require('./index');\n\n// Progressive delay for failed authentication attempts\nconst progressiveDelay = (attempts) => {\n  if (attempts < 3) return 0; // No delay for first 2 attempts\n  if (attempts < 5) return 1000; // 1 second delay\n  if (attempts < 8) return 5000; // 5 seconds delay\n  return 15000; // 15 seconds delay for >7 failed attempts\n};\n\n// Enhanced auth rate limiter with progressive delay\nconst authRateLimiter = rateLimit({\n  windowMs: config.rateLimit.windowMs,\n  max: (req) => {\n    const isAuthenticated = req.user || (req.session && req.session.authenticated);\n    const geoMultiplier = req.geoMultiplier || 1.0; // Geographic suspicion factor\n\n    let baseLimit = isAuthenticated ? config.rateLimit.maxAuthAuthenticated : config.rateLimit.maxAuthAnonymous;\n\n    // Apply geographic multiplier (lower limits for suspicious regions)\n    if (geoMultiplier > 1.0) {\n      baseLimit = Math.max(1, Math.floor(baseLimit / geoMultiplier));\n    }\n\n    return baseLimit;\n  },\n  message: (req, res) => {\n    const attempts = req.rateLimit?.remainingHit || 0;\n    const delay = progressiveDelay(config.rateLimit.maxAuth - attempts);\n    return {\n      error: 'Too many authentication attempts, please try again later.',\n      delay: delay,\n      attemptsLeft: attempts\n    };\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skip: (req) => {\n    return req.get('User-Agent') && req.get('User-Agent').includes('Cypress');\n  },\n  handler: (req, res, next, options) => {\n    const delay = progressiveDelay(config.rateLimit.maxAuth - (req.rateLimit?.remainingHit || 0));\n    if (delay > 0) {\n      setTimeout(() => {\n        res.status(options.statusCode).json(options.message);\n      }, delay);\n    } else {\n      res.status(options.statusCode).json(options.message);\n    }\n  }\n});\n\nconst apiRateLimiter = rateLimit({\n  windowMs: config.rateLimit.windowMs,\n  max: (req) => {\n    const isAuthenticated = req.user || (req.session && req.session.authenticated);\n    const hasModeratorPrivileges = isAuthenticated && req.user?.role === 'moderator';\n    const hasAdminPrivileges = isAuthenticated && req.user?.role === 'admin';\n\n    if (hasAdminPrivileges) return config.rateLimit.maxApi * 2; // Higher limit for admins\n    if (hasModeratorPrivileges) return config.rateLimit.maxApi * 1.5; // Higher limit for moderators\n    if (isAuthenticated) return config.rateLimit.maxApi; // Standard authenticated users\n    return config.rateLimit.maxApi / 4; // Lower limit for anonymous users\n  },\n  message: { error: 'Too many API requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => {\n    // Include session fingerprint or IP for anonymous users\n    const isAuthenticated = req.user || (req.session && req.session.authenticated);\n    return isAuthenticated\n      ? `${req.ip}:${req.user?.id || req.session?.userId}`\n      : req.ip;\n  }\n});\n\nconst generalRateLimiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: config.rateLimit.maxGeneral,\n  message: { error: 'Too many requests from this IP, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst passwordResetRateLimiter = rateLimit({\n  windowMs: config.rateLimit.windowMs,\n  max: config.rateLimit.maxPasswordReset,\n  message: { error: 'Too many password reset requests, please try again later.' },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nmodule.exports = {\n  authRateLimiter,\n  apiRateLimiter,\n  generalRateLimiter,\n  passwordResetRateLimiter\n};"],"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","ignoreList":[]}