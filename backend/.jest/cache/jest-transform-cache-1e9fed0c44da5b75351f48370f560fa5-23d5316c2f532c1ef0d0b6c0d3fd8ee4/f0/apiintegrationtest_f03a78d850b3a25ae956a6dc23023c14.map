{"version":3,"names":["request","require","mongoose","TestFixtures","app","server","closeDB","beforeAll","serverModule","closeDBFn","afterAll","connection","dropDatabase","close","describe","it","response","post","send","nickname","email","password","expect","body","toHaveProperty","user","Array","isArray","errors","toBe","testUser","accessToken","regResponse","token","identifier","get","set","forEach","channel","channelNames","map","ch","name","toContain","toEqual","arrayContaining","headers","toMatch","options","authRequests","i","push","results","Promise","all","limitedRequest","find","res","status","toBeDefined","uptime","module","exports"],"sources":["api.integration.test.js"],"sourcesContent":["const request = require('supertest');\nconst mongoose = require('mongoose');\nconst { TestFixtures } = require('../shared/testFixtures');\n\n// Import server module - we'll mock the startup process for tests\nlet app, server, closeDB;\n\nbeforeAll(async () => {\n  // Dynamically import server components to avoid startup issues in test environment\n  const serverModule = require('../../server');\n  app = require('../../server.js'); // Get express app instance\n\n  // Extract mongoose connection for cleanup\n  const { closeDB: closeDBFn } = require('../../db/connection');\n  closeDB = closeDBFn;\n});\n\nafterAll(async () => {\n  // Clean up test database and close connections\n  await mongoose.connection.dropDatabase();\n  await closeDB();\n  if (server) {\n    server.close();\n  }\n});\n\ndescribe('REST API Integration Tests', () => {\n  describe('POST /api/register', () => {\n    it('should successfully register a new user', async () => {\n      const response = await request(app)\n        .post('/api/register')\n        .send({\n          nickname: 'testuser123',\n          email: 'test123@example.com',\n          password: 'testpass123'\n        })\n        .expect(201);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toHaveProperty('nickname', 'testuser123');\n      expect(response.body.user).toHaveProperty('email', 'test123@example.com');\n      expect(response.body.user).toHaveProperty('role', 'member');\n    });\n\n    it('should return validation errors for invalid input', async () => {\n      const response = await request(app)\n        .post('/api/register')\n        .send({\n          nickname: 'a', // too short\n          email: 'invalid-email',\n          password: '123' // too short\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n      expect(Array.isArray(response.body.errors)).toBe(true);\n    });\n\n    it('should prevent duplicate user registration', async () => {\n      // Register first user\n      await request(app)\n        .post('/api/register')\n        .send({\n          nickname: 'duplicate_user',\n          email: 'duplicate@example.com',\n          password: 'testpass123'\n        })\n        .expect(201);\n\n      // Try to register duplicate\n      const response = await request(app)\n        .post('/api/register')\n        .send({\n          nickname: 'different_nick',\n          email: 'duplicate@example.com',\n          password: 'testpass123'\n        })\n        .expect(409);\n\n      expect(response.body).toHaveProperty('error');\n    });\n  });\n\n  describe('POST /api/login', () => {\n    let testUser, accessToken;\n\n    beforeAll(async () => {\n      // Register a test user first\n      const regResponse = await request(app)\n        .post('/api/register')\n        .send({\n          nickname: 'login_test_user',\n          email: 'login_test@example.com',\n          password: 'testpass123'\n        })\n        .expect(201);\n\n      testUser = regResponse.body.user;\n      accessToken = regResponse.body.token;\n    });\n\n    it('should successfully authenticate existing user by nickname', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'login_test_user',\n          password: 'testpass123'\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.nickname).toBe('login_test_user');\n    });\n\n    it('should successfully authenticate existing user by email', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'login_test@example.com',\n          password: 'testpass123'\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n    });\n\n    it('should reject invalid credentials', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'login_test_user',\n          password: 'wrongpassword'\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Invalid credentials');\n    });\n\n    it('should reject non-existent user', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'nonexistent_user',\n          password: 'password123'\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Invalid credentials');\n    });\n  });\n\n  describe('GET /api/channels', () => {\n    let accessToken;\n\n    beforeAll(async () => {\n      // Register and login to get token\n      const regResponse = await request(app)\n        .post('/api/register')\n        .send({\n          nickname: 'channel_test_user',\n          email: 'channel_test@example.com',\n          password: 'testpass123'\n        })\n        .expect(201);\n\n      accessToken = regResponse.body.token;\n    });\n\n    it('should return channels list with valid JWT', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      response.body.forEach(channel => {\n        expect(channel).toHaveProperty('id');\n        expect(channel).toHaveProperty('name');\n        expect(channel).toHaveProperty('type');\n        expect(channel).toHaveProperty('createdBy');\n      });\n    });\n\n    it('should include default channels (General, Voice Chat)', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      const channelNames = response.body.map(ch => ch.name);\n      expect(channelNames).toContain('General');\n      expect(channelNames).toEqual(expect.arrayContaining(['General']));\n    });\n\n    it('should reject unauthorized request', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Access token required');\n    });\n\n    it('should reject request with invalid JWT', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', 'Bearer invalid.jwt.token')\n        .expect(401);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle malformed JSON in request body', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json: \"missing quotes\" }')\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should handle requests with missing content-type', async () => {\n      const response = await request(app)\n        .post('/api/login')\n        .send('nickname=test&password=test') // form data without proper content-type\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should return 404 for non-existent endpoints', async () => {\n      const response = await request(app)\n        .get('/api/non-existent-endpoint')\n        .expect(404);\n\n      expect(response.body).toHaveProperty('error', 'Endpoint not found');\n    });\n  });\n\n  describe('Security Headers and CORS', () => {\n    it('should set proper security headers', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n\n      // Check Content Security Policy\n      expect(response.headers).toHaveProperty('content-security-policy');\n      expect(response.headers['content-security-policy']).toMatch(/default-src 'self'/);\n\n      // Check Helmet security headers\n      expect(response.headers).toHaveProperty('x-content-type-options');\n      expect(response.headers['x-content-type-options']).toBe('nosniff');\n    });\n\n    it('should handle CORS properly', async () => {\n      const response = await request(app)\n        .options('/api/channels')\n        .set('Origin', 'http://localhost:3000')\n        .set('Access-Control-Request-Method', 'GET')\n        .expect(200);\n\n      expect(response.headers).toHaveProperty('access-control-allow-origin');\n      expect(response.headers).toHaveProperty('access-control-allow-methods');\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should enforce auth rate limiting', async () => {\n      const authRequests = [];\n      for (let i = 0; i < 6; i++) {\n        authRequests.push(\n          request(app)\n            .post('/api/login')\n            .send({\n              identifier: 'test',\n              password: 'test'\n            })\n        );\n      }\n\n      const results = await Promise.all(authRequests);\n      const limitedRequest = results.find(res => res.status === 429);\n\n      expect(limitedRequest).toBeDefined();\n      expect(limitedRequest.body).toHaveProperty('error');\n    });\n  });\n\n  describe('Health Check Endpoint', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status', 'healthy');\n      expect(response.body).toHaveProperty('timestamp');\n      expect(response.body).toHaveProperty('uptime');\n      expect(typeof response.body.uptime).toBe('number');\n    });\n  });\n});\n\n// Export for external test runners\nmodule.exports = { app };"],"mappings":"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","ignoreList":[]}