3658ebd0d8ca9693ec492699e3dd913c
const request = require('supertest');
const mongoose = require('mongoose');
const {
  TestFixtures
} = require('../shared/testFixtures');

// Import server module - we'll mock the startup process for tests
let app, server, closeDB;
beforeAll(async () => {
  // Dynamically import server components to avoid startup issues in test environment
  const serverModule = require('../../server');
  app = require('../../server.js'); // Get express app instance

  // Extract mongoose connection for cleanup
  const {
    closeDB: closeDBFn
  } = require('../../db/connection');
  closeDB = closeDBFn;
});
afterAll(async () => {
  // Clean up test database and close connections
  await mongoose.connection.dropDatabase();
  await closeDB();
  if (server) {
    server.close();
  }
});
describe('REST API Integration Tests', () => {
  describe('POST /api/register', () => {
    it('should successfully register a new user', async () => {
      const response = await request(app).post('/api/register').send({
        nickname: 'testuser123',
        email: 'test123@example.com',
        password: 'testpass123'
      }).expect(201);
      expect(response.body).toHaveProperty('token');
      expect(response.body).toHaveProperty('user');
      expect(response.body.user).toHaveProperty('nickname', 'testuser123');
      expect(response.body.user).toHaveProperty('email', 'test123@example.com');
      expect(response.body.user).toHaveProperty('role', 'member');
    });
    it('should return validation errors for invalid input', async () => {
      const response = await request(app).post('/api/register').send({
        nickname: 'a',
        // too short
        email: 'invalid-email',
        password: '123' // too short
      }).expect(400);
      expect(response.body).toHaveProperty('errors');
      expect(Array.isArray(response.body.errors)).toBe(true);
    });
    it('should prevent duplicate user registration', async () => {
      // Register first user
      await request(app).post('/api/register').send({
        nickname: 'duplicate_user',
        email: 'duplicate@example.com',
        password: 'testpass123'
      }).expect(201);

      // Try to register duplicate
      const response = await request(app).post('/api/register').send({
        nickname: 'different_nick',
        email: 'duplicate@example.com',
        password: 'testpass123'
      }).expect(409);
      expect(response.body).toHaveProperty('error');
    });
  });
  describe('POST /api/login', () => {
    let testUser, accessToken;
    beforeAll(async () => {
      // Register a test user first
      const regResponse = await request(app).post('/api/register').send({
        nickname: 'login_test_user',
        email: 'login_test@example.com',
        password: 'testpass123'
      }).expect(201);
      testUser = regResponse.body.user;
      accessToken = regResponse.body.token;
    });
    it('should successfully authenticate existing user by nickname', async () => {
      const response = await request(app).post('/api/login').send({
        identifier: 'login_test_user',
        password: 'testpass123'
      }).expect(200);
      expect(response.body).toHaveProperty('token');
      expect(response.body).toHaveProperty('user');
      expect(response.body.user.nickname).toBe('login_test_user');
    });
    it('should successfully authenticate existing user by email', async () => {
      const response = await request(app).post('/api/login').send({
        identifier: 'login_test@example.com',
        password: 'testpass123'
      }).expect(200);
      expect(response.body).toHaveProperty('token');
      expect(response.body).toHaveProperty('user');
    });
    it('should reject invalid credentials', async () => {
      const response = await request(app).post('/api/login').send({
        identifier: 'login_test_user',
        password: 'wrongpassword'
      }).expect(400);
      expect(response.body).toHaveProperty('error', 'Invalid credentials');
    });
    it('should reject non-existent user', async () => {
      const response = await request(app).post('/api/login').send({
        identifier: 'nonexistent_user',
        password: 'password123'
      }).expect(400);
      expect(response.body).toHaveProperty('error', 'Invalid credentials');
    });
  });
  describe('GET /api/channels', () => {
    let accessToken;
    beforeAll(async () => {
      // Register and login to get token
      const regResponse = await request(app).post('/api/register').send({
        nickname: 'channel_test_user',
        email: 'channel_test@example.com',
        password: 'testpass123'
      }).expect(201);
      accessToken = regResponse.body.token;
    });
    it('should return channels list with valid JWT', async () => {
      const response = await request(app).get('/api/channels').set('Authorization', `Bearer ${accessToken}`).expect(200);
      expect(Array.isArray(response.body)).toBe(true);
      response.body.forEach(channel => {
        expect(channel).toHaveProperty('id');
        expect(channel).toHaveProperty('name');
        expect(channel).toHaveProperty('type');
        expect(channel).toHaveProperty('createdBy');
      });
    });
    it('should include default channels (General, Voice Chat)', async () => {
      const response = await request(app).get('/api/channels').set('Authorization', `Bearer ${accessToken}`).expect(200);
      const channelNames = response.body.map(ch => ch.name);
      expect(channelNames).toContain('General');
      expect(channelNames).toEqual(expect.arrayContaining(['General']));
    });
    it('should reject unauthorized request', async () => {
      const response = await request(app).get('/api/channels').expect(401);
      expect(response.body).toHaveProperty('error', 'Access token required');
    });
    it('should reject request with invalid JWT', async () => {
      const response = await request(app).get('/api/channels').set('Authorization', 'Bearer invalid.jwt.token').expect(401);
    });
  });
  describe('Error Handling and Edge Cases', () => {
    it('should handle malformed JSON in request body', async () => {
      const response = await request(app).post('/api/login').set('Content-Type', 'application/json').send('{ invalid json: "missing quotes" }').expect(400);
      expect(response.body).toHaveProperty('error');
    });
    it('should handle requests with missing content-type', async () => {
      const response = await request(app).post('/api/login').send('nickname=test&password=test') // form data without proper content-type
      .expect(400);
      expect(response.body).toHaveProperty('error');
    });
    it('should return 404 for non-existent endpoints', async () => {
      const response = await request(app).get('/api/non-existent-endpoint').expect(404);
      expect(response.body).toHaveProperty('error', 'Endpoint not found');
    });
  });
  describe('Security Headers and CORS', () => {
    it('should set proper security headers', async () => {
      const response = await request(app).get('/health').expect(200);

      // Check Content Security Policy
      expect(response.headers).toHaveProperty('content-security-policy');
      expect(response.headers['content-security-policy']).toMatch(/default-src 'self'/);

      // Check Helmet security headers
      expect(response.headers).toHaveProperty('x-content-type-options');
      expect(response.headers['x-content-type-options']).toBe('nosniff');
    });
    it('should handle CORS properly', async () => {
      const response = await request(app).options('/api/channels').set('Origin', 'http://localhost:3000').set('Access-Control-Request-Method', 'GET').expect(200);
      expect(response.headers).toHaveProperty('access-control-allow-origin');
      expect(response.headers).toHaveProperty('access-control-allow-methods');
    });
  });
  describe('Rate Limiting', () => {
    it('should enforce auth rate limiting', async () => {
      const authRequests = [];
      for (let i = 0; i < 6; i++) {
        authRequests.push(request(app).post('/api/login').send({
          identifier: 'test',
          password: 'test'
        }));
      }
      const results = await Promise.all(authRequests);
      const limitedRequest = results.find(res => res.status === 429);
      expect(limitedRequest).toBeDefined();
      expect(limitedRequest.body).toHaveProperty('error');
    });
  });
  describe('Health Check Endpoint', () => {
    it('should return health status', async () => {
      const response = await request(app).get('/health').expect(200);
      expect(response.body).toHaveProperty('status', 'healthy');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('uptime');
      expect(typeof response.body.uptime).toBe('number');
    });
  });
});

// Export for external test runners
module.exports = {
  app
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiVGVzdEZpeHR1cmVzIiwiYXBwIiwic2VydmVyIiwiY2xvc2VEQiIsImJlZm9yZUFsbCIsInNlcnZlck1vZHVsZSIsImNsb3NlREJGbiIsImFmdGVyQWxsIiwiY29ubmVjdGlvbiIsImRyb3BEYXRhYmFzZSIsImNsb3NlIiwiZGVzY3JpYmUiLCJpdCIsInJlc3BvbnNlIiwicG9zdCIsInNlbmQiLCJuaWNrbmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJleHBlY3QiLCJib2R5IiwidG9IYXZlUHJvcGVydHkiLCJ1c2VyIiwiQXJyYXkiLCJpc0FycmF5IiwiZXJyb3JzIiwidG9CZSIsInRlc3RVc2VyIiwiYWNjZXNzVG9rZW4iLCJyZWdSZXNwb25zZSIsInRva2VuIiwiaWRlbnRpZmllciIsImdldCIsInNldCIsImZvckVhY2giLCJjaGFubmVsIiwiY2hhbm5lbE5hbWVzIiwibWFwIiwiY2giLCJuYW1lIiwidG9Db250YWluIiwidG9FcXVhbCIsImFycmF5Q29udGFpbmluZyIsImhlYWRlcnMiLCJ0b01hdGNoIiwib3B0aW9ucyIsImF1dGhSZXF1ZXN0cyIsImkiLCJwdXNoIiwicmVzdWx0cyIsIlByb21pc2UiLCJhbGwiLCJsaW1pdGVkUmVxdWVzdCIsImZpbmQiLCJyZXMiLCJzdGF0dXMiLCJ0b0JlRGVmaW5lZCIsInVwdGltZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhcGkuaW50ZWdyYXRpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IFRlc3RGaXh0dXJlcyB9ID0gcmVxdWlyZSgnLi4vc2hhcmVkL3Rlc3RGaXh0dXJlcycpO1xuXG4vLyBJbXBvcnQgc2VydmVyIG1vZHVsZSAtIHdlJ2xsIG1vY2sgdGhlIHN0YXJ0dXAgcHJvY2VzcyBmb3IgdGVzdHNcbmxldCBhcHAsIHNlcnZlciwgY2xvc2VEQjtcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgLy8gRHluYW1pY2FsbHkgaW1wb3J0IHNlcnZlciBjb21wb25lbnRzIHRvIGF2b2lkIHN0YXJ0dXAgaXNzdWVzIGluIHRlc3QgZW52aXJvbm1lbnRcbiAgY29uc3Qgc2VydmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vLi4vc2VydmVyJyk7XG4gIGFwcCA9IHJlcXVpcmUoJy4uLy4uL3NlcnZlci5qcycpOyAvLyBHZXQgZXhwcmVzcyBhcHAgaW5zdGFuY2VcblxuICAvLyBFeHRyYWN0IG1vbmdvb3NlIGNvbm5lY3Rpb24gZm9yIGNsZWFudXBcbiAgY29uc3QgeyBjbG9zZURCOiBjbG9zZURCRm4gfSA9IHJlcXVpcmUoJy4uLy4uL2RiL2Nvbm5lY3Rpb24nKTtcbiAgY2xvc2VEQiA9IGNsb3NlREJGbjtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIC8vIENsZWFuIHVwIHRlc3QgZGF0YWJhc2UgYW5kIGNsb3NlIGNvbm5lY3Rpb25zXG4gIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uZHJvcERhdGFiYXNlKCk7XG4gIGF3YWl0IGNsb3NlREIoKTtcbiAgaWYgKHNlcnZlcikge1xuICAgIHNlcnZlci5jbG9zZSgpO1xuICB9XG59KTtcblxuZGVzY3JpYmUoJ1JFU1QgQVBJIEludGVncmF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnUE9TVCAvYXBpL3JlZ2lzdGVyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyIGEgbmV3IHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9yZWdpc3RlcicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBuaWNrbmFtZTogJ3Rlc3R1c2VyMTIzJyxcbiAgICAgICAgICBlbWFpbDogJ3Rlc3QxMjNAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd0b2tlbicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd1c2VyJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS51c2VyKS50b0hhdmVQcm9wZXJ0eSgnbmlja25hbWUnLCAndGVzdHVzZXIxMjMnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnVzZXIpLnRvSGF2ZVByb3BlcnR5KCdlbWFpbCcsICd0ZXN0MTIzQGV4YW1wbGUuY29tJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS51c2VyKS50b0hhdmVQcm9wZXJ0eSgncm9sZScsICdtZW1iZXInKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHZhbGlkYXRpb24gZXJyb3JzIGZvciBpbnZhbGlkIGlucHV0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgbmlja25hbWU6ICdhJywgLy8gdG9vIHNob3J0XG4gICAgICAgICAgZW1haWw6ICdpbnZhbGlkLWVtYWlsJyxcbiAgICAgICAgICBwYXNzd29yZDogJzEyMycgLy8gdG9vIHNob3J0XG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcnMnKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlc3BvbnNlLmJvZHkuZXJyb3JzKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJldmVudCBkdXBsaWNhdGUgdXNlciByZWdpc3RyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBSZWdpc3RlciBmaXJzdCB1c2VyXG4gICAgICBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgbmlja25hbWU6ICdkdXBsaWNhdGVfdXNlcicsXG4gICAgICAgICAgZW1haWw6ICdkdXBsaWNhdGVAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAxKTtcblxuICAgICAgLy8gVHJ5IHRvIHJlZ2lzdGVyIGR1cGxpY2F0ZVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgbmlja25hbWU6ICdkaWZmZXJlbnRfbmljaycsXG4gICAgICAgICAgZW1haWw6ICdkdXBsaWNhdGVAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoNDA5KTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUE9TVCAvYXBpL2xvZ2luJywgKCkgPT4ge1xuICAgIGxldCB0ZXN0VXNlciwgYWNjZXNzVG9rZW47XG5cbiAgICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gUmVnaXN0ZXIgYSB0ZXN0IHVzZXIgZmlyc3RcbiAgICAgIGNvbnN0IHJlZ1Jlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIG5pY2tuYW1lOiAnbG9naW5fdGVzdF91c2VyJyxcbiAgICAgICAgICBlbWFpbDogJ2xvZ2luX3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAxKTtcblxuICAgICAgdGVzdFVzZXIgPSByZWdSZXNwb25zZS5ib2R5LnVzZXI7XG4gICAgICBhY2Nlc3NUb2tlbiA9IHJlZ1Jlc3BvbnNlLmJvZHkudG9rZW47XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGUgZXhpc3RpbmcgdXNlciBieSBuaWNrbmFtZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2xvZ2luJylcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIGlkZW50aWZpZXI6ICdsb2dpbl90ZXN0X3VzZXInLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd0b2tlbicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd1c2VyJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS51c2VyLm5pY2tuYW1lKS50b0JlKCdsb2dpbl90ZXN0X3VzZXInKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZSBleGlzdGluZyB1c2VyIGJ5IGVtYWlsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvbG9naW4nKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgaWRlbnRpZmllcjogJ2xvZ2luX3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd0b2tlbicpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd1c2VyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIGNyZWRlbnRpYWxzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvbG9naW4nKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgaWRlbnRpZmllcjogJ2xvZ2luX3Rlc3RfdXNlcicsXG4gICAgICAgICAgcGFzc3dvcmQ6ICd3cm9uZ3Bhc3N3b3JkJ1xuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3InLCAnSW52YWxpZCBjcmVkZW50aWFscycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3Qgbm9uLWV4aXN0ZW50IHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9sb2dpbicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBpZGVudGlmaWVyOiAnbm9uZXhpc3RlbnRfdXNlcicsXG4gICAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMydcbiAgICAgICAgfSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9IYXZlUHJvcGVydHkoJ2Vycm9yJywgJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL2NoYW5uZWxzJywgKCkgPT4ge1xuICAgIGxldCBhY2Nlc3NUb2tlbjtcblxuICAgIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgICAvLyBSZWdpc3RlciBhbmQgbG9naW4gdG8gZ2V0IHRva2VuXG4gICAgICBjb25zdCByZWdSZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9yZWdpc3RlcicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBuaWNrbmFtZTogJ2NoYW5uZWxfdGVzdF91c2VyJyxcbiAgICAgICAgICBlbWFpbDogJ2NoYW5uZWxfdGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgcGFzc3dvcmQ6ICd0ZXN0cGFzczEyMydcbiAgICAgICAgfSlcbiAgICAgICAgLmV4cGVjdCgyMDEpO1xuXG4gICAgICBhY2Nlc3NUb2tlbiA9IHJlZ1Jlc3BvbnNlLmJvZHkudG9rZW47XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBjaGFubmVscyBsaXN0IHdpdGggdmFsaWQgSldUJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9jaGFubmVscycpXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YWNjZXNzVG9rZW59YClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXNwb25zZS5ib2R5KSkudG9CZSh0cnVlKTtcbiAgICAgIHJlc3BvbnNlLmJvZHkuZm9yRWFjaChjaGFubmVsID0+IHtcbiAgICAgICAgZXhwZWN0KGNoYW5uZWwpLnRvSGF2ZVByb3BlcnR5KCdpZCcpO1xuICAgICAgICBleHBlY3QoY2hhbm5lbCkudG9IYXZlUHJvcGVydHkoJ25hbWUnKTtcbiAgICAgICAgZXhwZWN0KGNoYW5uZWwpLnRvSGF2ZVByb3BlcnR5KCd0eXBlJyk7XG4gICAgICAgIGV4cGVjdChjaGFubmVsKS50b0hhdmVQcm9wZXJ0eSgnY3JlYXRlZEJ5Jyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jbHVkZSBkZWZhdWx0IGNoYW5uZWxzIChHZW5lcmFsLCBWb2ljZSBDaGF0KScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvY2hhbm5lbHMnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FjY2Vzc1Rva2VufWApXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgY29uc3QgY2hhbm5lbE5hbWVzID0gcmVzcG9uc2UuYm9keS5tYXAoY2ggPT4gY2gubmFtZSk7XG4gICAgICBleHBlY3QoY2hhbm5lbE5hbWVzKS50b0NvbnRhaW4oJ0dlbmVyYWwnKTtcbiAgICAgIGV4cGVjdChjaGFubmVsTmFtZXMpLnRvRXF1YWwoZXhwZWN0LmFycmF5Q29udGFpbmluZyhbJ0dlbmVyYWwnXSkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgdW5hdXRob3JpemVkIHJlcXVlc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL2NoYW5uZWxzJylcbiAgICAgICAgLmV4cGVjdCg0MDEpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9IYXZlUHJvcGVydHkoJ2Vycm9yJywgJ0FjY2VzcyB0b2tlbiByZXF1aXJlZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgcmVxdWVzdCB3aXRoIGludmFsaWQgSldUJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9jaGFubmVscycpXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyIGludmFsaWQuand0LnRva2VuJylcbiAgICAgICAgLmV4cGVjdCg0MDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcgYW5kIEVkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbWFsZm9ybWVkIEpTT04gaW4gcmVxdWVzdCBib2R5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvbG9naW4nKVxuICAgICAgICAuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgIC5zZW5kKCd7IGludmFsaWQganNvbjogXCJtaXNzaW5nIHF1b3Rlc1wiIH0nKVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3InKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlcXVlc3RzIHdpdGggbWlzc2luZyBjb250ZW50LXR5cGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9sb2dpbicpXG4gICAgICAgIC5zZW5kKCduaWNrbmFtZT10ZXN0JnBhc3N3b3JkPXRlc3QnKSAvLyBmb3JtIGRhdGEgd2l0aG91dCBwcm9wZXIgY29udGVudC10eXBlXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gNDA0IGZvciBub24tZXhpc3RlbnQgZW5kcG9pbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2FwaS9ub24tZXhpc3RlbnQtZW5kcG9pbnQnKVxuICAgICAgICAuZXhwZWN0KDQwNCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3InLCAnRW5kcG9pbnQgbm90IGZvdW5kJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTZWN1cml0eSBIZWFkZXJzIGFuZCBDT1JTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2V0IHByb3BlciBzZWN1cml0eSBoZWFkZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmdldCgnL2hlYWx0aCcpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gQ2hlY2sgQ29udGVudCBTZWN1cml0eSBQb2xpY3lcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzKS50b0hhdmVQcm9wZXJ0eSgnY29udGVudC1zZWN1cml0eS1wb2xpY3knKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LXNlY3VyaXR5LXBvbGljeSddKS50b01hdGNoKC9kZWZhdWx0LXNyYyAnc2VsZicvKTtcblxuICAgICAgLy8gQ2hlY2sgSGVsbWV0IHNlY3VyaXR5IGhlYWRlcnNcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzKS50b0hhdmVQcm9wZXJ0eSgneC1jb250ZW50LXR5cGUtb3B0aW9ucycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnNbJ3gtY29udGVudC10eXBlLW9wdGlvbnMnXSkudG9CZSgnbm9zbmlmZicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgQ09SUyBwcm9wZXJseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5vcHRpb25zKCcvYXBpL2NoYW5uZWxzJylcbiAgICAgICAgLnNldCgnT3JpZ2luJywgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcpXG4gICAgICAgIC5zZXQoJ0FjY2Vzcy1Db250cm9sLVJlcXVlc3QtTWV0aG9kJywgJ0dFVCcpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnMpLnRvSGF2ZVByb3BlcnR5KCdhY2Nlc3MtY29udHJvbC1hbGxvdy1vcmlnaW4nKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzKS50b0hhdmVQcm9wZXJ0eSgnYWNjZXNzLWNvbnRyb2wtYWxsb3ctbWV0aG9kcycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmF0ZSBMaW1pdGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGVuZm9yY2UgYXV0aCByYXRlIGxpbWl0aW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXV0aFJlcXVlc3RzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICBhdXRoUmVxdWVzdHMucHVzaChcbiAgICAgICAgICByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgIC5wb3N0KCcvYXBpL2xvZ2luJylcbiAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgaWRlbnRpZmllcjogJ3Rlc3QnLFxuICAgICAgICAgICAgICBwYXNzd29yZDogJ3Rlc3QnXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYXV0aFJlcXVlc3RzKTtcbiAgICAgIGNvbnN0IGxpbWl0ZWRSZXF1ZXN0ID0gcmVzdWx0cy5maW5kKHJlcyA9PiByZXMuc3RhdHVzID09PSA0MjkpO1xuXG4gICAgICBleHBlY3QobGltaXRlZFJlcXVlc3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobGltaXRlZFJlcXVlc3QuYm9keSkudG9IYXZlUHJvcGVydHkoJ2Vycm9yJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdIZWFsdGggQ2hlY2sgRW5kcG9pbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gaGVhbHRoIHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9oZWFsdGgnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJywgJ2hlYWx0aHknKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9IYXZlUHJvcGVydHkoJ3VwdGltZScpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXNwb25zZS5ib2R5LnVwdGltZSkudG9CZSgnbnVtYmVyJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbi8vIEV4cG9ydCBmb3IgZXh0ZXJuYWwgdGVzdCBydW5uZXJzXG5tb2R1bGUuZXhwb3J0cyA9IHsgYXBwIH07Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDcEMsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU07RUFBRUU7QUFBYSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQzs7QUFFMUQ7QUFDQSxJQUFJRyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztBQUV4QkMsU0FBUyxDQUFDLFlBQVk7RUFDcEI7RUFDQSxNQUFNQyxZQUFZLEdBQUdQLE9BQU8sQ0FBQyxj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