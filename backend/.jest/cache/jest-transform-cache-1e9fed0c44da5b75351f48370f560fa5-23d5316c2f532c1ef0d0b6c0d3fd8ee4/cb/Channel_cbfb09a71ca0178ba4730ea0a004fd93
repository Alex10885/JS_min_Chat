bdd58756c4f1b4844b20c70de12cced2
const mongoose = require('mongoose');
const channelSchema = new mongoose.Schema({
  id: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  parent: {
    type: String,
    default: null
  },
  type: {
    type: String,
    enum: ['text', 'voice'],
    required: true
  },
  description: {
    type: String,
    maxlength: 500
  },
  position: {
    type: Number,
    default: 0
  },
  createdBy: {
    type: String,
    required: true,
    trim: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  permissions: {
    read: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    },
    write: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    }
  },
  locked: {
    type: Boolean,
    default: false
  }
});

// Indexes
channelSchema.index({
  id: 1,
  type: 1
}); // For channel queries by type
channelSchema.index({
  parent: 1
}); // For nested channels
channelSchema.index({
  position: 1
}); // For ordering

// Update timestamp on save
channelSchema.pre('save', function (next) {
  this.updatedAt = new Date();
  next();
});

// Remove channel method (used for deleting with checks)
channelSchema.methods.safeDelete = async function () {
  // Count messages in this channel
  const messageCount = await mongoose.model('Message').countDocuments({
    channel: this.id
  });
  if (messageCount > 0) {
    throw new Error(`Cannot delete channel with ${messageCount} messages. Channel must be empty or archived.`);
  }
  return this.deleteOne();
};
module.exports = mongoose.model('Channel', channelSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJjaGFubmVsU2NoZW1hIiwiU2NoZW1hIiwiaWQiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJ1bmlxdWUiLCJ0cmltIiwibmFtZSIsIm1heGxlbmd0aCIsInBhcmVudCIsImRlZmF1bHQiLCJlbnVtIiwiZGVzY3JpcHRpb24iLCJwb3NpdGlvbiIsIk51bWJlciIsImNyZWF0ZWRCeSIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJ1cGRhdGVkQXQiLCJwZXJtaXNzaW9ucyIsInJlYWQiLCJ3cml0ZSIsImxvY2tlZCIsIkJvb2xlYW4iLCJpbmRleCIsInByZSIsIm5leHQiLCJtZXRob2RzIiwic2FmZURlbGV0ZSIsIm1lc3NhZ2VDb3VudCIsIm1vZGVsIiwiY291bnREb2N1bWVudHMiLCJjaGFubmVsIiwiRXJyb3IiLCJkZWxldGVPbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQ2hhbm5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5cbmNvbnN0IGNoYW5uZWxTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcbiAgaWQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdW5pcXVlOiB0cnVlLFxuICAgIHRyaW06IHRydWVcbiAgfSxcbiAgbmFtZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB0cmltOiB0cnVlLFxuICAgIG1heGxlbmd0aDogMTAwXG4gIH0sXG4gIHBhcmVudDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIHR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWyd0ZXh0JywgJ3ZvaWNlJ10sXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgZGVzY3JpcHRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgbWF4bGVuZ3RoOiA1MDBcbiAgfSxcbiAgcG9zaXRpb246IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBjcmVhdGVkQnk6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdHJpbTogdHJ1ZVxuICB9LFxuICBjcmVhdGVkQXQ6IHtcbiAgICB0eXBlOiBEYXRlLFxuICAgIGRlZmF1bHQ6IERhdGUubm93XG4gIH0sXG4gIHVwZGF0ZWRBdDoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogRGF0ZS5ub3dcbiAgfSxcbiAgcGVybWlzc2lvbnM6IHtcbiAgICByZWFkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBlbnVtOiBbJ2V2ZXJ5b25lJywgJ2FkbWluJ10sXG4gICAgICBkZWZhdWx0OiAnZXZlcnlvbmUnXG4gICAgfSxcbiAgICB3cml0ZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZW51bTogWydldmVyeW9uZScsICdhZG1pbiddLFxuICAgICAgZGVmYXVsdDogJ2V2ZXJ5b25lJ1xuICAgIH1cbiAgfSxcbiAgbG9ja2VkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9XG59KTtcblxuLy8gSW5kZXhlc1xuY2hhbm5lbFNjaGVtYS5pbmRleCh7IGlkOiAxLCB0eXBlOiAxIH0pOyAvLyBGb3IgY2hhbm5lbCBxdWVyaWVzIGJ5IHR5cGVcbmNoYW5uZWxTY2hlbWEuaW5kZXgoeyBwYXJlbnQ6IDEgfSk7IC8vIEZvciBuZXN0ZWQgY2hhbm5lbHNcbmNoYW5uZWxTY2hlbWEuaW5kZXgoeyBwb3NpdGlvbjogMSB9KTsgLy8gRm9yIG9yZGVyaW5nXG5cbi8vIFVwZGF0ZSB0aW1lc3RhbXAgb24gc2F2ZVxuY2hhbm5lbFNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbihuZXh0KSB7XG4gIHRoaXMudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgbmV4dCgpO1xufSk7XG5cbi8vIFJlbW92ZSBjaGFubmVsIG1ldGhvZCAodXNlZCBmb3IgZGVsZXRpbmcgd2l0aCBjaGVja3MpXG5jaGFubmVsU2NoZW1hLm1ldGhvZHMuc2FmZURlbGV0ZSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgLy8gQ291bnQgbWVzc2FnZXMgaW4gdGhpcyBjaGFubmVsXG4gICBjb25zdCBtZXNzYWdlQ291bnQgPSBhd2FpdCBtb25nb29zZS5tb2RlbCgnTWVzc2FnZScpLmNvdW50RG9jdW1lbnRzKHsgY2hhbm5lbDogdGhpcy5pZCB9KTtcblxuICAgaWYgKG1lc3NhZ2VDb3VudCA+IDApIHtcbiAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVsZXRlIGNoYW5uZWwgd2l0aCAke21lc3NhZ2VDb3VudH0gbWVzc2FnZXMuIENoYW5uZWwgbXVzdCBiZSBlbXB0eSBvciBhcmNoaXZlZC5gKTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuZGVsZXRlT25lKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdDaGFubmVsJywgY2hhbm5lbFNjaGVtYSk7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFcEMsTUFBTUMsYUFBYSxHQUFHLElBQUlGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDO0VBQ3hDQyxFQUFFLEVBQUU7SUFDRkMsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLE1BQU0sRUFBRSxJQUFJO0lBQ1pDLElBQUksRUFBRTtFQUNSLENBQUM7RUFDREMsSUFBSSxFQUFFO0lBQ0pMLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkRSxJQUFJLEVBQUUsSUFBSTtJQUNWRSxTQUFTLEVBQUU7RUFDYixDQUFDO0VBQ0RDLE1BQU0sRUFBRTtJQUNOUCxJQUFJLEVBQUVDLE1BQU07SUFDWk8sT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUNEUixJQUFJLEVBQUU7SUFDSkEsSUFBSSxFQUFFQyxNQUFNO0lBQ1pRLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFDdkJQLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDRFEsV0FBVyxFQUFFO0lBQ1hWLElBQUksRUFBRUMsTUFBTTtJQUNaSyxTQUFTLEVBQUU7RUFDYixDQUFDO0VBQ0RLLFFBQVEsRUFBRTtJQUNSWCxJQUFJLEVBQUVZLE1BQU07SUFDWkosT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUNESyxTQUFTLEVBQUU7SUFDVGIsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxJQUFJO0lBQ2RFLElBQUksRUFBRTtFQUNSLENBQUM7RUFDRFUsU0FBUyxFQUFFO0lBQ1RkLElBQUksRUFBRWUsSUFBSTtJQUNWUCxPQUFPLEVBQUVPLElBQUksQ0FBQ0M7RUFDaEIsQ0FBQztFQUNEQyxTQUFTLEVBQUU7SUFDVGpCLElBQUksRUFBRWUsSUFBSTtJQUNWUCxPQUFPLEVBQUVPLElBQUksQ0FBQ0M7RUFDaEIsQ0FBQztFQUNERSxXQUFXLEVBQUU7SUFDWEMsSUFBSSxFQUFFO01BQ0puQixJQUFJLEVBQUVDLE1BQU07TUFDWlEsSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztNQUMzQkQsT0FBTyxFQUFFO0lBQ1gsQ0FBQztJQUNEWSxLQUFLLEVBQUU7TUFDTHBCLElBQUksRUFBRUMsTUFBTTtNQUNaUSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDO01BQzNCRCxPQUFPLEVBQUU7SUFDWDtFQUNGLENBQUM7RUFDRGEsTUFBTSxFQUFFO0lBQ05yQixJQUFJLEVBQUVzQixPQUFPO0lBQ2JkLE9BQU8sRUFBRTtFQUNYO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0FYLGFBQWEsQ0FBQzBCLEtBQUssQ0FBQztFQUFFeEIsRUFBRSxFQUFFLENBQUM7RUFBRUMsSUFBSSxFQUFFO0FBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6Q0gsYUFBYSxDQUFDMEIsS0FBSyxDQUFDO0VBQUVoQixNQUFNLEVBQUU7QUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDVixhQUFhLENBQUMwQixLQUFLLENBQUM7RUFBRVosUUFBUSxFQUFFO0FBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFdEM7QUFDQWQsYUFBYSxDQUFDMkIsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFTQyxJQUFJLEVBQUU7RUFDdkMsSUFBSSxDQUFDUixTQUFTLEdBQUcsSUFBSUYsSUFBSSxDQUFDLENBQUM7RUFDM0JVLElBQUksQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxDQUFDOztBQUVGO0FBQ0E1QixhQUFhLENBQUM2QixPQUFPLENBQUNDLFVBQVUsR0FBRyxrQkFBaUI7RUFDakQ7RUFDQSxNQUFNQyxZQUFZLEdBQUcsTUFBTWpDLFFBQVEsQ0FBQ2tDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQ0MsY0FBYyxDQUFDO0lBQUVDLE9BQU8sRUFBRSxJQUFJLENBQUNoQztFQUFHLENBQUMsQ0FBQztFQUV6RixJQUFJNkIsWUFBWSxHQUFHLENBQUMsRUFBRTtJQUNwQixNQUFNLElBQUlJLEtBQUssQ0FBQyw4QkFBOEJKLFlBQVksK0NBQStDLENBQUM7RUFDNUc7RUFFQSxPQUFPLElBQUksQ0FBQ0ssU0FBUyxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBR3hDLFFBQVEsQ0FBQ2tDLEtBQUssQ0FBQyxTQUFTLEVBQUVoQyxhQUFhLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=