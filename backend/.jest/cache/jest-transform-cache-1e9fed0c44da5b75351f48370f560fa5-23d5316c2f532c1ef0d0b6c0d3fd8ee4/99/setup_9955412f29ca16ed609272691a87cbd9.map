{"version":3,"names":["mongoose","require","exec","connectDB","closeDB","TestFixtures","originalMongoUri","mongodProcess","beforeAll","global","gc","process","env","MONGODB_URI","isMongodRunning","Promise","resolve","error","console","log","setTimeout","NODE_ENV","JWT_SECRET","setup","afterAll","cleanup","afterEach","connection","readyState","testFileName","collections","key","deleteMany","jest","NODE_TEST_TIMEOUT","set"],"sources":["setup.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst { exec } = require('child_process');\nconst { connectDB, closeDB } = require('../db/connection');\nconst { TestFixtures } = require('./shared/testFixtures');\n\n\nlet originalMongoUri;\nlet mongodProcess;\n\nbeforeAll(async () => {\n    // Enable garbage collection for performance optimization\n    if (global.gc) {\n      global.gc();\n    }\n\n    // Save original MongoDB URI\n    originalMongoUri = process.env.MONGODB_URI;\n\n    // Check if mongod is running\n    const isMongodRunning = () => {\n      return new Promise((resolve) => {\n        exec('pgrep mongod', (error) => {\n          resolve(!error);\n        });\n      });\n    };\n\n    // If mongod is not running, start it\n    if (!(await isMongodRunning())) {\n      console.log('Starting mongod...');\n      mongodProcess = exec('mongod --port 27017 --dbpath /tmp/mongodb_test --logpath /tmp/mongod_test.log --fork', (error) => {\n        if (error) {\n          console.error('Failed to start mongod:', error);\n          throw error;\n        }\n      });\n      // Wait a bit for mongod to start\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    } else {\n      console.log('mongod is already running');\n    }\n\n    // Set test environment variables\n    process.env.NODE_ENV = 'test';\n    process.env.MONGODB_URI = 'mongodb://localhost:27017/chatjs_test';\n    process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';\n\n    // Connect to local test database\n    await connectDB();\n\n    // Setup reusable fixtures for faster test execution\n    console.log('Setting up test fixtures...');\n    await TestFixtures.setup();\n});\n\nafterAll(async () => {\n     // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues\n     await TestFixtures.cleanup();\n     await closeDB();\n\n     // Stop mongod if we started it\n     if (mongodProcess) {\n       console.log('Stopping mongod...');\n       exec('pkill -f mongod');\n     }\n\n     // Restore original URI if needed\n     process.env.MONGODB_URI = originalMongoUri;\n\n     // Final garbage collection\n     if (global.gc) {\n       global.gc();\n     }\n  });\n\nafterEach(async () => {\n    // Clear all collections after each test (skip if security test file detected)\n    if (mongoose.connection.readyState === 1 && global.testFileName !== 'auth-security.test.js') {\n      const collections = mongoose.connection.collections;\n      for (const key in collections) {\n        await collections[key].deleteMany({});\n      }\n    }\n  });\n\n// Global test timeouts and stabilization\njest.setTimeout(30000);  // 30 second global timeout\nprocess.env.NODE_TEST_TIMEOUT = 25000;  // Custom env for HTTP tests\n\n// Increase socket timeout for database operations\nmongoose.set('bufferCommands', false);  // Disable mongoose buffering\nmongoose.set('maxTimeMS', 20000);      // 20 second limit for operations"],"mappings":"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","ignoreList":[]}