3ede0f73682ee11e75c14d179cc486cb
const mongoose = require('mongoose');
const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(winston.format.timestamp(), winston.format.errors({
    stack: true
  }), winston.format.json()),
  defaultMeta: {
    service: 'database'
  },
  transports: [new winston.transports.File({
    filename: 'logs/database.log'
  }), new winston.transports.Console({
    format: winston.format.combine(winston.format.colorize(), winston.format.simple())
  })]
});
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI, {
      // Modern Mongoose doesn't need these options, but keeping for compatibility
      // useNewUrlParser: true,
      // useUnifiedTopology: true,
    });
    logger.info(`MongoDB Connected: ${conn.connection.host}`);

    // Handle connection events
    mongoose.connection.on('error', err => {
      logger.error('Database connection error:', err);
    });
    mongoose.connection.on('disconnected', () => {
      logger.warn('Database disconnected');
    });
    mongoose.connection.on('reconnected', () => {
      logger.info('Database reconnected');
    });
    return conn;
  } catch (error) {
    logger.error('Database connection failed:', error);
    process.exit(1);
  }
};
const closeDB = async () => {
  try {
    await mongoose.connection.close();
    logger.info('Database connection closed');
  } catch (error) {
    logger.error('Error closing database connection:', error);
  }
};
module.exports = {
  connectDB,
  closeDB
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJ3aW5zdG9uIiwibG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwibGV2ZWwiLCJmb3JtYXQiLCJjb21iaW5lIiwidGltZXN0YW1wIiwiZXJyb3JzIiwic3RhY2siLCJqc29uIiwiZGVmYXVsdE1ldGEiLCJzZXJ2aWNlIiwidHJhbnNwb3J0cyIsIkZpbGUiLCJmaWxlbmFtZSIsIkNvbnNvbGUiLCJjb2xvcml6ZSIsInNpbXBsZSIsImNvbm5lY3REQiIsImNvbm4iLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJJIiwiaW5mbyIsImNvbm5lY3Rpb24iLCJob3N0Iiwib24iLCJlcnIiLCJlcnJvciIsIndhcm4iLCJleGl0IiwiY2xvc2VEQiIsImNsb3NlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImNvbm5lY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcblxuY29uc3QgbG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoe1xuICBsZXZlbDogJ2luZm8nLFxuICBmb3JtYXQ6IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUoXG4gICAgd2luc3Rvbi5mb3JtYXQudGltZXN0YW1wKCksXG4gICAgd2luc3Rvbi5mb3JtYXQuZXJyb3JzKHsgc3RhY2s6IHRydWUgfSksXG4gICAgd2luc3Rvbi5mb3JtYXQuanNvbigpXG4gICksXG4gIGRlZmF1bHRNZXRhOiB7IHNlcnZpY2U6ICdkYXRhYmFzZScgfSxcbiAgdHJhbnNwb3J0czogW1xuICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZSh7IGZpbGVuYW1lOiAnbG9ncy9kYXRhYmFzZS5sb2cnIH0pLFxuICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgICBmb3JtYXQ6IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUoXG4gICAgICAgIHdpbnN0b24uZm9ybWF0LmNvbG9yaXplKCksXG4gICAgICAgIHdpbnN0b24uZm9ybWF0LnNpbXBsZSgpXG4gICAgICApXG4gICAgfSlcbiAgXVxufSk7XG5cbmNvbnN0IGNvbm5lY3REQiA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjb25uID0gYXdhaXQgbW9uZ29vc2UuY29ubmVjdChwcm9jZXNzLmVudi5NT05HT0RCX1VSSSwge1xuICAgICAgLy8gTW9kZXJuIE1vbmdvb3NlIGRvZXNuJ3QgbmVlZCB0aGVzZSBvcHRpb25zLCBidXQga2VlcGluZyBmb3IgY29tcGF0aWJpbGl0eVxuICAgICAgLy8gdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgICAgLy8gdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbG9nZ2VyLmluZm8oYE1vbmdvREIgQ29ubmVjdGVkOiAke2Nvbm4uY29ubmVjdGlvbi5ob3N0fWApO1xuXG4gICAgLy8gSGFuZGxlIGNvbm5lY3Rpb24gZXZlbnRzXG4gICAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZXJyb3I6JywgZXJyKTtcbiAgICB9KTtcblxuICAgIG1vbmdvb3NlLmNvbm5lY3Rpb24ub24oJ2Rpc2Nvbm5lY3RlZCcsICgpID0+IHtcbiAgICAgIGxvZ2dlci53YXJuKCdEYXRhYmFzZSBkaXNjb25uZWN0ZWQnKTtcbiAgICB9KTtcblxuICAgIG1vbmdvb3NlLmNvbm5lY3Rpb24ub24oJ3JlY29ubmVjdGVkJywgKCkgPT4ge1xuICAgICAgbG9nZ2VyLmluZm8oJ0RhdGFiYXNlIHJlY29ubmVjdGVkJyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29ubjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIuZXJyb3IoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbn07XG5cbmNvbnN0IGNsb3NlREIgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xuICAgIGxvZ2dlci5pbmZvKCdEYXRhYmFzZSBjb25uZWN0aW9uIGNsb3NlZCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ2dlci5lcnJvcignRXJyb3IgY2xvc2luZyBkYXRhYmFzZSBjb25uZWN0aW9uOicsIGVycm9yKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGNvbm5lY3REQiwgY2xvc2VEQiB9OyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUVsQyxNQUFNRSxNQUFNLEdBQUdELE9BQU8sQ0FBQ0UsWUFBWSxDQUFDO0VBQ2xDQyxLQUFLLEVBQUUsTUFBTTtFQUNiQyxNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDQyxPQUFPLENBQzVCTCxPQUFPLENBQUNJLE1BQU0sQ0FBQ0UsU0FBUyxDQUFDLENBQUMsRUFDMUJOLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDRyxNQUFNLENBQUM7SUFBRUMsS0FBSyxFQUFFO0VBQUssQ0FBQyxDQUFDLEVBQ3RDUixPQUFPLENBQUNJLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLENBQ3RCLENBQUM7RUFDREMsV0FBVyxFQUFFO0lBQUVDLE9BQU8sRUFBRTtFQUFXLENBQUM7RUFDcENDLFVBQVUsRUFBRSxDQUNWLElBQUlaLE9BQU8sQ0FBQ1ksVUFBVSxDQUFDQyxJQUFJLENBQUM7SUFBRUMsUUFBUSxFQUFFO0VBQW9CLENBQUMsQ0FBQyxFQUM5RCxJQUFJZCxPQUFPLENBQUNZLFVBQVUsQ0FBQ0csT0FBTyxDQUFDO0lBQzdCWCxNQUFNLEVBQUVKLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDQyxPQUFPLENBQzVCTCxPQUFPLENBQUNJLE1BQU0sQ0FBQ1ksUUFBUSxDQUFDLENBQUMsRUFDekJoQixPQUFPLENBQUNJLE1BQU0sQ0FBQ2EsTUFBTSxDQUFDLENBQ3hCO0VBQ0YsQ0FBQyxDQUFDO0FBRU4sQ0FBQyxDQUFDO0FBRUYsTUFBTUMsU0FBUyxHQUFHLE1BQUFBLENBQUEsS0FBWTtFQUM1QixJQUFJO0lBQ0YsTUFBTUMsSUFBSSxHQUFHLE1BQU1yQixRQUFRLENBQUNzQixPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxXQUFXLEVBQUU7TUFDM0Q7TUFDQTtNQUNBO0lBQUEsQ0FDRCxDQUFDO0lBRUZ0QixNQUFNLENBQUN1QixJQUFJLENBQUMsc0JBQXNCTCxJQUFJLENBQUNNLFVBQVUsQ0FBQ0MsSUFBSSxFQUFFLENBQUM7O0lBRXpEO0lBQ0E1QixRQUFRLENBQUMyQixVQUFVLENBQUNFLEVBQUUsQ0FBQyxPQUFPLEVBQUdDLEdBQUcsSUFBSztNQUN2QzNCLE1BQU0sQ0FBQzRCLEtBQUssQ0FBQyw0QkFBNEIsRUFBRUQsR0FBRyxDQUFDO0lBQ2pELENBQUMsQ0FBQztJQUVGOUIsUUFBUSxDQUFDMkIsVUFBVSxDQUFDRSxFQUFFLENBQUMsY0FBYyxFQUFFLE1BQU07TUFDM0MxQixNQUFNLENBQUM2QixJQUFJLENBQUMsdUJBQXVCLENBQUM7SUFDdEMsQ0FBQyxDQUFDO0lBRUZoQyxRQUFRLENBQUMyQixVQUFVLENBQUNFLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTTtNQUMxQzFCLE1BQU0sQ0FBQ3VCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUNyQyxDQUFDLENBQUM7SUFFRixPQUFPTCxJQUFJO0VBQ2IsQ0FBQyxDQUFDLE9BQU9VLEtBQUssRUFBRTtJQUNkNUIsTUFBTSxDQUFDNEIsS0FBSyxDQUFDLDZCQUE2QixFQUFFQSxLQUFLLENBQUM7SUFDbERSLE9BQU8sQ0FBQ1UsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNqQjtBQUNGLENBQUM7QUFFRCxNQUFNQyxPQUFPLEdBQUcsTUFBQUEsQ0FBQSxLQUFZO0VBQzFCLElBQUk7SUFDRixNQUFNbEMsUUFBUSxDQUFDMkIsVUFBVSxDQUFDUSxLQUFLLENBQUMsQ0FBQztJQUNqQ2hDLE1BQU0sQ0FBQ3VCLElBQUksQ0FBQyw0QkFBNEIsQ0FBQztFQUMzQyxDQUFDLENBQUMsT0FBT0ssS0FBSyxFQUFFO0lBQ2Q1QixNQUFNLENBQUM0QixLQUFLLENBQUMsb0NBQW9DLEVBQUVBLEtBQUssQ0FBQztFQUMzRDtBQUNGLENBQUM7QUFFREssTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFBRWpCLFNBQVM7RUFBRWM7QUFBUSxDQUFDIiwiaWdub3JlTGlzdCI6W119