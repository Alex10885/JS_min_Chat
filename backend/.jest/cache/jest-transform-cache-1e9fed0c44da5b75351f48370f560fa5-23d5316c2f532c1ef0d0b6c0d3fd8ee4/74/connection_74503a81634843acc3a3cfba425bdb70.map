{"version":3,"names":["mongoose","require","winston","logger","createLogger","level","format","combine","timestamp","errors","stack","json","defaultMeta","service","transports","File","filename","Console","colorize","simple","connectDB","conn","connect","process","env","MONGODB_URI","info","connection","host","on","err","error","warn","exit","closeDB","close","module","exports"],"sources":["connection.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'database' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/database.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGODB_URI, {\n      // Modern Mongoose doesn't need these options, but keeping for compatibility\n      // useNewUrlParser: true,\n      // useUnifiedTopology: true,\n    });\n\n    logger.info(`MongoDB Connected: ${conn.connection.host}`);\n\n    // Handle connection events\n    mongoose.connection.on('error', (err) => {\n      logger.error('Database connection error:', err);\n    });\n\n    mongoose.connection.on('disconnected', () => {\n      logger.warn('Database disconnected');\n    });\n\n    mongoose.connection.on('reconnected', () => {\n      logger.info('Database reconnected');\n    });\n\n    return conn;\n  } catch (error) {\n    logger.error('Database connection failed:', error);\n    process.exit(1);\n  }\n};\n\nconst closeDB = async () => {\n  try {\n    await mongoose.connection.close();\n    logger.info('Database connection closed');\n  } catch (error) {\n    logger.error('Error closing database connection:', error);\n  }\n};\n\nmodule.exports = { connectDB, closeDB };"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAElC,MAAME,MAAM,GAAGD,OAAO,CAACE,YAAY,CAAC;EAClCC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAEJ,OAAO,CAACI,MAAM,CAACC,OAAO,CAC5BL,OAAO,CAACI,MAAM,CAACE,SAAS,CAAC,CAAC,EAC1BN,OAAO,CAACI,MAAM,CAACG,MAAM,CAAC;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC,EACtCR,OAAO,CAACI,MAAM,CAACK,IAAI,CAAC,CACtB,CAAC;EACDC,WAAW,EAAE;IAAEC,OAAO,EAAE;EAAW,CAAC;EACpCC,UAAU,EAAE,CACV,IAAIZ,OAAO,CAACY,UAAU,CAACC,IAAI,CAAC;IAAEC,QAAQ,EAAE;EAAoB,CAAC,CAAC,EAC9D,IAAId,OAAO,CAACY,UAAU,CAACG,OAAO,CAAC;IAC7BX,MAAM,EAAEJ,OAAO,CAACI,MAAM,CAACC,OAAO,CAC5BL,OAAO,CAACI,MAAM,CAACY,QAAQ,CAAC,CAAC,EACzBhB,OAAO,CAACI,MAAM,CAACa,MAAM,CAAC,CACxB;EACF,CAAC,CAAC;AAEN,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMrB,QAAQ,CAACsB,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,WAAW,EAAE;MAC3D;MACA;MACA;IAAA,CACD,CAAC;IAEFtB,MAAM,CAACuB,IAAI,CAAC,sBAAsBL,IAAI,CAACM,UAAU,CAACC,IAAI,EAAE,CAAC;;IAEzD;IACA5B,QAAQ,CAAC2B,UAAU,CAACE,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAK;MACvC3B,MAAM,CAAC4B,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC;IACjD,CAAC,CAAC;IAEF9B,QAAQ,CAAC2B,UAAU,CAACE,EAAE,CAAC,cAAc,EAAE,MAAM;MAC3C1B,MAAM,CAAC6B,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC,CAAC;IAEFhC,QAAQ,CAAC2B,UAAU,CAACE,EAAE,CAAC,aAAa,EAAE,MAAM;MAC1C1B,MAAM,CAACuB,IAAI,CAAC,sBAAsB,CAAC;IACrC,CAAC,CAAC;IAEF,OAAOL,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd5B,MAAM,CAAC4B,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IAClDR,OAAO,CAACU,IAAI,CAAC,CAAC,CAAC;EACjB;AACF,CAAC;AAED,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EAC1B,IAAI;IACF,MAAMlC,QAAQ,CAAC2B,UAAU,CAACQ,KAAK,CAAC,CAAC;IACjChC,MAAM,CAACuB,IAAI,CAAC,4BAA4B,CAAC;EAC3C,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd5B,MAAM,CAAC4B,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;EAC3D;AACF,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAG;EAAEjB,SAAS;EAAEc;AAAQ,CAAC","ignoreList":[]}