ae7c83c3d646b2ef5f3b05cb42d67ced
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
let mongod;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Start in-memory MongoDB server for tests
  mongod = await MongoMemoryServer.create();
  const mongoUri = mongod.getUri();

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = mongoUri;
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to in-memory test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues
  await TestFixtures.cleanup();
  await closeDB();

  // Stop the in-memory MongoDB server
  if (mongod) {
    await mongod.stop();
  }

  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test
  const collections = mongoose.connection.collections;
  for (const key in collections) {
    await collections[key].deleteMany({});
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsImNvbm5lY3REQiIsImNsb3NlREIiLCJUZXN0Rml4dHVyZXMiLCJvcmlnaW5hbE1vbmdvVXJpIiwibW9uZ29kIiwiYmVmb3JlQWxsIiwiZ2xvYmFsIiwiZ2MiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJjcmVhdGUiLCJtb25nb1VyaSIsImdldFVyaSIsIk5PREVfRU5WIiwiSldUX1NFQ1JFVCIsImNvbnNvbGUiLCJsb2ciLCJzZXR1cCIsImFmdGVyQWxsIiwiY2xlYW51cCIsInN0b3AiLCJhZnRlckVhY2giLCJjb2xsZWN0aW9ucyIsImNvbm5lY3Rpb24iLCJrZXkiLCJkZWxldGVNYW55IiwiamVzdCIsInNldFRpbWVvdXQiLCJOT0RFX1RFU1RfVElNRU9VVCIsInNldCJdLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbmNvbnN0IHsgTW9uZ29NZW1vcnlTZXJ2ZXIgfSA9IHJlcXVpcmUoJ21vbmdvZGItbWVtb3J5LXNlcnZlcicpO1xuY29uc3QgeyBjb25uZWN0REIsIGNsb3NlREIgfSA9IHJlcXVpcmUoJy4uL2RiL2Nvbm5lY3Rpb24nKTtcbmNvbnN0IHsgVGVzdEZpeHR1cmVzIH0gPSByZXF1aXJlKCcuL3NoYXJlZC90ZXN0Rml4dHVyZXMnKTtcblxubGV0IG9yaWdpbmFsTW9uZ29Vcmk7XG5sZXQgbW9uZ29kO1xuXG5iZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIC8vIEVuYWJsZSBnYXJiYWdlIGNvbGxlY3Rpb24gZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgIGdsb2JhbC5nYygpO1xuICAgIH1cblxuICAgIC8vIFNhdmUgb3JpZ2luYWwgTW9uZ29EQiBVUklcbiAgICBvcmlnaW5hbE1vbmdvVXJpID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkk7XG5cbiAgICAvLyBTdGFydCBpbi1tZW1vcnkgTW9uZ29EQiBzZXJ2ZXIgZm9yIHRlc3RzXG4gICAgbW9uZ29kID0gYXdhaXQgTW9uZ29NZW1vcnlTZXJ2ZXIuY3JlYXRlKCk7XG4gICAgY29uc3QgbW9uZ29VcmkgPSBtb25nb2QuZ2V0VXJpKCk7XG5cbiAgICAvLyBTZXQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgICBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSA9IG1vbmdvVXJpO1xuICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAneW91cl9zdXBlcl9zZWN1cmVfand0X3NlY3JldF9rZXlfaGVyZV9yZXBsYWNlX2luX3Byb2R1Y3Rpb24nO1xuXG4gICAgLy8gQ29ubmVjdCB0byBpbi1tZW1vcnkgdGVzdCBkYXRhYmFzZVxuICAgIGF3YWl0IGNvbm5lY3REQigpO1xuXG4gICAgLy8gU2V0dXAgcmV1c2FibGUgZml4dHVyZXMgZm9yIGZhc3RlciB0ZXN0IGV4ZWN1dGlvblxuICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIHVwIHRlc3QgZml4dHVyZXMuLi4nKTtcbiAgICBhd2FpdCBUZXN0Rml4dHVyZXMuc2V0dXAoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgIC8vIGNvbnNvbGUubG9nKCdDbGVhbmluZyB1cCB0ZXN0IGZpeHR1cmVzLi4uJyk7IC8vIERpc2FibGVkIHRvIGF2b2lkIG1vY2tpbmcgaXNzdWVzXG4gICAgIGF3YWl0IFRlc3RGaXh0dXJlcy5jbGVhbnVwKCk7XG4gICAgIGF3YWl0IGNsb3NlREIoKTtcblxuICAgICAvLyBTdG9wIHRoZSBpbi1tZW1vcnkgTW9uZ29EQiBzZXJ2ZXJcbiAgICAgaWYgKG1vbmdvZCkge1xuICAgICAgIGF3YWl0IG1vbmdvZC5zdG9wKCk7XG4gICAgIH1cblxuICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIFVSSSBpZiBuZWVkZWRcbiAgICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgPSBvcmlnaW5hbE1vbmdvVXJpO1xuXG4gICAgIC8vIEZpbmFsIGdhcmJhZ2UgY29sbGVjdGlvblxuICAgICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgIH1cbiB9KTtcblxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgIC8vIENsZWFyIGFsbCBjb2xsZWN0aW9ucyBhZnRlciBlYWNoIHRlc3RcbiAgIGNvbnN0IGNvbGxlY3Rpb25zID0gbW9uZ29vc2UuY29ubmVjdGlvbi5jb2xsZWN0aW9ucztcbiAgIGZvciAoY29uc3Qga2V5IGluIGNvbGxlY3Rpb25zKSB7XG4gICAgIGF3YWl0IGNvbGxlY3Rpb25zW2tleV0uZGVsZXRlTWFueSh7fSk7XG4gICB9XG59KTtcblxuLy8gR2xvYmFsIHRlc3QgdGltZW91dHMgYW5kIHN0YWJpbGl6YXRpb25cbmplc3Quc2V0VGltZW91dCgzMDAwMCk7ICAvLyAzMCBzZWNvbmQgZ2xvYmFsIHRpbWVvdXRcbnByb2Nlc3MuZW52Lk5PREVfVEVTVF9USU1FT1VUID0gMjUwMDA7ICAvLyBDdXN0b20gZW52IGZvciBIVFRQIHRlc3RzXG5cbi8vIEluY3JlYXNlIHNvY2tldCB0aW1lb3V0IGZvciBkYXRhYmFzZSBvcGVyYXRpb25zXG5tb25nb29zZS5zZXQoJ2J1ZmZlckNvbW1hbmRzJywgZmFsc2UpOyAgLy8gRGlzYWJsZSBtb25nb29zZSBidWZmZXJpbmdcbm1vbmdvb3NlLnNldCgnbWF4VGltZU1TJywgMjAwMDApOyAgICAgIC8vIDIwIHNlY29uZCBsaW1pdCBmb3Igb3BlcmF0aW9ucyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU07RUFBRUM7QUFBa0IsQ0FBQyxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDOUQsTUFBTTtFQUFFRSxTQUFTO0VBQUVDO0FBQVEsQ0FBQyxHQUFHSCxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDMUQsTUFBTTtFQUFFSTtBQUFhLENBQUMsR0FBR0osT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBRXpELElBQUlLLGdCQUFnQjtBQUNwQixJQUFJQyxNQUFNO0FBRVZDLFNBQVMsQ0FBQyxZQUFZO0VBQ2xCO0VBQ0EsSUFBSUMsTUFBTSxDQUFDQyxFQUFFLEVBQUU7SUFDYkQsTUFBTSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNiOztFQUVBO0VBQ0FKLGdCQUFnQixHQUFHSyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVzs7RUFFMUM7RUFDQU4sTUFBTSxHQUFHLE1BQU1MLGlCQUFpQixDQUFDWSxNQUFNLENBQUMsQ0FBQztFQUN6QyxNQUFNQyxRQUFRLEdBQUdSLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDLENBQUM7O0VBRWhDO0VBQ0FMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSyxRQUFRLEdBQUcsTUFBTTtFQUM3Qk4sT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsR0FBR0UsUUFBUTtFQUNsQ0osT0FBTyxDQUFDQyxHQUFHLENBQUNNLFVBQVUsR0FBRyw2REFBNkQ7O0VBRXRGO0VBQ0EsTUFBTWYsU0FBUyxDQUFDLENBQUM7O0VBRWpCO0VBQ0FnQixPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQztFQUMxQyxNQUFNZixZQUFZLENBQUNnQixLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUM7QUFFRkMsUUFBUSxDQUFDLFlBQVk7RUFDaEI7RUFDQSxNQUFNakIsWUFBWSxDQUFDa0IsT0FBTyxDQUFDLENBQUM7RUFDNUIsTUFBTW5CLE9BQU8sQ0FBQyxDQUFDOztFQUVmO0VBQ0EsSUFBSUcsTUFBTSxFQUFFO0lBQ1YsTUFBTUEsTUFBTSxDQUFDaUIsSUFBSSxDQUFDLENBQUM7RUFDckI7O0VBRUE7RUFDQWIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFdBQVcsR0FBR1AsZ0JBQWdCOztFQUUxQztFQUNBLElBQUlHLE1BQU0sQ0FBQ0MsRUFBRSxFQUFFO0lBQ2JELE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDYjtBQUNKLENBQUMsQ0FBQztBQUVIZSxTQUFTLENBQUMsWUFBWTtFQUNuQjtFQUNBLE1BQU1DLFdBQVcsR0FBRzFCLFFBQVEsQ0FBQzJCLFVBQVUsQ0FBQ0QsV0FBVztFQUNuRCxLQUFLLE1BQU1FLEdBQUcsSUFBSUYsV0FBVyxFQUFFO0lBQzdCLE1BQU1BLFdBQVcsQ0FBQ0UsR0FBRyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN2QztBQUNILENBQUMsQ0FBQzs7QUFFRjtBQUNBQyxJQUFJLENBQUNDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFO0FBQ3pCcEIsT0FBTyxDQUFDQyxHQUFHLENBQUNvQixpQkFBaUIsR0FBRyxLQUFLLENBQUMsQ0FBRTs7QUFFeEM7QUFDQWhDLFFBQVEsQ0FBQ2lDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFFO0FBQ3hDakMsUUFBUSxDQUFDaUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFNIiwiaWdub3JlTGlzdCI6W119