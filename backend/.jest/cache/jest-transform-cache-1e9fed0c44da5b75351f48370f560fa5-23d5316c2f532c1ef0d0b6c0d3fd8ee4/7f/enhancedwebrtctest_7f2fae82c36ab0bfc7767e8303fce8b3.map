{"version":3,"names":["io","require","connectDB","closeDB","User","jwt","testUsers","testTokens","PORT","TEST_CHANNEL_ID","describe","clientSockets","testClients","beforeAll","i","user","nickname","email","password","save","push","token","sign","id","_id","role","process","env","JWT_SECRET","expiresIn","afterAll","beforeEach","done","connected","totalClients","socket","auth","on","j","sock","afterEach","forEach","disconnect","test","joinedCount","leftCount","expectedEvents","length","completedEvents","checkCompletion","index","emit","channelId","expect","toBeLessThanOrEqual","data","toBeDefined","socketId","toBe","setTimeout","signalingReceived","rapidSignals","totalSignals","mockOffer","type","sdp","offer","targetSocketId","toEqual","answer","receivedOffers","receivedAnswers","sendSignaling","delay","Math","random","invalidSignals","processedSignals","handledErrors","error","console","log","invalidSignal","volatile","newSocket","receivedSignals","concurrentSignals","offer1","offer2","signalCount1","signalCount2","largeSdp","repeat","maxUsers","multipleSockets","connectedCount","reconnectionSocket","Error","message"],"sources":["enhanced-webrtc.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst { connectDB, closeDB } = require('../../db/connection');\nconst User = require('../../models/User');\nconst jwt = require('jsonwebtoken');\n\nlet testUsers = [];\nlet testTokens = [];\n\nconst PORT = 3001;\nconst TEST_CHANNEL_ID = 'voice-chat-test';\n\ndescribe('Enhanced WebRTC Testing', () => {\n  let clientSockets = [];\n  let testClients = [];\n\n  beforeAll(async () => {\n    await connectDB();\n\n    // Create multiple test users for comprehensive testing\n    for (let i = 1; i <= 5; i++) {\n      const user = new User({\n        nickname: `webrtc_enhanced_user_${i}`,\n        email: `webrtc-enhanced-${i}@test.com`,\n        password: 'testpass123'\n      });\n      await user.save();\n      testUsers.push(user);\n\n      const token = jwt.sign(\n        { id: user._id, nickname: user.nickname, role: user.role },\n        process.env.JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n      testTokens.push(token);\n    }\n  });\n\n  afterAll(async () => {\n    await closeDB();\n  });\n\n  beforeEach((done) => {\n    let connected = 0;\n    const totalClients = 3; // Test with 3 concurrent clients\n\n    for (let i = 0; i < totalClients; i++) {\n      const socket = io(`http://localhost:${PORT}`, {\n        auth: { token: testTokens[i] }\n      });\n\n      socket.on('connect', () => {\n        connected++;\n        if (connected === totalClients) {\n          clientSockets = [];\n          testClients = [];\n\n          for (let j = 0; j < totalClients; j++) {\n            const sock = io(`http://localhost:${PORT}`, {\n              auth: { token: testTokens[j] }\n            });\n            clientSockets.push(sock);\n            testClients.push({ socket: sock, user: testUsers[j] });\n          }\n\n          done();\n        }\n      });\n    }\n  });\n\n  afterEach(() => {\n    clientSockets.forEach(socket => {\n      if (socket) socket.disconnect();\n    });\n  });\n\n  describe('Voice Channel Integrity', () => {\n    test('should handle multiple users joining/leaving voice channel', (done) => {\n      let joinedCount = 0;\n      let leftCount = 0;\n      const expectedEvents = (clientSockets.length * 2) + 1; // joins + leaves + final check\n      let completedEvents = 0;\n\n      const checkCompletion = () => {\n        completedEvents++;\n        if (completedEvents === expectedEvents) {\n          done();\n        }\n      };\n\n      // Join all clients to voice channel\n      clientSockets.forEach((socket, index) => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n\n        socket.on('voice_joined', () => {\n          joinedCount++;\n          expect(joinedCount).toBeLessThanOrEqual(clientSockets.length);\n          checkCompletion();\n        });\n\n        socket.on('user_joined_voice', (data) => {\n          expect(data.nickname).toBeDefined();\n          expect(typeof data.socketId).toBe('string');\n        });\n      });\n\n      // After joining, have clients leave\n      setTimeout(() => {\n        clientSockets.forEach(socket => {\n          socket.emit('leave_voice_channel');\n\n          socket.on('voice_left', () => {\n            leftCount++;\n            checkCompletion();\n          });\n\n          socket.on('user_left_voice', (data) => {\n            expect(data.nickname).toBeDefined();\n            // Verify users are properly cleaned up\n            leftCount === clientSockets.length && checkCompletion();\n          });\n        });\n      }, 100);\n    });\n  });\n\n  describe('Signaling Reliability', () => {\n    test('should handle rapid signaling exchange', (done) => {\n      let signalingReceived = 0;\n      const rapidSignals = 5;\n      const totalSignals = rapidSignals * 2; // offer + answer per pair\n\n      clientSockets.forEach(socket => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n      });\n\n      setTimeout(() => {\n        for (let i = 0; i < rapidSignals; i++) {\n          const mockOffer = { type: 'offer', sdp: `mock-sdp-rapid-${i}` };\n\n          // Send rapid offers\n          clientSockets[0].emit('voice_offer', {\n            offer: mockOffer,\n            targetSocketId: clientSockets[1].id\n          });\n\n          clientSockets[1].on('voice_offer', (data) => {\n            expect(data.offer).toEqual(mockOffer);\n            signalingReceived++;\n\n            // Send rapid answers\n            clientSockets[1].emit('voice_answer', {\n              answer: { type: 'answer', sdp: `mock-answer-${i}` },\n              targetSocketId: clientSockets[0].id\n            });\n\n            if (signalingReceived >= totalSignals) {\n              done();\n            }\n          });\n        }\n      }, 50);\n    });\n\n    test('should handle signaling with network jitter', (done) => {\n      let receivedOffers = 0;\n      let receivedAnswers = 0;\n\n      clientSockets.forEach(socket => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n      });\n\n      setTimeout(() => {\n        // Simulate delayed signaling due to network jitter\n        const sendSignaling = () => {\n          const mockOffer = { type: 'offer', sdp: 'delayed-sdp' };\n\n          clientSockets[0].emit('voice_offer', {\n            offer: mockOffer,\n            targetSocketId: clientSockets[1].id\n          });\n\n          // Simulate variable network delay\n          const delay = Math.random() * 200 + 50; // 50-250ms delay\n\n          setTimeout(() => {\n            clientSockets[1].emit('voice_answer', {\n              answer: { type: 'answer', sdp: 'delayed-answer' },\n              targetSocketId: clientSockets[0].id\n            });\n          }, delay);\n        };\n\n        // Multiple signaling attempts with jitter\n        for (let i = 0; i < 3; i++) {\n          setTimeout(sendSignaling, i * 100);\n        }\n\n        clientSockets[1].on('voice_offer', () => {\n          receivedOffers++;\n        });\n\n        clientSockets[0].on('voice_answer', () => {\n          receivedAnswers++;\n          if (receivedAnswers === 3) {\n            expect(receivedOffers).toBe(3);\n            done();\n          }\n        });\n      }, 50);\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    test('should handle invalid signaling data', (done) => {\n      clientSockets[0].emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n\n      clientSockets[0].on('voice_joined', () => {\n        const invalidSignals = [\n          { offer: null, targetSocketId: 'fake-id' },\n          { offer: {}, targetSocketId: clientSockets[1].id },\n          { offer: { type: 'invalid' }, targetSocketId: clientSockets[1].id },\n          { offer: { type: 'offer', sdp: '' }, targetSocketId: clientSockets[1].id }\n        ];\n\n        let processedSignals = 0;\n        let handledErrors = 0;\n\n        clientSockets[0].on('error', (error) => {\n          console.log('Error received:', error);\n          handledErrors++;\n        });\n\n        invalidSignals.forEach(invalidSignal => {\n          clientSockets[0].emit('voice_offer', invalidSignal);\n        });\n\n        setTimeout(() => {\n          console.log(`Processed ${processedSignals} signals, handled ${handledErrors} errors`);\n          // The test should not crash, regardless of invalid signals\n          expect(processedSignals).toBeDefined();\n          done();\n        }, 1000);\n      });\n    });\n\n    test('should recover from signaling interruption', (done) => {\n      clientSockets.forEach(socket => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n      });\n\n      setTimeout(() => {\n        // Interrupt signaling by simulating connection issues\n        clientSockets[0].volatile.emit('voice_offer', {\n          offer: { type: 'offer', sdp: 'interrupt-test' },\n          targetSocketId: clientSockets[1].id\n        });\n\n        // Simulate immediate disconnect and reconnect\n        clientSockets[0].disconnect();\n\n        setTimeout(() => {\n          const newSocket = io(`http://localhost:${PORT}`, {\n            auth: { token: testTokens[0] }\n          });\n\n          newSocket.on('connect', () => {\n            newSocket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n\n            newSocket.on('voice_joined', () => {\n              // Recovery successful - can still join voice channel\n              newSocket.disconnect();\n              done();\n            });\n          });\n        }, 100);\n      }, 50);\n    });\n\n    test('should handle concurrent signaling conflicts', (done) => {\n      let receivedSignals = 0;\n      const concurrentSignals = 10;\n\n      clientSockets.forEach(socket => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n      });\n\n      setTimeout(() => {\n        // Both sockets send offers simultaneously\n        for (let i = 0; i < concurrentSignals; i++) {\n          const offer1 = { type: 'offer', sdp: `concurrent-sdp-1-${i}` };\n          const offer2 = { type: 'offer', sdp: `concurrent-sdp-2-${i}` };\n\n          clientSockets[0].emit('voice_offer', {\n            offer: offer1,\n            targetSocketId: clientSockets[1].id\n          });\n\n          clientSockets[1].emit('voice_offer', {\n            offer: offer2,\n            targetSocketId: clientSockets[0].id\n          });\n        }\n\n        let signalCount1 = 0;\n        let signalCount2 = 0;\n\n        clientSockets[0].on('voice_offer', () => {\n          signalCount1++;\n          if (signalCount1 >= concurrentSignals) {\n            receivedSignals++;\n          }\n          if (receivedSignals === 2) {\n            done();\n          }\n        });\n\n        clientSockets[1].on('voice_offer', () => {\n          signalCount2++;\n          if (signalCount2 >= concurrentSignals) {\n            receivedSignals++;\n          }\n          if (receivedSignals === 2) {\n            done();\n          }\n        });\n      }, 50);\n    });\n  });\n\n  describe('Scalability Testing', () => {\n    test('should handle large SDP data', (done) => {\n      // Simulate large SDP data (common in WebRTC)\n      const largeSdp = 'v=0\\r\\n'.repeat(1000) + 'large-sdp-data';\n\n      clientSockets.forEach(socket => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n      });\n\n      setTimeout(() => {\n        clientSockets[0].emit('voice_offer', {\n          offer: { type: 'offer', sdp: largeSdp },\n          targetSocketId: clientSockets[1].id\n        });\n\n        clientSockets[1].on('voice_offer', (data) => {\n          expect(data.offer.sdp).toBe(largeSdp);\n          expect(data.offer.sdp.length).toBe(largeSdp.length);\n          done();\n        });\n      }, 50);\n    });\n\n    test('should handle maximum users in voice channel', (done) => {\n      const maxUsers = 10; // Test reasonable maximum\n      const multipleSockets = [];\n      let joinedCount = 0;\n      let connectedCount = 0;\n\n      // Create maximum number of connections\n      for (let i = 0; i < maxUsers && i < testUsers.length; i++) {\n        const socket = io(`http://localhost:${PORT}`, {\n          auth: { token: testTokens[i] }\n        });\n\n        socket.on('connect', () => {\n          connectedCount++;\n          if (connectedCount === maxUsers) {\n            // All connections established, now join channel\n            multipleSockets.forEach(sock => {\n              sock.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n              sock.on('voice_joined', () => {\n                joinedCount++;\n                if (joinedCount === maxUsers) {\n                  // Cleanup and complete test\n                  multipleSockets.forEach(sock => sock.disconnect());\n                  done();\n                }\n              });\n            });\n          }\n        });\n\n        multipleSockets.push(socket);\n      }\n    });\n  });\n\n  describe('Resource Management', () => {\n    test('should properly clean up resources after disconnect', (done) => {\n      clientSockets.forEach(socket => {\n        socket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n      });\n\n      setTimeout(() => {\n        // Disconnect all sockets abruptly\n        clientSockets.forEach(socket => {\n          socket.disconnect();\n        });\n\n        // Attempt to reconnect and verify clean state\n        setTimeout(() => {\n          const reconnectionSocket = io(`http://localhost:${PORT}`, {\n            auth: { token: testTokens[0] }\n          });\n\n          reconnectionSocket.on('connect', () => {\n            reconnectionSocket.emit('join_voice_channel', { channelId: TEST_CHANNEL_ID });\n\n            reconnectionSocket.on('voice_joined', () => {\n              // Successfully rejoined - resources were cleaned up\n              reconnectionSocket.disconnect();\n              done();\n            });\n\n            reconnectionSocket.on('voice_error', (error) => {\n              // Unexpected error after cleanup\n              done(new Error(`Resource cleanup failed: ${error.message}`));\n            });\n          });\n        }, 200);\n      }, 50);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}