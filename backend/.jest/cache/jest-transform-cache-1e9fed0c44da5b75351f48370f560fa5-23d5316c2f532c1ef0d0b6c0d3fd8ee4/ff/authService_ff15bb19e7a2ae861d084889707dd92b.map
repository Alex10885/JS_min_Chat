{"version":3,"names":["jwt","require","crypto","User","config","logger","winston","redisManager","rateLimit","RedisStore","e","AuthService","constructor","_initializeRateLimiters","initializeRedis","isClientReady","connect","info","error","redisStore","getClient","authRateLimiter","store","client","prefix","expiry","windowMs","max","process","env","NODE_ENV","CYPRESS_API_SKIP","message","standardHeaders","legacyHeaders","skip","req","get","includes","onLimitReached","_res","warn","ip","userAgent","identifier","body","apiRateLimiter","undefined","redisDisabled","generalRateLimiter","passwordResetRateLimiter","dynamicRateLimiter","calculateDynamicLimit","user","role","_createMemoryRateLimiters","userId","_id","toString","behaviorScore","getUserBehaviorScore","behaviorKey","score","getCache","setCache","parseInt","updateUserBehaviorScore","action","currentScore","Math","min","registerUser","userData","nickname","email","password","existingUser","findOne","$or","conflictField","errorMessage","Error","status","save","loginUser","captchaToken","isAccountLocked","lockTimeRemaining","ceil","accountLockedUntil","Date","captchaRequired","isPasswordValid","comparePassword","incFailedAttempts","attempts","failedLoginAttempts","lockedUntil","resetFailedAttempts","generateToken","sessionId","csrfToken","token","sign","security","jwtSecret","expiresIn","generateCsrfToken","randomBytes","logoutUser","findByIdAndUpdate","lastActive","getUserFromToken","decoded","verify","findById","validateSession","session","authenticated","enable2FA","secret","generate2FASecret","qrCodeUrl","base32","backupCodes","confirm2FA","code","twoFactorSecret","isValid","verify2FACode","success","disable2FA","twoFactorEnabled","authenticateSession","res","next","console","log","url","method","sessionID","sessionExists","sessionData","loginTime","substring","getSessionData","sid","id","sessionValid","sessionUser","lastActivity","toISOString","setSessionData","lastSessionCheck","deleteSessionData","redisSessionFound","authenticateToken","authHeader","headers","split","hasAuthHeader","hasToken","json","name","requireModerator","hasModeratorPrivileges","requireAdmin","hasAdminPrivileges","verifyJWTToken","valid","createSession","fingerprint","csrfTokenHash","createHash","update","digest","setSession","userAgentLength","length","expires","cookie","destroySession","hasSessionAuth","sessionUserId","deleteSession","Promise","resolve","reject","destroy","err","getSession","data","ttl","validateAndEnhanceSession","handleLoginWithSession","_connectionManager","hasPassword","errors","msg","banned","reason","banReason","banExpires","sessionInfo","responseUser","handleRegistrationWithSession","module","exports"],"sources":["authService.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst User = require('../models/User');\nconst config = require('../config');\nconst { logger } = require('../middleware/auth');\n// Removed unused imports\nconst winston = require('winston');\nconst { redisManager } = require('../config/redis');\nconst rateLimit = require('express-rate-limit');\nlet RedisStore;\ntry {\n  RedisStore = require('rate-limit-redis');\n} catch (e) {\n  // rate-limit-redis not available, use memory store\n  RedisStore = null;\n}\n\nclass AuthService {\n  constructor() {\n    this.logger = logger;\n    this.redisManager = redisManager;\n    this._initializeRateLimiters();\n  }\n\n  async initializeRedis() {\n    try {\n      if (!this.redisManager.isClientReady()) {\n        await this.redisManager.connect();\n      }\n      this.logger.info('AuthService Redis connection established for session management');\n    } catch (error) {\n      this.logger.error('Failed to initialize Redis in AuthService:', error);\n      throw error;\n    }\n  }\n\n  _initializeRateLimiters() {\n    try {\n      const redisStore = redisManager.getClient();\n\n      if (redisStore && RedisStore) {\n        // Enhanced authentication rate limiter with Redis store\n        this.authRateLimiter = rateLimit({\n          store: new RedisStore({\n            client: redisStore,\n            prefix: 'auth_limit:',\n            // Reset key every 15 minutes\n            expiry: 15 * 60\n          }),\n          windowMs: 15 * 60 * 1000, // 15 minutes\n          max: process.env.NODE_ENV === 'test' || process.env.CYPRESS_API_SKIP ? 20000 : 10,\n          message: { error: 'Too many authentication attempts, please try again later.' },\n          standardHeaders: true,\n          legacyHeaders: false,\n          skip: (req) => {\n            return req.get('User-Agent') && req.get('User-Agent').includes('Cypress');\n          },\n          onLimitReached: (req, _res) => {\n            this.logger.warn('Authentication rate limit reached', {\n              ip: req.ip,\n              userAgent: req.get('User-Agent'),\n              identifier: req.body?.identifier || 'unknown'\n            });\n          }\n        });\n\n        // API rate limiter\n        this.apiRateLimiter = rateLimit({\n          store: RedisStore ? new RedisStore({\n            client: redisStore,\n            prefix: 'api_limit:',\n            expiry: 15 * 60\n          }) : undefined, // Will fallback to memory store\n          windowMs: 15 * 60 * 1000, // 15 minutes\n          max: config.redisDisabled ? 1000 : 200, // Increased for better reliability\n          message: { error: 'Too many requests, please try again later.' },\n          standardHeaders: true,\n          legacyHeaders: false\n        });\n\n        // General rate limiter\n        this.generalRateLimiter = rateLimit({\n          store: new RedisStore({\n            client: redisStore,\n            prefix: 'general_limit:',\n            expiry: 60 * 60\n          }),\n          windowMs: 60 * 60 * 1000, // 1 hour\n          max: config.redisDisabled ? 10000 : 2000,\n          message: { error: 'Too many requests from this IP, please try again later.' },\n          standardHeaders: true,\n          legacyHeaders: false\n        });\n\n        // Password reset rate limiter\n        this.passwordResetRateLimiter = rateLimit({\n          store: new RedisStore({\n            client: redisStore,\n            prefix: 'password_reset_limit:',\n            expiry: 15 * 60\n          }),\n          windowMs: 15 * 60 * 1000, // 15 minutes\n          max: 5,\n          message: { error: 'Too many password reset requests, please try again later.' },\n          standardHeaders: true,\n          legacyHeaders: false\n        });\n\n        // Dynamic rate limiter based on user behavior\n        this.dynamicRateLimiter = rateLimit({\n          store: new RedisStore({\n            client: redisStore,\n            prefix: 'dynamic_limit:',\n            expiry: 5 * 60 // 5 minutes\n          }),\n          windowMs: 5 * 60 * 1000, // 5 minutes\n          max: async (req, _res) => {\n            return await this.calculateDynamicLimit(req);\n          },\n          message: { error: 'Rate limit exceeded based on behavior analysis' },\n          standardHeaders: true,\n          legacyHeaders: false,\n          skip: (req) => {\n            // Skip rate limiting for admins and known good users\n            return req.user && req.user.role === 'admin';\n          }\n        });\n\n        this.logger.info('Redis-based rate limiters initialized successfully');\n      } else {\n        // Fallback to memory store if Redis is not available\n        this.logger.warn('Redis not available, using memory-based rate limiters');\n        this._createMemoryRateLimiters();\n      }\n    } catch (error) {\n      this.logger.error('Failed to initialize rate limiters:', error);\n      this._createMemoryRateLimiters();\n    }\n  }\n\n  _createMemoryRateLimiters() {\n    this.authRateLimiter = rateLimit({\n      windowMs: 15 * 60 * 1000,\n      max: process.env.NODE_ENV === 'test' || process.env.CYPRESS_API_SKIP ? 20000 : 10,\n      message: { error: 'Too many authentication attempts, please try again later.' },\n      standardHeaders: true,\n      legacyHeaders: false,\n      skip: (req) => req.get('User-Agent') && req.get('User-Agent').includes('Cypress')\n    });\n\n    this.apiRateLimiter = rateLimit({\n      windowMs: 15 * 60 * 1000,\n      max: 200,\n      message: { error: 'Too many requests, please try again later.' },\n      standardHeaders: true,\n      legacyHeaders: false\n    });\n\n    this.generalRateLimiter = rateLimit({\n      windowMs: 60 * 60 * 1000,\n      max: 2000,\n      message: { error: 'Too many requests from this IP, please try again later.' },\n      standardHeaders: true,\n      legacyHeaders: false\n    });\n\n    this.passwordResetRateLimiter = rateLimit({\n      windowMs: 15 * 60 * 1000,\n      max: 5,\n      message: { error: 'Too many password reset requests, please try again later.' },\n      standardHeaders: true,\n      legacyHeaders: false\n    });\n  }\n\n  // Calculate dynamic rate limit based on user behavior\n  async calculateDynamicLimit(req) {\n    try {\n      if (!req.user) {\n        return 10; // Low limit for unauthenticated users\n      }\n\n      const userId = req.user._id.toString();\n      const behaviorScore = await this.getUserBehaviorScore(userId);\n\n      // Adjust limit based on behavior score\n      if (behaviorScore >= 90) {\n        return 500; // High trust user\n      } else if (behaviorScore >= 70) {\n        return 200; // Good behavior\n      } else if (behaviorScore >= 50) {\n        return 50; // Moderate\n      } else if (behaviorScore >= 30) {\n        return 20; // Needs monitoring\n      } else {\n        return 5; // Suspicious or new user\n      }\n    } catch (error) {\n      this.logger.warn('Error calculating dynamic limit:', error);\n      return 25; // Safe default\n    }\n  }\n\n  // Get user behavior score for dynamic rate limiting\n  async getUserBehaviorScore(userId) {\n    try {\n      if (!redisManager.isClientReady()) {\n        return 50; // Neutral score if Redis is not available\n      }\n\n      const behaviorKey = `behavior_score:${userId}`;\n      const score = await redisManager.getCache(behaviorKey);\n\n      if (!score) {\n        // Initialize behavior score for new users\n        await redisManager.setCache(behaviorKey, 50, 86400); // 24 hours\n        return 50;\n      }\n\n      return parseInt(score);\n    } catch (error) {\n      this.logger.error('Error getting user behavior score:', error);\n      return 50;\n    }\n  }\n\n  // Update user behavior score\n  async updateUserBehaviorScore(userId, action) {\n    try {\n      if (!redisManager.isClientReady()) {\n        return;\n      }\n\n      const behaviorKey = `behavior_score:${userId}`;\n      let currentScore = await this.getUserBehaviorScore(userId);\n\n      switch (action) {\n        case 'successful_request':\n          currentScore = Math.min(100, currentScore + 1);\n          break;\n        case 'failed_request':\n          currentScore = Math.max(0, currentScore - 5);\n          break;\n        case 'suspicious_activity':\n          currentScore = Math.max(0, currentScore - 15);\n          break;\n        case 'authentication_failure':\n          currentScore = Math.max(0, currentScore - 10);\n          break;\n        default:\n          break;\n      }\n\n      await redisManager.setCache(behaviorKey, currentScore, 86400); // 24 hours\n    } catch (error) {\n      this.logger.error('Error updating user behavior score:', error);\n    }\n  }\n\n  async registerUser(userData) {\n    try {\n      const { nickname, email, password } = userData;\n\n      // Check if user exists\n      const existingUser = await User.findOne({\n        $or: [{ nickname }, { email }]\n      });\n\n      if (existingUser) {\n        const conflictField = existingUser.nickname === nickname ? 'nickname' : 'email';\n        const errorMessage = conflictField === 'nickname' ? 'Nickname already taken' : 'Email already registered';\n        throw new Error(errorMessage);\n      }\n\n      // Create user\n      const user = new User({ nickname, email, password, role: 'member', status: 'online' });\n      await user.save();\n\n      this.logger.info(`User registered: ${user.nickname}`);\n      return user;\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  async loginUser(identifier, password, captchaToken = null) {\n    try {\n      // Find user by nickname or email\n      const user = await User.findOne({\n        $or: [{ nickname: identifier }, { email: identifier }]\n      });\n\n      if (!user) {\n        // Log IP-based attempt for tracking\n        this.logger.warn('Login attempt with non-existent user', { identifier, ip: 'tracked' });\n        throw new Error('Invalid credentials');\n      }\n\n      // Check if account is locked\n      if (user.isAccountLocked()) {\n        const lockTimeRemaining = Math.ceil((user.accountLockedUntil - new Date()) / 1000 / 60);\n        throw new Error(`Account temporarily locked due to multiple failed attempts. Try again in ${lockTimeRemaining} minutes.`);\n      }\n\n      // Check if CAPTCHA is required\n      if (user.captchaRequired && !captchaToken) {\n        // For now, simulate CAPTCHA by requiring a specific token\n        // In production, integrate with Google reCAPTCHA or similar\n        throw new Error('CAPTCHA verification required due to previous failed attempts.');\n      }\n\n      // Compare password\n      const isPasswordValid = await user.comparePassword(password);\n\n      if (!isPasswordValid) {\n        // Increment failed attempts\n        await user.incFailedAttempts();\n\n        // Log security event\n        this.logger.warn('Failed login attempt', {\n          userId: user._id,\n          nickname: user.nickname,\n          attempts: user.failedLoginAttempts,\n          captchaRequired: user.captchaRequired,\n          lockedUntil: user.accountLockedUntil\n        });\n\n        throw new Error('Invalid credentials');\n      }\n\n      // Successful login - reset failed attempts\n      await user.resetFailedAttempts();\n\n      // Update user status to online\n      user.status = 'online';\n      await user.save();\n\n      this.logger.info(`User logged in successfully: ${user.nickname}`);\n      return user;\n    } catch (error) {\n      this.logger.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  generateToken(user, sessionId, csrfToken) {\n    const token = jwt.sign(\n      {\n        userId: user._id,\n        nickname: user.nickname,\n        role: user.role,\n        csrfToken: csrfToken,\n        sessionId: sessionId\n      },\n      config.security.jwtSecret,\n      { expiresIn: '24h' }\n    );\n    return token;\n  }\n\n  generateCsrfToken() {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  async logoutUser(userId) {\n    try {\n      await User.findByIdAndUpdate(userId, {\n        status: 'offline',\n        lastActive: new Date()\n      });\n      this.logger.info(`User logged out: ${userId}`);\n    } catch (error) {\n      this.logger.error('Logout error:', error);\n      throw error;\n    }\n  }\n\n  async getUserFromToken(token) {\n    try {\n      const decoded = jwt.verify(token, config.security.jwtSecret);\n      const user = await User.findById(decoded.userId);\n\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.warn('Token verification failed:', error.message);\n      throw error;\n    }\n  }\n\n  async validateSession(session) {\n    try {\n      if (!session || !session.authenticated || !session.userId) {\n        return null;\n      }\n\n      const user = await User.findById(session.userId);\n      if (!user) {\n        return null;\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Session validation error:', error);\n      return null;\n    }\n  }\n\n  // Enable 2FA for user\n  async enable2FA(userId) {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      const secret = await user.generate2FASecret();\n      const qrCodeUrl = `otpauth://totp/Chat-JS(${user.nickname})?secret=${secret.base32}&issuer=Chat-JS`;\n\n      return {\n        secret: secret.base32,\n        qrCodeUrl: qrCodeUrl,\n        backupCodes: user.backupCodes\n      };\n    } catch (error) {\n      this.logger.error('Enable 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // Confirm 2FA setup\n  async confirm2FA(userId, code) {\n    try {\n      const user = await User.findById(userId);\n      if (!user || !user.twoFactorSecret) {\n        throw new Error('2FA not initialized');\n      }\n\n      const isValid = user.verify2FACode(code);\n      if (!isValid) {\n        throw new Error('Invalid 2FA code');\n      }\n\n      await user.enable2FA();\n      return { success: true, message: '2FA enabled successfully' };\n    } catch (error) {\n      this.logger.error('Confirm 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // Disable 2FA for user\n  async disable2FA(userId, password) {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Verify password before disabling\n      const isPasswordValid = await user.comparePassword(password);\n      if (!isPasswordValid) {\n        throw new Error('Invalid password');\n      }\n\n      await user.disable2FA();\n      return { success: true, message: '2FA disabled successfully' };\n    } catch (error) {\n      this.logger.error('Disable 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // Verify 2FA code for login\n  async verify2FACode(userId, code) {\n    try {\n      const user = await User.findById(userId);\n      if (!user || !user.twoFactorEnabled) {\n        return { success: false, message: '2FA not enabled' };\n      }\n\n      const isValid = user.verify2FACode(code) || user.verify2FACode(code, true);\n      if (!isValid) {\n        throw new Error('Invalid 2FA code');\n      }\n\n      return { success: true, message: '2FA verified successfully' };\n    } catch (error) {\n      this.logger.error('Verify 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // ***** AUTHENTICATION MIDDLEWARE METHODS *****\n\n  // Enhanced session authentication middleware with Redis support\n  async authenticateSession(req, res, next) {\n    try {\n      console.log('🔐 Session authentication middleware called:', {\n        url: req.url,\n        method: req.method,\n        sessionId: req.sessionID,\n        sessionExists: !!req.session,\n        sessionData: req.session ? {\n          authenticated: req.session.authenticated,\n          userId: req.session.userId,\n          nickname: req.session.nickname,\n          role: req.session.role,\n          loginTime: req.session.loginTime,\n          csrfToken: req.session.csrfToken?.substring(0, 8) + '...'\n        } : null\n      });\n\n      let sessionData = null;\n\n      // First try to get session from Redis\n      if (this.redisManager.isClientReady() && req.sessionID) {\n        sessionData = await this.getSessionData(req.sessionID);\n      }\n\n      // Fallback to Express session if Redis session not found\n      if (!sessionData && req.session && req.session.authenticated) {\n        sessionData = {\n          authenticated: req.session.authenticated,\n          userId: req.session.userId,\n          nickname: req.session.nickname,\n          role: req.session.role,\n          loginTime: req.session.loginTime,\n          csrfToken: req.session.csrfToken,\n          userAgent: req.session.userAgent\n        };\n      }\n\n      // Check if session exists and has authenticated user\n      if (sessionData && sessionData.authenticated && sessionData.userId) {\n        console.log('🎯 Found authenticated session for userId:', sessionData.userId);\n        console.log('🔓 Session fingerprint check:', {\n          sid: req.sessionID,\n          csrfToken: sessionData.csrfToken?.substring(0, 4) + '...',\n          userAgent: sessionData.userAgent?.substring(0, 20) + '...',\n          loginTime: sessionData.loginTime\n        });\n\n        const user = await User.findById(sessionData.userId);\n        if (user) {\n          console.log('✅ Session user found in DB:', {\n            nickname: user.nickname,\n            id: user._id,\n            status: user.status,\n            sessionValid: true\n          });\n          req.sessionUser = user; // Store in req.sessionUser to avoid conflict with JWT req.user\n\n          // Update session last activity in Redis\n          if (this.redisManager.isClientReady()) {\n            sessionData.lastActivity = new Date().toISOString();\n            await this.setSessionData(req.sessionID, sessionData);\n          }\n\n          // Update Express session as well\n          if (req.session.csrfToken && req.session.userAgent) {\n            req.session.lastSessionCheck = new Date().toISOString();\n            console.log('🔐 Session fingerprint verified and updated');\n          }\n        } else {\n          console.log('⚠️ Session user not found in DB, cleaning session:', sessionData.userId);\n          // Clean invalid session from Redis\n          if (this.redisManager.isClientReady()) {\n            await this.deleteSessionData(req.sessionID);\n          }\n          // Clean Express session\n          delete req.session.authenticated;\n          delete req.session.userId;\n          delete req.session.nickname;\n          delete req.session.role;\n        }\n      } else {\n        console.log('🔍 No authenticated session found or session not initialized', {\n          sessionId: req.sessionID,\n          session: !!req.session,\n          authenticated: req.session?.authenticated,\n          userId: req.session?.userId,\n          redisSessionFound: !!sessionData\n        });\n        req.sessionUser = null; // Explicitly set to null when no session\n      }\n      next();\n    } catch (error) {\n      winston.warn('Session authentication error:', {\n        error: error.message,\n        sessionId: req.sessionID,\n        ip: req.ip\n      });\n      req.sessionUser = null; // Set to null on error\n      next();\n    }\n  }\n\n  // JWT authentication middleware (extracted from server.js)\n  async authenticateToken(req, res, next) {\n    try {\n      console.log('🔐 JWT authentication middleware called:', { url: req.url, method: req.method });\n      const authHeader = req.headers['authorization'];\n      const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n      console.log('🔑 Token extraction result:', { hasAuthHeader: !!authHeader, hasToken: !!token });\n\n      if (!token) {\n        console.log('❌ No token provided');\n        return res.status(401).json({\n          error: 'Access token required',\n          code: 'NO_TOKEN'\n        });\n      }\n\n      const decoded = jwt.verify(token, config.security.jwtSecret);\n      console.log('✅ JWT decoded:', { userId: decoded.userId, nickname: decoded.nickname });\n      const user = await User.findById(decoded.userId);\n\n      if (!user) {\n        console.log('❌ User not found in DB for JWT userId:', decoded.userId);\n        return res.status(401).json({\n          error: 'User not found',\n          code: 'USER_NOT_FOUND'\n        });\n      }\n\n      req.user = user;\n      console.log('✅ JWT authentication successful for user:', user.nickname, { id: user._id, status: user.status });\n      next();\n    } catch (error) {\n      winston.warn('JWT authentication failed:', {\n        error: error.message,\n        ip: req.ip\n      });\n\n      if (error.name === 'JsonWebTokenError') {\n        return res.status(401).json({\n          error: 'Invalid token format',\n          code: 'INVALID_TOKEN_FORMAT'\n        });\n      }\n\n      if (error.name === 'TokenExpiredError') {\n        return res.status(401).json({\n          error: 'Token has expired',\n          code: 'TOKEN_EXPIRED'\n        });\n      }\n\n      return res.status(401).json({\n        error: 'Token verification failed',\n        code: 'TOKEN_VERIFICATION_FAILED'\n      });\n    }\n  }\n\n  // Role-based access control middleware - Moderator required\n  async requireModerator(req, res, next) {\n    try {\n      if (!req.user) {\n        return res.status(401).json({\n          error: 'Authentication required',\n          code: 'AUTH_REQUIRED'\n        });\n      }\n\n      if (!req.user.hasModeratorPrivileges()) {\n        return res.status(403).json({\n          error: 'Moderator privileges required',\n          code: 'MODERATOR_REQUIRED'\n        });\n      }\n\n      next();\n    } catch (error) {\n      winston.error('Moderator check error:', error);\n      res.status(500).json({\n        error: 'Server error during authorization check',\n        code: 'AUTH_CHECK_ERROR'\n      });\n    }\n  }\n\n  // Role-based access control middleware - Admin required\n  async requireAdmin(req, res, next) {\n    try {\n      if (!req.user) {\n        return res.status(401).json({\n          error: 'Authentication required',\n          code: 'AUTH_REQUIRED'\n        });\n      }\n\n      if (!req.user.hasAdminPrivileges()) {\n        return res.status(403).json({\n          error: 'Administrator privileges required',\n          code: 'ADMIN_REQUIRED'\n        });\n      }\n\n      next();\n    } catch (error) {\n      winston.error('Admin check error:', error);\n      res.status(500).json({\n        error: 'Server error during authorization check',\n        code: 'AUTH_CHECK_ERROR'\n      });\n    }\n  }\n\n  // JWT token verification utility\n  async verifyJWTToken(token) {\n    try {\n      const decoded = jwt.verify(token, config.security.jwtSecret);\n      const user = await User.findById(decoded.userId);\n\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      return { valid: true, user, decoded };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message,\n        user: null,\n        decoded: null\n      };\n    }\n  }\n\n  // ***** SESSION MANAGEMENT METHODS *****\n\n  // Create new user session with enhanced security features\n  async createSession(req, user, csrfToken) {\n    try {\n      console.log('🔏 Creating and storing user session for user:', user.nickname);\n      console.log('🏷️ Generating sessionId:', req.sessionId);\n\n      const sessionData = {\n        authenticated: true,\n        userId: user._id.toString(),\n        nickname: user.nickname,\n        role: user.role,\n        csrfToken: csrfToken,\n        loginTime: new Date().toISOString(),\n        userAgent: req.get('User-Agent'),\n        fingerprint: {\n          csrfTokenHash: crypto.createHash('sha256').update(csrfToken).digest('hex').substring(0, 16),\n          loginTime: new Date().toISOString()\n        }\n      };\n\n      // Store in Redis with proper TTL\n      if (this.redisManager.isClientReady()) {\n        await this.redisManager.setSession(req.sessionId, sessionData, 86400); // 24 hours\n      }\n\n      // Also store in Express session for backward compatibility\n      req.session.authenticated = true;\n      req.session.userId = user._id.toString();\n      req.session.nickname = user.nickname;\n      req.session.role = user.role;\n      req.session.csrfToken = csrfToken;\n      req.session.loginTime = sessionData.loginTime;\n      req.session.userAgent = sessionData.userAgent;\n\n      console.log('🔓 Session fingerprint generated:', {\n        csrfTokenHash: crypto.createHash('sha256').update(csrfToken).digest('hex').substring(0, 8),\n        userAgentLength: req.session.userAgent?.length,\n        loginTime: req.session.loginTime\n      });\n\n      return {\n        authenticated: true,\n        id: req.sessionId,\n        expires: req.session.cookie.expires,\n        userAgent: req.session.userAgent,\n        fingerprint: sessionData.fingerprint\n      };\n    } catch (error) {\n      this.logger.error('Error creating user session:', error);\n      throw error;\n    }\n  }\n\n  // Destroy user session from both Redis and Express session\n  async destroySession(req) {\n    try {\n      console.log('🚪 Session logout request, sessionId:', req.sessionId);\n\n      // Check if there's an authenticated session\n      const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n\n      if (hasSessionAuth) {\n        const sessionUserId = req.session && req.session.userId;\n\n        if (sessionUserId) {\n          const sessionUser = await User.findById(sessionUserId);\n          const nickname = sessionUser ? sessionUser.nickname : 'unknown';\n\n          console.log('✅ Session logout: Destroying session for user:', nickname);\n\n          // Destroy from Redis\n          if (this.redisManager.isClientReady()) {\n            await this.redisManager.deleteSession(req.sessionId);\n          }\n\n          // Destroy Express session\n          await new Promise((resolve, reject) => {\n            req.session.destroy((err) => {\n              if (err) {\n                console.error('❌ Session destroy error:', err);\n                reject(err);\n              } else {\n                console.log('✅ Session destroyed successfully');\n                resolve();\n              }\n            });\n          });\n\n          this.logger.info(`Session logged out: ${nickname}`, {\n            sessionId: req.sessionId,\n            ip: req.ip\n          });\n\n          return { success: true, message: 'Session logged out successfully' };\n        }\n      }\n\n      console.log('⚠️ Session logout: No authenticated session to destroy');\n      return { success: true, message: 'No active session to log out' };\n    } catch (error) {\n      this.logger.error('Session logout error:', error);\n      throw error;\n    }\n  }\n\n  // Get session from Redis with fallback to Express session\n  async getSessionData(sessionId) {\n    try {\n      if (this.redisManager.isClientReady()) {\n        return await this.redisManager.getSession(sessionId);\n      }\n      return null;\n    } catch (error) {\n      this.logger.warn('Error retrieving session from Redis:', error);\n      return null;\n    }\n  }\n\n  // Store session data in Redis\n  async setSessionData(sessionId, data, ttl = 86400) {\n    try {\n      if (this.redisManager.isClientReady()) {\n        await this.redisManager.setSession(sessionId, data, ttl);\n      }\n    } catch (error) {\n      this.logger.error('Error storing session in Redis:', error);\n    }\n  }\n\n  // Delete session from Redis\n  async deleteSessionData(sessionId) {\n    try {\n      if (this.redisManager.isClientReady()) {\n        await this.redisManager.deleteSession(sessionId);\n      }\n    } catch (error) {\n      this.logger.error('Error deleting session from Redis:', error);\n    }\n  }\n\n  // Validate and enhance session\n  async validateAndEnhanceSession(req, res, next) {\n    try {\n      // Basic authentication middleware already handled session validation\n      // This method can be used to add additional session validation logic\n      if (req.sessionUser) {\n        // Update session last activity\n        req.session.lastActivity = new Date().toISOString();\n        await new Promise((resolve) => {\n          req.session.save((err) => {\n            if (!err) {\n              console.log('📝 Session last activity updated');\n            }\n            resolve();\n          });\n        });\n      }\n\n      next();\n    } catch (error) {\n      winston.warn('Session validation error:', error);\n      next();\n    }\n  }\n\n  // Handle login with session creation (extracted from server.js)\n  async handleLoginWithSession(identifier, password, req, res, _connectionManager = null) {\n    try {\n      console.log('🔑 Incoming login request:', { identifier: identifier, hasPassword: !!password, ip: req.ip });\n\n      // Validate input\n      if (!identifier || !password) {\n        return res.status(400).json({ errors: [{ msg: 'Identifier and password are required' }] });\n      }\n\n      // Authenticate user\n      const user = await this.loginUser(identifier, password);\n\n      // Handle banned users\n      if (user.banned) {\n        return res.status(403).json({\n          error: 'Account is banned',\n          reason: user.banReason,\n          expires: user.banExpires\n        });\n      }\n\n      // Generate CSRF token\n      const csrfToken = this.generateCsrfToken();\n\n      // Create session\n      const sessionInfo = await this.createSession(req, user, csrfToken);\n\n      // Generate JWT token\n      console.log('🔏 Generating JWT token for user:', user.nickname);\n      const token = this.generateToken(user, req.sessionId, csrfToken);\n\n      console.log('✅ JWT token generated successfully');\n\n      this.logger.info(`User logged in: ${user.nickname}`);\n\n      console.log('📤 Sending login response');\n\n      // Clean user data for response\n      const responseUser = {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role,\n        status: user.status\n      };\n\n      return res.json({\n        token, // JWT for API calls and WebSockets\n        user: responseUser,\n        session: sessionInfo\n      });\n    } catch (error) {\n      this.logger.error('Login error:', error);\n\n      // Handle specific error types\n      if (error.message.includes('Invalid credentials')) {\n        return res.status(400).json({ error: 'Invalid credentials' });\n      }\n\n      if (error.message.includes('Account temporarily locked')) {\n        return res.status(429).json({\n          error: error.message,\n          code: 'ACCOUNT_LOCKED'\n        });\n      }\n\n      return res.status(500).json({ error: 'Server error during login' });\n    }\n  }\n\n  // Handle registration with session creation (extracted from server.js)\n  async handleRegistrationWithSession(userData, req, res) {\n    try {\n      const { nickname, email, password } = userData;\n\n      // Validate input\n      if (!nickname || !email || !password) {\n        return res.status(400).json({ errors: [{ msg: 'Nickname, email, and password are required' }] });\n      }\n\n      // Register user\n      const user = await this.registerUser(userData);\n\n      // Generate CSRF token\n      const csrfToken = this.generateCsrfToken();\n\n      // Create session\n      const sessionInfo = await this.createSession(req, user, csrfToken);\n\n      console.log('JWT_SECRET present:', !!config.security.jwtSecret);\n      const token = this.generateToken(user, req.sessionId, csrfToken);\n\n      console.log('JWT token generated successfully');\n      this.logger.info(`User registered: ${user.nickname}`);\n\n      return res.status(201).json({\n        token, // JWT for API calls and WebSockets\n        user: {\n          id: user._id,\n          nickname: user.nickname,\n          email: user.email,\n          role: user.role,\n          status: user.status\n        },\n        session: sessionInfo\n      });\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n\n      if (error.message.includes('already taken') || error.message.includes('already registered')) {\n        return res.status(409).json({ error: error.message });\n      }\n\n      return res.status(500).json({ error: 'Server error during registration' });\n    }\n  }\n}\n\nmodule.exports = new AuthService();"],"mappings":"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","ignoreList":[]}