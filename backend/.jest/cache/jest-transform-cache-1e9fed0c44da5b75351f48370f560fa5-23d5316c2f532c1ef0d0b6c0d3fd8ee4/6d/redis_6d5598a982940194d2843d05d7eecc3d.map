{"version":3,"names":["Redis","require","config","winston","RedisManager","constructor","client","isConnected","memoryCheckInterval","logger","createLogger","level","format","json","transports","Console","simple","connect","redis","enableCluster","Cluster","host","port","password","db","redisOptions","keyPrefix","connectTimeout","commandTimeout","maxRetriesPerRequest","retryDelayOnFailover","clusterOptions","cluster","on","info","error","message","startMemoryMonitoring","stopMemoryMonitoring","ping","disconnect","quit","getClient","isClientReady","memoryMonitoring","enabled","setInterval","memoryInfo","usedMemory","parseInt","split","find","line","startsWith","maxMemory","memoryPercentage","thresholds","critical","toFixed","handleMemoryPressure","warning","warn","checkInterval","clearInterval","isCritical","keys","cachePrefix","then","length","del","sessionPrefix","key","ttl","expire","setSession","sessionId","data","sessionTTL","Error","set","JSON","stringify","getSession","get","parse","deleteSession","setCache","cacheTTL","cacheKey","getCache","deleteCache","clearCache","pattern","cacheKeyPattern","redisManager","module","exports","isReady"],"sources":["redis.js"],"sourcesContent":["const Redis = require('ioredis');\nconst config = require('./index');\nconst winston = require('winston');\n\nclass RedisManager {\n  constructor() {\n    this.client = null;\n    this.isConnected = false;\n    this.memoryCheckInterval = null;\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.json(),\n      transports: [\n        new winston.transports.Console({\n          format: winston.format.simple()\n        })\n      ]\n    });\n  }\n\n  async connect() {\n    try {\n      if (config.redis.enableCluster) {\n        this.client = new Redis.Cluster([\n          {\n            host: config.redis.host,\n            port: config.redis.port,\n            password: config.redis.password,\n            db: config.redis.db\n          }\n        ], {\n          redisOptions: {\n            keyPrefix: config.redis.keyPrefix,\n            connectTimeout: config.redis.connectTimeout,\n            commandTimeout: config.redis.commandTimeout,\n            maxRetriesPerRequest: config.redis.maxRetriesPerRequest,\n            retryDelayOnFailover: config.redis.retryDelayOnFailover\n          },\n          clusterOptions: config.redis.cluster\n        });\n      } else {\n        this.client = new Redis({\n          host: config.redis.host,\n          port: config.redis.port,\n          password: config.redis.password,\n          db: config.redis.db,\n          keyPrefix: config.redis.keyPrefix,\n          connectTimeout: config.redis.connectTimeout,\n          commandTimeout: config.redis.commandTimeout,\n          maxRetriesPerRequest: config.redis.maxRetriesPerRequest,\n          retryDelayOnFailover: config.redis.retryDelayOnFailover\n        });\n      }\n\n      this.client.on('connect', () => {\n        this.isConnected = true;\n        this.logger.info('Redis connected successfully');\n      });\n\n      this.client.on('error', (error) => {\n        this.logger.error('Redis connection error:', error.message);\n        this.isConnected = false;\n      });\n\n      this.client.on('ready', () => {\n        this.logger.info('Redis client ready');\n        this.startMemoryMonitoring();\n      });\n\n      this.client.on('close', () => {\n        this.logger.info('Redis connection closed');\n        this.isConnected = false;\n        this.stopMemoryMonitoring();\n      });\n\n      // Wait for connection\n      await this.client.ping();\n\n      return this.client;\n    } catch (error) {\n      this.logger.error('Failed to connect to Redis:', error.message);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    if (this.client) {\n      this.stopMemoryMonitoring();\n      await this.client.quit();\n      this.isConnected = false;\n      this.logger.info('Redis connection closed');\n    }\n  }\n\n  getClient() {\n    return this.client;\n  }\n\n  isClientReady() {\n    return this.client && this.isConnected;\n  }\n\n  startMemoryMonitoring() {\n    if (!config.redis.memoryMonitoring.enabled) {\n      return;\n    }\n\n    this.memoryCheckInterval = setInterval(async () => {\n      try {\n        if (!this.isClientReady()) {\n          return;\n        }\n\n        const memoryInfo = await this.client.info('memory');\n        const usedMemory = parseInt(memoryInfo.split('\\n')\n          .find(line => line.startsWith('used_memory:'))\n          .split(':')[1]);\n        const maxMemory = await this.client.config('GET', 'maxmemory');\n\n        if (maxMemory && maxMemory[1] !== '0') {\n          const memoryPercentage = usedMemory / parseInt(maxMemory[1]);\n\n          if (memoryPercentage >= config.redis.memoryMonitoring.thresholds.critical) {\n            this.logger.error(`Redis memory usage critical: ${(memoryPercentage * 100).toFixed(2)}%`);\n            // Trigger critical memory handling\n            await this.handleMemoryPressure(true);\n          } else if (memoryPercentage >= config.redis.memoryMonitoring.thresholds.warning) {\n            this.logger.warn(`Redis memory usage high: ${(memoryPercentage * 100).toFixed(2)}%`);\n            // Trigger warning memory handling\n            await this.handleMemoryPressure(false);\n          }\n        }\n      } catch (error) {\n        this.logger.error('Error monitoring Redis memory:', error.message);\n      }\n    }, config.redis.memoryMonitoring.checkInterval);\n  }\n\n  stopMemoryMonitoring() {\n    if (this.memoryCheckInterval) {\n      clearInterval(this.memoryCheckInterval);\n      this.memoryCheckInterval = null;\n    }\n  }\n\n  async handleMemoryPressure(isCritical) {\n    try {\n      // Implement memory pressure handling logic\n      if (isCritical) {\n        // Aggressive cache cleanup\n        await this.client.keys(`${config.redis.cachePrefix}*`)\n          .then(keys => {\n            if (keys.length > 0) {\n              return this.client.del(keys);\n            }\n          });\n\n        // Expire old sessions\n        await this.client.keys(`${config.redis.sessionPrefix}*`)\n          .then(async (keys) => {\n            for (const key of keys) {\n              const ttl = await this.client.ttl(key);\n              if (ttl === -1 || ttl > 36000) { // Sessions older than 10 hours\n                await this.client.expire(key, 3600); // Set to 1 hour\n              }\n            }\n          });\n      } else {\n        // Normal cleanup - remove expired cache items\n        await this.client.keys(`${config.redis.cachePrefix}*`)\n          .then(async (keys) => {\n            for (const key of keys) {\n              const ttl = await this.client.ttl(key);\n              if (ttl === -2) { // Expired keys\n                await this.client.del(key);\n              }\n            }\n          });\n      }\n\n      this.logger.info(`Memory pressure handling completed (critical: ${isCritical})`);\n    } catch (error) {\n      this.logger.error('Error handling memory pressure:', error.message);\n    }\n  }\n\n  // Helper methods for common Redis operations\n  async setSession(sessionId, data, ttl = config.redis.sessionTTL) {\n    if (!this.isClientReady()) {\n      throw new Error('Redis client not ready');\n    }\n    const key = `${config.redis.sessionPrefix}${sessionId}`;\n    await this.client.set(key, JSON.stringify(data), 'EX', ttl);\n  }\n\n  async getSession(sessionId) {\n    if (!this.isClientReady()) {\n      return null;\n    }\n    const key = `${config.redis.sessionPrefix}${sessionId}`;\n    const data = await this.client.get(key);\n    return data ? JSON.parse(data) : null;\n  }\n\n  async deleteSession(sessionId) {\n    if (!this.isClientReady()) {\n      return;\n    }\n    const key = `${config.redis.sessionPrefix}${sessionId}`;\n    await this.client.del(key);\n  }\n\n  async setCache(key, data, ttl = config.redis.cacheTTL) {\n    if (!this.isClientReady()) {\n      throw new Error('Redis client not ready');\n    }\n    const cacheKey = `${config.redis.cachePrefix}${key}`;\n    await this.client.set(cacheKey, JSON.stringify(data), 'EX', ttl);\n  }\n\n  async getCache(key) {\n    if (!this.isClientReady()) {\n      return null;\n    }\n    const cacheKey = `${config.redis.cachePrefix}${key}`;\n    const data = await this.client.get(cacheKey);\n    return data ? JSON.parse(data) : null;\n  }\n\n  async deleteCache(key) {\n    if (!this.isClientReady()) {\n      return;\n    }\n    const cacheKey = `${config.redis.cachePrefix}${key}`;\n    await this.client.del(cacheKey);\n  }\n\n  async clearCache(pattern) {\n    if (!this.isClientReady()) {\n      return;\n    }\n    const cacheKeyPattern = `${config.redis.cachePrefix}${pattern}`;\n    const keys = await this.client.keys(cacheKeyPattern);\n    if (keys.length > 0) {\n      await this.client.del(keys);\n    }\n  }\n}\n\n// Export a singleton instance\nconst redisManager = new RedisManager();\n\nmodule.exports = {\n  redisManager,\n  client: () => redisManager.getClient(),\n  connect: () => redisManager.connect(),\n  disconnect: () => redisManager.disconnect(),\n  isReady: () => redisManager.isClientReady(),\n  // Convenience exports for common operations\n  setSession: (sessionId, data, ttl) => redisManager.setSession(sessionId, data, ttl),\n  getSession: (sessionId) => redisManager.getSession(sessionId),\n  deleteSession: (sessionId) => redisManager.deleteSession(sessionId),\n  setCache: (key, data, ttl) => redisManager.setCache(key, data, ttl),\n  getCache: (key) => redisManager.getCache(key),\n  deleteCache: (key) => redisManager.deleteCache(key),\n  clearCache: (pattern) => redisManager.clearCache(pattern)\n};"],"mappings":"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","ignoreList":[]}