{"version":3,"names":["cov_1055pu2obn","actualCoverage","mongoose","s","require","bcrypt","crypto","userSchema","Schema","nickname","type","String","required","unique","trim","minlength","maxlength","index","email","lowercase","password","role","enum","default","createdAt","Date","now","lastActive","status","banned","Boolean","banReason","banExpires","warnings","reason","issuedBy","Types","ObjectId","ref","issuedAt","expires","muteExpires","failedLoginAttempts","Number","lastFailedAttempt","accountLockedUntil","captchaRequired","securityToken","twoFactorEnabled","twoFactorSecret","backupCodes","twoFactorMethod","last2FACode","last2FACodeExpiry","resetPasswordToken","resetPasswordExpires","moderationToken","moderationTokenExpires","pre","next","f","isModified","b","console","log","salt","genSalt","hash","error","message","methods","comparePassword","candidatePassword","compare","generateResetToken","resetToken","randomBytes","toString","createHash","update","digest","resetPassword","token","newPassword","hashedToken","Error","save","ban","duration","unban","isBanned","warn","warning","push","cleanWarnings","filter","getActiveWarningsCount","length","mute","unmute","isMuted","generateModerationToken","then","verifyModerationToken","hasModeratorPrivileges","hasAdminPrivileges","isAccountLocked","incFailedAttempts","resetFailedAttempts","generateSecurityToken","clearSecurityToken","generate2FASecret","speakeasy","secret","generateSecret","name","issuer","base32","enable2FA","method","i","code","toUpperCase","disable2FA","verify2FACode","useBackup","includes","bc","totp","verify","encoding","window","toJSON","userObject","toObject","module","exports","model"],"sources":["User.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst crypto = require('crypto');\n\nconst userSchema = new mongoose.Schema({\n  nickname: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 50,\n    index: true // Remove duplicate index call below\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true,\n    index: true // Remove duplicate index call below\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  role: {\n    type: String,\n    enum: ['admin', 'moderator', 'member'],\n    default: 'member'\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  lastActive: {\n    type: Date,\n    default: Date.now\n  },\n  status: {\n    type: String,\n    enum: ['online', 'offline'],\n    default: 'offline'\n  },\n  // Moderation fields\n  banned: {\n    type: Boolean,\n    default: false\n  },\n  banReason: {\n    type: String,\n    default: null\n  },\n  banExpires: {\n    type: Date,\n    default: null\n  },\n  warnings: [{\n    reason: String,\n    issuedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n    issuedAt: { type: Date, default: Date.now },\n    expires: Date\n  }],\n  muteExpires: {\n    type: Date,\n    default: null\n  },\n  // Security fields for brute-force protection\n  failedLoginAttempts: {\n    type: Number,\n    default: 0\n  },\n  lastFailedAttempt: {\n    type: Date,\n    default: null\n  },\n  accountLockedUntil: {\n    type: Date,\n    default: null\n  },\n  captchaRequired: {\n    type: Boolean,\n    default: false\n  },\n  securityToken: {\n    type: String,\n    default: null\n  },\n  // Two-Factor Authentication (2FA/OTP) fields\n  twoFactorEnabled: {\n    type: Boolean,\n    default: false\n  },\n  twoFactorSecret: {\n    type: String,\n    default: null\n  },\n  backupCodes: [{\n    type: String,\n    default: []\n  }],\n  twoFactorMethod: {\n    type: String,\n    enum: ['TOTP', 'SMS', 'EMAIL'],\n    default: 'TOTP'\n  },\n  last2FACode: {\n    type: String,\n    default: null\n  },\n  last2FACodeExpiry: {\n    type: Date,\n    default: null\n  },\n  // Temporary tokens\n  resetPasswordToken: {\n    type: String,\n    default: null\n  },\n  resetPasswordExpires: {\n    type: Date,\n    default: null\n  },\n  moderationToken: {\n    type: String,\n    default: null\n  },\n  moderationTokenExpires: {\n    type: Date,\n    default: null\n  }\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n   if (!this.isModified('password')) return next();\n\n   console.log('Hashing password for user:', this.nickname);\n   try {\n     const salt = await bcrypt.genSalt(12);\n     console.log('Salt generated:', salt);\n     this.password = await bcrypt.hash(this.password, salt);\n     console.log('Password hashed successfully');\n     next();\n   } catch (error) {\n     console.error('Error hashing password:', error.message);\n     next(error);\n   }\n });\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Generate reset password token\nuserSchema.methods.generateResetToken = function() {\n  // Generate random token\n  const resetToken = crypto.randomBytes(32).toString('hex');\n\n  // Hash token before storing\n  this.resetPasswordToken = crypto\n    .createHash('sha256')\n    .update(resetToken)\n    .digest('hex');\n\n  // Set expiration (1 hour from now)\n  this.resetPasswordExpires = Date.now() + 60 * 60 * 1000; // 1 hour\n\n  return resetToken;\n};\n\n// Reset password using token\nuserSchema.methods.resetPassword = function(token, newPassword) {\n  const hashedToken = crypto\n    .createHash('sha256')\n    .update(token)\n    .digest('hex');\n\n  if (hashedToken !== this.resetPasswordToken) {\n    throw new Error('Invalid or expired password reset token');\n  }\n\n  if (Date.now() > this.resetPasswordExpires) {\n    throw new Error('Password reset token has expired');\n  }\n\n  this.password = newPassword;\n  this.resetPasswordToken = null;\n  this.resetPasswordExpires = null;\n\n  return this.save();\n};\n\n// Ban user\nuserSchema.methods.ban = function(reason, duration = null, issuedBy = null) {\n  this.banned = true;\n  this.banReason = reason;\n  if (duration) {\n    this.banExpires = new Date(Date.now() + duration);\n  } else {\n    this.banExpires = null; // permanent ban\n  }\n  return this.save();\n};\n\n// Unban user\nuserSchema.methods.unban = function() {\n  this.banned = false;\n  this.banReason = null;\n  this.banExpires = null;\n  return this.save();\n};\n\n// Check if user is banned and if ban is active\nuserSchema.methods.isBanned = function() {\n  if (!this.banned) return false;\n  if (!this.banExpires) return true; // permanent ban\n  return this.banExpires > new Date(); // temporary ban still active\n};\n\n// Add warning to user\nuserSchema.methods.warn = function(reason, issuedBy, duration = null) {\n  const warning = {\n    reason: reason,\n    issuedBy: issuedBy,\n    issuedAt: new Date(),\n    expires: duration ? new Date(Date.now() + duration) : null\n  };\n  this.warnings.push(warning);\n  return this.save();\n};\n\n// Remove expired warnings\nuserSchema.methods.cleanWarnings = function() {\n  this.warnings = this.warnings.filter(warning => {\n    return !warning.expires || warning.expires > new Date();\n  });\n  return this.save();\n};\n\n// Get active warnings count\nuserSchema.methods.getActiveWarningsCount = function() {\n  this.cleanWarnings();\n  return this.warnings.length;\n};\n\n// Mute user (for chat)\nuserSchema.methods.mute = function(duration = 3600000) { // default 1 hour\n  this.muteExpires = new Date(Date.now() + duration);\n  return this.save();\n};\n\n// Unmute user\nuserSchema.methods.unmute = function() {\n  this.muteExpires = null;\n  return this.save();\n};\n\n// Check if user is muted\nuserSchema.methods.isMuted = function() {\n  return this.muteExpires && this.muteExpires > new Date();\n};\n\n// Generate moderation token for admin actions\nuserSchema.methods.generateModerationToken = function() {\n  const moderationToken = crypto.randomBytes(32).toString('hex');\n  this.moderationToken = crypto\n    .createHash('sha256')\n    .update(moderationToken)\n    .digest('hex');\n  this.moderationTokenExpires = Date.now() + 3600000; // 1 hour\n  return this.save().then(() => moderationToken);\n};\n\n// Verify moderation token\nuserSchema.methods.verifyModerationToken = function(token) {\n  const hashedToken = crypto\n    .createHash('sha256')\n    .update(token)\n    .digest('hex');\n\n  if (hashedToken !== this.moderationToken) {\n    throw new Error('Invalid moderation token');\n  }\n\n  if (Date.now() > this.moderationTokenExpires) {\n    throw new Error('Moderation token expired');\n  }\n\n  this.moderationToken = null;\n  this.moderationTokenExpires = null;\n  return this.save();\n};\n\n// Check if user has moderator/admin permissions\nuserSchema.methods.hasModeratorPrivileges = function() {\n  return this.role === 'admin' || this.role === 'moderator';\n};\n\nuserSchema.methods.hasAdminPrivileges = function() {\n  return this.role === 'admin';\n};\n\n// Check if account is locked\nuserSchema.methods.isAccountLocked = function() {\n  if (!this.accountLockedUntil) return false;\n  return this.accountLockedUntil > new Date();\n};\n\n// Increment failed login attempts\nuserSchema.methods.incFailedAttempts = function() {\n  this.failedLoginAttempts += 1;\n  this.lastFailedAttempt = new Date();\n\n  // Lock account after 3 failed attempts\n  if (this.failedLoginAttempts >= 3) {\n    this.accountLockedUntil = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes lock\n    this.captchaRequired = true; // Require CAPTCHA when unlocked\n  }\n\n  // Require CAPTCHA after 2 failed attempts\n  if (this.failedLoginAttempts >= 2) {\n    this.captchaRequired = true;\n  }\n\n  return this.save();\n};\n\n// Reset failed login attempts (on successful login)\nuserSchema.methods.resetFailedAttempts = function() {\n  this.failedLoginAttempts = 0;\n  this.accountLockedUntil = null;\n  this.captchaRequired = false;\n  return this.save();\n};\n\n// Generate security token for CAPTCHA verification\nuserSchema.methods.generateSecurityToken = function() {\n  this.securityToken = crypto.randomBytes(32).toString('hex');\n  return this.save().then(() => this.securityToken);\n};\n\n// Clear security token\nuserSchema.methods.clearSecurityToken = function() {\n  this.securityToken = null;\n  return this.save();\n};\n\n// Generate 2FA secret (base32 encoded)\nuserSchema.methods.generate2FASecret = function() {\n  const speakeasy = require('speakeasy');\n  const secret = speakeasy.generateSecret({\n    name: `Chat-JS (${this.nickname})`,\n    issuer: 'Chat-JS'\n  });\n  this.twoFactorSecret = secret.base32;\n  return this.save().then(() => secret);\n};\n\n// Enable 2FA\nuserSchema.methods.enable2FA = function(method = 'TOTP') {\n  if (!this.twoFactorSecret) {\n    throw new Error('2FA secret not generated');\n  }\n  this.twoFactorEnabled = true;\n  this.twoFactorMethod = method;\n\n  // Generate backup codes (10 codes)\n  this.backupCodes = [];\n  for (let i = 0; i < 10; i++) {\n    const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n    this.backupCodes.push(code);\n  }\n\n  return this.save();\n};\n\n// Disable 2FA\nuserSchema.methods.disable2FA = function() {\n  this.twoFactorEnabled = false;\n  this.twoFactorSecret = null;\n  this.backupCodes = [];\n  return this.save();\n};\n\n// Verify 2FA code\nuserSchema.methods.verify2FACode = function(code, useBackup = false) {\n  if (!this.twoFactorEnabled || !this.twoFactorSecret) {\n    return false;\n  }\n\n  // Check if using backup code\n  if (useBackup && this.backupCodes.includes(code)) {\n    // Remove used backup code\n    this.backupCodes = this.backupCodes.filter(bc => bc !== code);\n    return this.save().then(() => true);\n  }\n\n  if (useBackup) return false;\n\n  // Verify TOTP\n  const speakeasy = require('speakeasy');\n  return speakeasy.totp.verify({\n    secret: this.twoFactorSecret,\n    encoding: 'base32',\n    token: code,\n    window: 2 // Allow time window for clock skew\n  });\n};\n\n// Remove password and sensitive data from JSON output\nuserSchema.methods.toJSON = function() {\n  const userObject = this.toObject();\n  delete userObject.password;\n  delete userObject.resetPasswordToken;\n  delete userObject.resetPasswordExpires;\n  delete userObject.moderationToken;\n  delete userObject.moderationTokenExpires;\n  delete userObject.securityToken;\n  // Don't show ban details to regular users\n  if (!this.hasModeratorPrivileges()) {\n    delete userObject.banReason;\n    delete userObject.banExpires;\n    delete userObject.warnings;\n    delete userObject.failedLoginAttempts;\n    delete userObject.lastFailedAttempt;\n    delete userObject.accountLockedUntil;\n  }\n  return userObject;\n};\n\nmodule.exports = mongoose.model('User', userSchema);"],"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","ignoreList":[]}