198eb00c709d94284202bce56ab72c6c
const mongoose = require('mongoose');
const {
  exec
} = require('child_process');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
let mongodProcess;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Check if mongod is running
  const isMongodRunning = () => {
    return new Promise(resolve => {
      exec('pgrep mongod', error => {
        resolve(!error);
      });
    });
  };

  // If mongod is not running, start it
  if (!(await isMongodRunning())) {
    console.log('Starting mongod...');
    mongodProcess = exec('mongod --port 27017 --dbpath /tmp/mongodb_test --logpath /tmp/mongod_test.log --fork', error => {
      if (error) {
        console.error('Failed to start mongod:', error);
        throw error;
      }
    });
    // Wait a bit for mongod to start
    await new Promise(resolve => setTimeout(resolve, 2000));
  } else {
    console.log('mongod is already running');
  }

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = 'mongodb://localhost:27017/chatjs_test';
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to local test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues
  await TestFixtures.cleanup();
  await closeDB();

  // Stop mongod if we started it
  if (mongodProcess) {
    console.log('Stopping mongod...');
    exec('pkill -f mongod');
  }

  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test
  if (mongoose.connection.readyState === 1) {
    // Connected
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      await collections[key].deleteMany({});
    }
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJleGVjIiwiY29ubmVjdERCIiwiY2xvc2VEQiIsIlRlc3RGaXh0dXJlcyIsIm9yaWdpbmFsTW9uZ29VcmkiLCJtb25nb2RQcm9jZXNzIiwiYmVmb3JlQWxsIiwiZ2xvYmFsIiwiZ2MiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJpc01vbmdvZFJ1bm5pbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInNldFRpbWVvdXQiLCJOT0RFX0VOViIsIkpXVF9TRUNSRVQiLCJzZXR1cCIsImFmdGVyQWxsIiwiY2xlYW51cCIsImFmdGVyRWFjaCIsImNvbm5lY3Rpb24iLCJyZWFkeVN0YXRlIiwiY29sbGVjdGlvbnMiLCJrZXkiLCJkZWxldGVNYW55IiwiamVzdCIsIk5PREVfVEVTVF9USU1FT1VUIiwic2V0Il0sInNvdXJjZXMiOlsic2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuY29uc3QgeyBleGVjIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCB7IGNvbm5lY3REQiwgY2xvc2VEQiB9ID0gcmVxdWlyZSgnLi4vZGIvY29ubmVjdGlvbicpO1xuY29uc3QgeyBUZXN0Rml4dHVyZXMgfSA9IHJlcXVpcmUoJy4vc2hhcmVkL3Rlc3RGaXh0dXJlcycpO1xuXG5cbmxldCBvcmlnaW5hbE1vbmdvVXJpO1xubGV0IG1vbmdvZFByb2Nlc3M7XG5cbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgLy8gRW5hYmxlIGdhcmJhZ2UgY29sbGVjdGlvbiBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgaWYgKGdsb2JhbC5nYykge1xuICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBvcmlnaW5hbCBNb25nb0RCIFVSSVxuICAgIG9yaWdpbmFsTW9uZ29VcmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSTtcblxuICAgIC8vIENoZWNrIGlmIG1vbmdvZCBpcyBydW5uaW5nXG4gICAgY29uc3QgaXNNb25nb2RSdW5uaW5nID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGV4ZWMoJ3BncmVwIG1vbmdvZCcsIChlcnJvcikgPT4ge1xuICAgICAgICAgIHJlc29sdmUoIWVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gSWYgbW9uZ29kIGlzIG5vdCBydW5uaW5nLCBzdGFydCBpdFxuICAgIGlmICghKGF3YWl0IGlzTW9uZ29kUnVubmluZygpKSkge1xuICAgICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIG1vbmdvZC4uLicpO1xuICAgICAgbW9uZ29kUHJvY2VzcyA9IGV4ZWMoJ21vbmdvZCAtLXBvcnQgMjcwMTcgLS1kYnBhdGggL3RtcC9tb25nb2RiX3Rlc3QgLS1sb2dwYXRoIC90bXAvbW9uZ29kX3Rlc3QubG9nIC0tZm9yaycsIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RhcnQgbW9uZ29kOicsIGVycm9yKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBXYWl0IGEgYml0IGZvciBtb25nb2QgdG8gc3RhcnRcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdtb25nb2QgaXMgYWxyZWFkeSBydW5uaW5nJyk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG4gICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9jaGF0anNfdGVzdCc7XG4gICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd5b3VyX3N1cGVyX3NlY3VyZV9qd3Rfc2VjcmV0X2tleV9oZXJlX3JlcGxhY2VfaW5fcHJvZHVjdGlvbic7XG5cbiAgICAvLyBDb25uZWN0IHRvIGxvY2FsIHRlc3QgZGF0YWJhc2VcbiAgICBhd2FpdCBjb25uZWN0REIoKTtcblxuICAgIC8vIFNldHVwIHJldXNhYmxlIGZpeHR1cmVzIGZvciBmYXN0ZXIgdGVzdCBleGVjdXRpb25cbiAgICBjb25zb2xlLmxvZygnU2V0dGluZyB1cCB0ZXN0IGZpeHR1cmVzLi4uJyk7XG4gICAgYXdhaXQgVGVzdEZpeHR1cmVzLnNldHVwKCk7XG59KTtcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgICAvLyBjb25zb2xlLmxvZygnQ2xlYW5pbmcgdXAgdGVzdCBmaXh0dXJlcy4uLicpOyAvLyBEaXNhYmxlZCB0byBhdm9pZCBtb2NraW5nIGlzc3Vlc1xuICAgICBhd2FpdCBUZXN0Rml4dHVyZXMuY2xlYW51cCgpO1xuICAgICBhd2FpdCBjbG9zZURCKCk7XG5cbiAgICAgLy8gU3RvcCBtb25nb2QgaWYgd2Ugc3RhcnRlZCBpdFxuICAgICBpZiAobW9uZ29kUHJvY2Vzcykge1xuICAgICAgIGNvbnNvbGUubG9nKCdTdG9wcGluZyBtb25nb2QuLi4nKTtcbiAgICAgICBleGVjKCdwa2lsbCAtZiBtb25nb2QnKTtcbiAgICAgfVxuXG4gICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgVVJJIGlmIG5lZWRlZFxuICAgICBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSA9IG9yaWdpbmFsTW9uZ29Vcmk7XG5cbiAgICAgLy8gRmluYWwgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICAgfVxuICB9KTtcblxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBDbGVhciBhbGwgY29sbGVjdGlvbnMgYWZ0ZXIgZWFjaCB0ZXN0XG4gICAgaWYgKG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSA9PT0gMSkgeyAvLyBDb25uZWN0ZWRcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gbW9uZ29vc2UuY29ubmVjdGlvbi5jb2xsZWN0aW9ucztcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbGxlY3Rpb25zKSB7XG4gICAgICAgIGF3YWl0IGNvbGxlY3Rpb25zW2tleV0uZGVsZXRlTWFueSh7fSk7XG4gICAgICB9XG4gICAgfVxuIH0pO1xuXG4vLyBHbG9iYWwgdGVzdCB0aW1lb3V0cyBhbmQgc3RhYmlsaXphdGlvblxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTsgIC8vIDMwIHNlY29uZCBnbG9iYWwgdGltZW91dFxucHJvY2Vzcy5lbnYuTk9ERV9URVNUX1RJTUVPVVQgPSAyNTAwMDsgIC8vIEN1c3RvbSBlbnYgZm9yIEhUVFAgdGVzdHNcblxuLy8gSW5jcmVhc2Ugc29ja2V0IHRpbWVvdXQgZm9yIGRhdGFiYXNlIG9wZXJhdGlvbnNcbm1vbmdvb3NlLnNldCgnYnVmZmVyQ29tbWFuZHMnLCBmYWxzZSk7ICAvLyBEaXNhYmxlIG1vbmdvb3NlIGJ1ZmZlcmluZ1xubW9uZ29vc2Uuc2V0KCdtYXhUaW1lTVMnLCAyMDAwMCk7ICAgICAgLy8gMjAgc2Vjb25kIGxpbWl0IGZvciBvcGVyYXRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTTtFQUFFQztBQUFLLENBQUMsR0FBR0QsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUN6QyxNQUFNO0VBQUVFLFNBQVM7RUFBRUM7QUFBUSxDQUFDLEdBQUdILE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUMxRCxNQUFNO0VBQUVJO0FBQWEsQ0FBQyxHQUFHSixPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFHekQsSUFBSUssZ0JBQWdCO0FBQ3BCLElB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