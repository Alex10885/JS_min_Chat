{"version":3,"names":["_getJestObj","mock","createTransporter","jest","fn","sendMail","require","emailService","global","console","log","error","describe","mockTransporter","beforeEach","clearAllMocks","process","env","SMTP_HOST","SMTP_PORT","SMTP_USER","SMTP_PASS","FRONTEND_URL","cache","resolve","freshEmailService","transporter","it","email","resetToken","expectedMessageId","mockResolvedValue","messageId","result","sendPasswordResetEmail","expect","toEqual","success","toHaveBeenCalledTimes","mailOptions","calls","to","toBe","subject","toContain","html","text","expectedUrl","freshService","Error","mockRejectedValue","rejects","toThrow","sendPasswordResetSuccessEmail","nodemailer","toHaveBeenCalledWith","host","port","secure","auth","user","pass","undefined","networkError","code","authError","responseCode","token","from","name","address","toBeDefined","maliciousEmail","resolves"],"sources":["emailService.test.js"],"sourcesContent":["const emailService = require('../../services/emailService');\n\n// Mock nodemailer\njest.mock('nodemailer', () => ({\n  createTransporter: jest.fn(() => ({\n    sendMail: jest.fn()\n  }))\n}));\n\n// Mock console methods to avoid noise\nglobal.console.log = jest.fn();\nglobal.console.error = jest.fn();\n\ndescribe('EmailService', () => {\n  let mockTransporter;\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Mock process.env values\n    process.env.SMTP_HOST = 'smtp.test.com';\n    process.env.SMTP_PORT = '587';\n    process.env.SMTP_USER = 'test@example.com';\n    process.env.SMTP_PASS = 'test-password';\n    process.env.FRONTEND_URL = 'http://localhost:3000';\n\n    // Re-import to trigger constructor with mocked values\n    delete require.cache[require.resolve('../../services/emailService')];\n    const freshEmailService = require('../../services/emailService');\n\n    // Get the mock transporter from the fresh instance\n    mockTransporter = freshEmailService.transporter;\n  });\n\n  describe('sendPasswordResetEmail', () => {\n    it('should send password reset email successfully', async () => {\n      const email = 'user@example.com';\n      const resetToken = 'test-reset-token-123';\n      const expectedMessageId = 'test-message-id-123';\n\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: expectedMessageId\n      });\n\n      const result = await emailService.sendPasswordResetEmail(email, resetToken);\n\n      expect(result).toEqual({\n        success: true,\n        messageId: expectedMessageId\n      });\n\n      expect(mockTransporter.sendMail).toHaveBeenCalledTimes(1);\n\n      const mailOptions = mockTransporter.sendMail.mock.calls[0][0];\n      expect(mailOptions.to).toBe(email);\n      expect(mailOptions.subject).toContain('Password Reset');\n      expect(mailOptions.html).toContain(resetToken);\n      expect(mailOptions.text).toContain(resetToken);\n    });\n\n    it('should include correct reset URL in email', async () => {\n      const email = 'user@example.com';\n      const resetToken = 'reset-token-456';\n      const expectedUrl = `http://localhost:3000/reset-password/${resetToken}`;\n\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: 'test-id'\n      });\n\n      await emailService.sendPasswordResetEmail(email, resetToken);\n\n      const mailOptions = mockTransporter.sendMail.mock.calls[0][0];\n      expect(mailOptions.html).toContain(expectedUrl);\n      expect(mailOptions.text).toContain(expectedUrl);\n    });\n\n    it('should handle missing FRONTEND_URL environment variable', async () => {\n      delete process.env.FRONTEND_URL;\n\n      // Re-import with new environment\n      delete require.cache[require.resolve('../../services/emailService')];\n      const freshService = require('../../services/emailService');\n\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: 'test-id'\n      });\n\n      await freshService.sendPasswordResetEmail('user@example.com', 'token');\n\n      const mailOptions = mockTransporter.sendMail.mock.calls[0][0];\n      expect(mailOptions.html).toContain('http://localhost:3000/reset-password/token');\n    });\n\n    it('should throw error when email sending fails', async () => {\n      const error = new Error('SMTP connection failed');\n      mockTransporter.sendMail.mockRejectedValue(error);\n\n      await expect(\n        emailService.sendPasswordResetEmail('user@example.com', 'token')\n      ).rejects.toThrow('SMTP connection failed');\n    });\n  });\n\n  describe('sendPasswordResetSuccessEmail', () => {\n    it('should send password reset success email successfully', async () => {\n      const email = 'user@example.com';\n      const expectedMessageId = 'success-message-id-123';\n\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: expectedMessageId\n      });\n\n      const result = await emailService.sendPasswordResetSuccessEmail(email);\n\n      expect(result).toEqual({\n        success: true,\n        messageId: expectedMessageId\n      });\n\n      expect(mockTransporter.sendMail).toHaveBeenCalledTimes(1);\n\n      const mailOptions = mockTransporter.sendMail.mock.calls[0][0];\n      expect(mailOptions.to).toBe(email);\n      expect(mailOptions.subject).toContain('Password Reset Successful');\n      expect(mailOptions.html).toContain('Your password has been successfully reset');\n      expect(mailOptions.text).toContain('Your password has been successfully reset');\n    });\n\n    it('should throw error when success email sending fails', async () => {\n      const error = new Error('SMTP timeout');\n      mockTransporter.sendMail.mockRejectedValue(error);\n\n      await expect(\n        emailService.sendPasswordResetSuccessEmail('user@example.com')\n      ).rejects.toThrow('SMTP timeout');\n    });\n  });\n\n  describe('Email Service Configuration', () => {\n    it('should use environment variables for SMTP configuration', () => {\n      const nodemailer = require('nodemailer');\n      const createTransporter = nodemailer.createTransporter;\n\n      delete require.cache[require.resolve('../../services/emailService')];\n      require('../../services/emailService');\n\n      expect(createTransporter).toHaveBeenCalledWith({\n        host: 'smtp.test.com',\n        port: '587',\n        secure: false,\n        auth: {\n          user: 'test@example.com',\n          pass: 'test-password'\n        }\n      });\n    });\n\n    it('should use defaults when environment variables are missing', () => {\n      delete process.env.SMTP_HOST;\n      delete process.env.SMTP_PORT;\n      delete process.env.SMTP_USER;\n      delete process.env.SMTP_PASS;\n\n      const nodemailer = require('nodemailer');\n      const createTransporter = nodemailer.createTransporter;\n\n      delete require.cache[require.resolve('../../services/emailService')];\n      require('../../services/emailService');\n\n      expect(createTransporter).toHaveBeenCalledWith({\n        host: 'smtp.gmail.com',\n        port: 587,\n        secure: false,\n        auth: {\n          user: undefined,\n          pass: undefined\n        }\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle network errors in SMTP connection', async () => {\n      const networkError = new Error('Connection timeout');\n      networkError.code = 'ENOTFOUND';\n\n      mockTransporter.sendMail.mockRejectedValue(networkError);\n\n      await expect(\n        emailService.sendPasswordResetEmail('user@example.com', 'token')\n      ).rejects.toThrow('Connection timeout');\n    });\n\n    it('should handle authentication errors', async () => {\n      const authError = new Error('Authentication failed');\n      authError.responseCode = 535;\n\n      mockTransporter.sendMail.mockRejectedValue(authError);\n\n      await expect(\n        emailService.sendPasswordResetEmail('user@example.com', 'token')\n      ).rejects.toThrow('Authentication failed');\n    });\n  });\n\n  describe('Email Content Validation', () => {\n    it('should include proper email headers', async () => {\n      const email = 'test@example.com';\n      const token = 'reset-token-xyz';\n\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: 'header-test-id'\n      });\n\n      await emailService.sendPasswordResetEmail(email, token);\n\n      const mailOptions = mockTransporter.sendMail.mock.calls[0][0];\n\n      expect(mailOptions.from).toEqual({\n        name: 'Chat-JS Support',\n        address: process.env.SMTP_USER\n      });\n      expect(mailOptions.to).toBe(email);\n      expect(mailOptions.subject).toContain('Password Reset');\n    });\n\n    it('should include HTML and text versions', async () => {\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: 'content-test-id'\n      });\n\n      await emailService.sendPasswordResetEmail('test@example.com', 'token-abc');\n\n      const mailOptions = mockTransporter.sendMail.mock.calls[0][0];\n\n      expect(mailOptions.html).toBeDefined();\n      expect(mailOptions.html).toContain('<html');\n      expect(mailOptions.html).toContain('Reset Password');\n\n      expect(mailOptions.text).toBeDefined();\n      expect(mailOptions.text).toContain('Password Reset Request');\n      expect(mailOptions.text).toContain('token-abc');\n    });\n\n    it('should properly escape HTML content', async () => {\n      const maliciousEmail = '<script>alert(\"xss\")</script>@example.com';\n\n      mockTransporter.sendMail.mockResolvedValue({\n        messageId: 'escape-test-id'\n      });\n\n      // Should not throw or cause issues with HTML content\n      await expect(\n        emailService.sendPasswordResetEmail(maliciousEmail, 'token')\n      ).resolves.toBeDefined();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}