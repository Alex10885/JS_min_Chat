{"version":3,"names":["mongoose","require","connectDB","closeDB","TestFixtures","originalMongoUri","beforeAll","global","gc","process","env","MONGODB_URI","NODE_ENV","JWT_SECRET","console","log","setup","afterAll","cleanup","afterEach","collections","connection","key","deleteMany","jest","setTimeout","NODE_TEST_TIMEOUT","set"],"sources":["setup.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst { connectDB, closeDB } = require('../db/connection');\nconst { TestFixtures } = require('./shared/testFixtures');\n\nlet originalMongoUri;\n\nbeforeAll(async () => {\n   // Enable garbage collection for performance optimization\n   if (global.gc) {\n     global.gc();\n   }\n\n   // Save original MongoDB URI\n   originalMongoUri = process.env.MONGODB_URI;\n\n   // Use test database (assuming MongoDB is running locally)\n   // In production CI/CD, you would set this to a test MongoDB instance\n   process.env.NODE_ENV = 'test';\n   process.env.MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/chat_js_test';\n   process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';\n\n   // Connect to test database\n   await connectDB();\n\n   // Setup reusable fixtures for faster test execution\n   console.log('Setting up test fixtures...');\n   await TestFixtures.setup();\n});\n\nafterAll(async () => {\n    // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues\n    await TestFixtures.cleanup();\n    await closeDB();\n    // Restore original URI if needed\n    process.env.MONGODB_URI = originalMongoUri;\n\n    // Final garbage collection\n    if (global.gc) {\n      global.gc();\n    }\n});\n\nafterEach(async () => {\n   // Clear all collections after each test\n   const collections = mongoose.connection.collections;\n   for (const key in collections) {\n     await collections[key].deleteMany({});\n   }\n});\n\n// Global test timeouts and stabilization\njest.setTimeout(30000);  // 30 second global timeout\nprocess.env.NODE_TEST_TIMEOUT = 25000;  // Custom env for HTTP tests\n\n// Increase socket timeout for database operations\nmongoose.set('bufferCommands', false);  // Disable mongoose buffering\nmongoose.set('maxTimeMS', 20000);      // 20 second limit for operations"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM;EAAEC,SAAS;EAAEC;AAAQ,CAAC,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC1D,MAAM;EAAEG;AAAa,CAAC,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAEzD,IAAII,gBAAgB;AAEpBC,SAAS,CAAC,YAAY;EACnB;EACA,IAAIC,MAAM,CAACC,EAAE,EAAE;IACbD,MAAM,CAACC,EAAE,CAAC,CAAC;EACb;;EAEA;EACAH,gBAAgB,GAAGI,OAAO,CAACC,GAAG,CAACC,WAAW;;EAE1C;EACA;EACAF,OAAO,CAACC,GAAG,CAACE,QAAQ,GAAG,MAAM;EAC7BH,OAAO,CAACC,GAAG,CAACC,WAAW,GAAGF,OAAO,CAACC,GAAG,CAACC,WAAW,IAAI,wCAAwC;EAC7FF,OAAO,CAACC,GAAG,CAACG,UAAU,GAAG,6DAA6D;;EAEtF;EACA,MAAMX,SAAS,CAAC,CAAC;;EAEjB;EACAY,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC1C,MAAMX,YAAY,CAACY,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEFC,QAAQ,CAAC,YAAY;EACjB;EACA,MAAMb,YAAY,CAACc,OAAO,CAAC,CAAC;EAC5B,MAAMf,OAAO,CAAC,CAAC;EACf;EACAM,OAAO,CAACC,GAAG,CAACC,WAAW,GAAGN,gBAAgB;;EAE1C;EACA,IAAIE,MAAM,CAACC,EAAE,EAAE;IACbD,MAAM,CAACC,EAAE,CAAC,CAAC;EACb;AACJ,CAAC,CAAC;AAEFW,SAAS,CAAC,YAAY;EACnB;EACA,MAAMC,WAAW,GAAGpB,QAAQ,CAACqB,UAAU,CAACD,WAAW;EACnD,KAAK,MAAME,GAAG,IAAIF,WAAW,EAAE;IAC7B,MAAMA,WAAW,CAACE,GAAG,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvC;AACH,CAAC,CAAC;;AAEF;AACAC,IAAI,CAACC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;AACzBhB,OAAO,CAACC,GAAG,CAACgB,iBAAiB,GAAG,KAAK,CAAC,CAAE;;AAExC;AACA1B,QAAQ,CAAC2B,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC,CAAE;AACxC3B,QAAQ,CAAC2B,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAM","ignoreList":[]}