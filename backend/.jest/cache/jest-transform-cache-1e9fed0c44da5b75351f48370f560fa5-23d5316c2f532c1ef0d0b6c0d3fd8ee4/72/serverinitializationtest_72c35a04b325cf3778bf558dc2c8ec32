5b51136d21606091facd3fb64f4efc8a
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const Channel = require('../models/Channel');
describe('Database Initialization', () => {
  let mongoServer;
  beforeAll(async () => {
    // Start in-memory MongoDB
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    process.env.MONGODB_URI = mongoUri;
  });
  afterAll(async () => {
    await mongoServer.stop();
  });
  beforeEach(async () => {
    await mongoose.disconnect();
  });
  describe('connectDB function', () => {
    it('should connect to MongoDB successfully', async () => {
      await connectDB();
      expect(mongoose.connection.readyState).toBe(1); // Connected
    });
    it('should handle connection errors gracefully', async () => {
      // Set invalid MongoDB URI
      process.env.MONGODB_URI = 'mongodb://invalid-host:27017/test';
      let error;
      try {
        await connectDB();
      } catch (err) {
        error = err;
      }
      expect(error).toBeDefined();
      expect(error.message).toContain('connect');
    });
    it('should log successful connection', async () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});
      await connectDB();
      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('MongoDB Connected:'));
      consoleSpy.mockRestore();
    });
  });
  describe('closeDB function', () => {
    beforeEach(async () => {
      await connectDB();
    });
    it('should close MongoDB connection successfully', async () => {
      expect(mongoose.connection.readyState).toBe(1);
      await closeDB();
      expect(mongoose.connection.readyState).toBe(0); // Disconnected
    });
    it('should log disconnection', async () => {
      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});
      await closeDB();

      // Note: The actual log comes from connection.js when DB closes
      expect(mongoose.connection.readyState).toBe(0);
      consoleSpy.mockRestore();
    });
  });
  describe('Default Channels Initialization', () => {
    beforeEach(async () => {
      await connectDB();
      await Channel.deleteMany({}); // Clear channels
    });
    it('should create default channels on initialization', async () => {
      // Simulate the channel creation logic from server.js
      const defaultChannels = [{
        id: 'general',
        name: 'General',
        type: 'text',
        createdBy: 'system'
      }, {
        id: 'voice-chat',
        name: 'Voice Chat',
        type: 'voice',
        createdBy: 'system'
      }];
      for (const channelData of defaultChannels) {
        await Channel.findOneAndUpdate({
          id: channelData.id
        }, channelData, {
          upsert: true,
          new: true
        });
      }
      const channels = await Channel.find({});
      expect(channels.length).toBe(2);
      const generalChannel = channels.find(ch => ch.id === 'general');
      const voiceChannel = channels.find(ch => ch.id === 'voice-chat');
      expect(generalChannel).toBeDefined();
      expect(generalChannel.type).toBe('text');
      expect(generalChannel.name).toBe('General');
      expect(voiceChannel).toBeDefined();
      expect(voiceChannel.type).toBe('voice');
      expect(voiceChannel.name).toBe('Voice Chat');
    });
    it('should not create duplicates of default channels', async () => {
      // Create channels first time
      const channelData = {
        id: 'general',
        name: 'General',
        type: 'text',
        createdBy: 'system'
      };
      await Channel.findOneAndUpdate({
        id: channelData.id
      }, channelData, {
        upsert: true,
        new: true
      });

      // Try to create same channel again
      await Channel.findOneAndUpdate({
        id: channelData.id
      }, channelData, {
        upsert: true,
        new: true
      });
      const channels = await Channel.find({
        id: 'general'
      });
      expect(channels.length).toBe(1); // Should only have one
    });
    it('should set createdBy to system for default channels', async () => {
      const channelData = {
        id: 'general',
        name: 'General',
        type: 'text',
        createdBy: 'system'
      };
      await Channel.findOneAndUpdate({
        id: channelData.id
      }, channelData, {
        upsert: true,
        new: true
      });
      const channel = await Channel.findOne({
        id: 'general'
      });
      expect(channel.createdBy).toBe('system');
    });
    it('should not overwrite existing channels', async () => {
      // Create channel with custom name
      await Channel.findOneAndUpdate({
        id: 'general'
      }, {
        id: 'general',
        name: 'Custom General',
        type: 'text',
        createdBy: 'system'
      }, {
        upsert: true,
        new: true
      });

      // Call initialization again
      await Channel.findOneAndUpdate({
        id: 'general'
      }, {
        id: 'general',
        name: 'General',
        type: 'text',
        createdBy: 'system'
      }, {
        upsert: true,
        new: true
      });
      const channel = await Channel.findOne({
        id: 'general'
      });
      // Should preserve existing data, not overwrite
      expect(channel.name).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,