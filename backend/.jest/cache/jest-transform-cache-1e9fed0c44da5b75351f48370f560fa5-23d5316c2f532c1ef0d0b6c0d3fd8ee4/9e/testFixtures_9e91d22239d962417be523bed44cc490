6a95df06c408970a17e2c25b318b3557
// Test fixtures for optimized backend testing
// This file provides reusable test data that reduces setup time

const {
  TestFixtureHelper,
  DatabaseTestHelper
} = require('./testHelpers');
const mongoose = require('mongoose');
let fixtureHelper = new TestFixtureHelper();
class TestFixtures {
  static async setup() {
    await DatabaseTestHelper.cleanupCollections();
    await this.loadDefaultFixtures();
  }
  static async loadDefaultFixtures() {
    // Default user fixture
    await fixtureHelper.create('defaultUser', async helper => {
      return await helper.userHelper.createUser({
        nickname: 'test_user_fixture',
        email: 'fixture@example.com',
        role: 'user'
      });
    });

    // Default channel fixture
    await fixtureHelper.create('defaultChannel', async helper => {
      return await helper.channelHelper.createChannel({
        name: 'General Fixture',
        type: 'text',
        description: 'Default test channel'
      });
    });

    // Multiple users fixture for multi-user tests
    await fixtureHelper.create('multipleUsers', async helper => {
      const users = [];
      for (let i = 1; i <= 5; i++) {
        const user = await helper.userHelper.createUser({
          nickname: `user_fixture_${i}`,
          email: `fixture_user_${i}@example.com`
        });
        users.push(user);
      }
      return users;
    });

    // Admin user fixture
    await fixtureHelper.create('adminUser', async helper => {
      return await helper.userHelper.createUser({
        nickname: 'admin_fixture',
        email: 'admin_fixture@example.com',
        role: 'admin'
      });
    });
  }
  static async getUser(name = 'defaultUser') {
    return await fixtureHelper.load(name);
  }
  static async getChannel(name = 'defaultChannel') {
    return await fixtureHelper.load(name);
  }
  static async getUsers(name = 'multipleUsers') {
    return await fixtureHelper.load(name);
  }
  static async cleanup() {
    await fixtureHelper.cleanup();
  }
}
module.exports = {
  TestFixtures
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUZXN0Rml4dHVyZUhlbHBlciIsIkRhdGFiYXNlVGVzdEhlbHBlciIsInJlcXVpcmUiLCJtb25nb29zZSIsImZpeHR1cmVIZWxwZXIiLCJUZXN0Rml4dHVyZXMiLCJzZXR1cCIsImNsZWFudXBDb2xsZWN0aW9ucyIsImxvYWREZWZhdWx0Rml4dHVyZXMiLCJjcmVhdGUiLCJoZWxwZXIiLCJ1c2VySGVscGVyIiwiY3JlYXRlVXNlciIsIm5pY2tuYW1lIiwiZW1haWwiLCJyb2xlIiwiY2hhbm5lbEhlbHBlciIsImNyZWF0ZUNoYW5uZWwiLCJuYW1lIiwidHlwZSIsImRlc2NyaXB0aW9uIiwidXNlcnMiLCJpIiwidXNlciIsInB1c2giLCJnZXRVc2VyIiwibG9hZCIsImdldENoYW5uZWwiLCJnZXRVc2VycyIsImNsZWFudXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidGVzdEZpeHR1cmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3QgZml4dHVyZXMgZm9yIG9wdGltaXplZCBiYWNrZW5kIHRlc3Rpbmdcbi8vIFRoaXMgZmlsZSBwcm92aWRlcyByZXVzYWJsZSB0ZXN0IGRhdGEgdGhhdCByZWR1Y2VzIHNldHVwIHRpbWVcblxuY29uc3QgeyBUZXN0Rml4dHVyZUhlbHBlciwgRGF0YWJhc2VUZXN0SGVscGVyIH0gPSByZXF1aXJlKCcuL3Rlc3RIZWxwZXJzJyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5cbmxldCBmaXh0dXJlSGVscGVyID0gbmV3IFRlc3RGaXh0dXJlSGVscGVyKCk7XG5cbmNsYXNzIFRlc3RGaXh0dXJlcyB7XG5cbiAgc3RhdGljIGFzeW5jIHNldHVwKCkge1xuICAgIGF3YWl0IERhdGFiYXNlVGVzdEhlbHBlci5jbGVhbnVwQ29sbGVjdGlvbnMoKTtcbiAgICBhd2FpdCB0aGlzLmxvYWREZWZhdWx0Rml4dHVyZXMoKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2FkRGVmYXVsdEZpeHR1cmVzKCkge1xuICAgIC8vIERlZmF1bHQgdXNlciBmaXh0dXJlXG4gICAgYXdhaXQgZml4dHVyZUhlbHBlci5jcmVhdGUoJ2RlZmF1bHRVc2VyJywgYXN5bmMgKGhlbHBlcikgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IGhlbHBlci51c2VySGVscGVyLmNyZWF0ZVVzZXIoe1xuICAgICAgICBuaWNrbmFtZTogJ3Rlc3RfdXNlcl9maXh0dXJlJyxcbiAgICAgICAgZW1haWw6ICdmaXh0dXJlQGV4YW1wbGUuY29tJyxcbiAgICAgICAgcm9sZTogJ3VzZXInXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIERlZmF1bHQgY2hhbm5lbCBmaXh0dXJlXG4gICAgYXdhaXQgZml4dHVyZUhlbHBlci5jcmVhdGUoJ2RlZmF1bHRDaGFubmVsJywgYXN5bmMgKGhlbHBlcikgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IGhlbHBlci5jaGFubmVsSGVscGVyLmNyZWF0ZUNoYW5uZWwoe1xuICAgICAgICBuYW1lOiAnR2VuZXJhbCBGaXh0dXJlJyxcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0RlZmF1bHQgdGVzdCBjaGFubmVsJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBNdWx0aXBsZSB1c2VycyBmaXh0dXJlIGZvciBtdWx0aS11c2VyIHRlc3RzXG4gICAgYXdhaXQgZml4dHVyZUhlbHBlci5jcmVhdGUoJ211bHRpcGxlVXNlcnMnLCBhc3luYyAoaGVscGVyKSA9PiB7XG4gICAgICBjb25zdCB1c2VycyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBoZWxwZXIudXNlckhlbHBlci5jcmVhdGVVc2VyKHtcbiAgICAgICAgICBuaWNrbmFtZTogYHVzZXJfZml4dHVyZV8ke2l9YCxcbiAgICAgICAgICBlbWFpbDogYGZpeHR1cmVfdXNlcl8ke2l9QGV4YW1wbGUuY29tYFxuICAgICAgICB9KTtcbiAgICAgICAgdXNlcnMucHVzaCh1c2VyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1c2VycztcbiAgICB9KTtcblxuICAgIC8vIEFkbWluIHVzZXIgZml4dHVyZVxuICAgIGF3YWl0IGZpeHR1cmVIZWxwZXIuY3JlYXRlKCdhZG1pblVzZXInLCBhc3luYyAoaGVscGVyKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgaGVscGVyLnVzZXJIZWxwZXIuY3JlYXRlVXNlcih7XG4gICAgICAgIG5pY2tuYW1lOiAnYWRtaW5fZml4dHVyZScsXG4gICAgICAgIGVtYWlsOiAnYWRtaW5fZml4dHVyZUBleGFtcGxlLmNvbScsXG4gICAgICAgIHJvbGU6ICdhZG1pbidcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFVzZXIobmFtZSA9ICdkZWZhdWx0VXNlcicpIHtcbiAgICByZXR1cm4gYXdhaXQgZml4dHVyZUhlbHBlci5sb2FkKG5hbWUpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldENoYW5uZWwobmFtZSA9ICdkZWZhdWx0Q2hhbm5lbCcpIHtcbiAgICByZXR1cm4gYXdhaXQgZml4dHVyZUhlbHBlci5sb2FkKG5hbWUpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldFVzZXJzKG5hbWUgPSAnbXVsdGlwbGVVc2VycycpIHtcbiAgICByZXR1cm4gYXdhaXQgZml4dHVyZUhlbHBlci5sb2FkKG5hbWUpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNsZWFudXAoKSB7XG4gICAgYXdhaXQgZml4dHVyZUhlbHBlci5jbGVhbnVwKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IFRlc3RGaXh0dXJlcyB9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQSxNQUFNO0VBQUVBLGlCQUFpQjtFQUFFQztBQUFtQixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDMUUsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsVUFBVSxD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