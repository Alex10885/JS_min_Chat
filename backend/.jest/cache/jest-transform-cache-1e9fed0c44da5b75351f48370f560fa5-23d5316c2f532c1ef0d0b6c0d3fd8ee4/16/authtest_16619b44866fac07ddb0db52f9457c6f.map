{"version":3,"names":["request","require","express","cors","body","validationResult","User","Message","Channel","connectDB","closeDB","UserTestHelper","HTTPTestHelper","DatabaseTestHelper","app","use","json","post","isLength","min","max","trim","escape","isEmail","normalizeEmail","req","res","errors","isEmpty","status","array","nickname","email","password","existingUser","findOne","$or","error","user","role","save","token","jwt","sign","id","_id","process","env","JWT_SECRET","expiresIn","identifier","comparePassword","lastActive","Date","get","channels","find","sort","position","createdAt","isIn","name","type","description","toLowerCase","replace","existingChannel","channelData","createdBy","channel","describe","userHelper","httpHelper","beforeAll","afterAll","cleanup","afterEach","cleanupCollections","it","userData","response","send","expect","toHaveProperty","toBe","invalidData","Array","isArray","userData1","userData2","beforeEach","loginData","length","toBeGreaterThan"],"sources":["auth.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst cors = require('cors');\nconst { body, validationResult } = require('express-validator');\n\n// Import models\nconst User = require('../../models/User');\nconst Message = require('../../models/Message');\nconst Channel = require('../../models/Channel');\n\n// Import DB connection and test helpers\nconst { connectDB, closeDB } = require('../../db/connection');\nconst { UserTestHelper, HTTPTestHelper, DatabaseTestHelper } = require('../shared/testHelpers');\n\n// Create test app\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// Auth routes\napp.post('/register', [\n  body('nickname').isLength({ min: 3, max: 50 }).trim().escape(),\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { nickname, email, password } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({\n      $or: [{ nickname }, { email }]\n    });\n\n    if (existingUser) {\n      return res.status(400).json({\n        error: existingUser.nickname === nickname ? 'Nickname already taken' : 'Email already registered'\n      });\n    }\n\n    // Create user\n    const user = new User({ nickname, email, password, role: 'member' });\n    await user.save();\n\n    const token = jwt.sign(\n      { id: user._id, nickname: user.nickname, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        email: user.email,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Server error during registration' });\n  }\n});\n\napp.post('/login', async (req, res) => {\n  try {\n    const { identifier, password } = req.body;\n\n    if (!identifier || !password) {\n      return res.status(400).json({ error: 'Identifier and password required' });\n    }\n\n    // Find user by nickname or email\n    const user = await User.findOne({\n      $or: [{ nickname: identifier }, { email: identifier }]\n    });\n\n    if (!user || !(await user.comparePassword(password))) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    const token = jwt.sign(\n      { id: user._id, nickname: user.nickname, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    // Update last active\n    user.lastActive = new Date();\n    user.status = 'online';\n    await user.save();\n\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Server error during login' });\n  }\n});\n\n// Channel routes\napp.get('/channels', async (req, res) => {\n  try {\n    const channels = await Channel.find().sort({ position: 1, createdAt: 1 });\n    res.json(channels);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch channels' });\n  }\n});\n\napp.post('/channels', [\n  body('name').isLength({ min: 1, max: 100 }).trim().escape(),\n  body('type').isIn(['text', 'voice'])\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { name, type = 'text', description } = req.body;\n    const id = name.toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');\n\n    // Check if channel exists\n    const existingChannel = await Channel.findOne({ id });\n    if (existingChannel) {\n      return res.status(400).json({ error: 'Channel already exists' });\n    }\n\n    const channelData = {\n      id,\n      name,\n      type,\n      description,\n      createdBy: req.user?.nickname || 'system'\n    };\n\n    const channel = new Channel(channelData);\n    await channel.save();\n\n    res.status(201).json(channel);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to create channel' });\n  }\n});\n\ndescribe('Authentication Routes', () => {\n   let userHelper;\n   let httpHelper;\n\n   beforeAll(async () => {\n     await connectDB();\n     userHelper = new UserTestHelper();\n     httpHelper = new HTTPTestHelper(app);\n   });\n\n   afterAll(async () => {\n     await httpHelper.cleanup();\n     await closeDB();\n   });\n\n   afterEach(async () => {\n     await DatabaseTestHelper.cleanupCollections(['users']);\n   });\n\n  describe('POST /register', () => {\n    it('should register a new user successfully', async () => {\n      const userData = {\n        nickname: 'testuser',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const response = await request(app)\n        .post('/register')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.nickname).toBe(userData.nickname);\n      expect(response.body.user.email).toBe(userData.email);\n      expect(response.body.user.role).toBe('member');\n    });\n\n    it('should return 400 for invalid data', async () => {\n      const invalidData = {\n        nickname: 'ab', // too short\n        email: 'invalid-email',\n        password: '123' // too short\n      };\n\n      const response = await request(app)\n        .post('/register')\n        .send(invalidData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n      expect(Array.isArray(response.body.errors)).toBe(true);\n    });\n\n    it('should return 400 for duplicate nickname', async () => {\n      const userData1 = {\n        nickname: 'duplicateuser',\n        email: 'duplicate1@example.com',\n        password: 'password123'\n      };\n\n      const userData2 = {\n        nickname: 'duplicateuser',\n        email: 'duplicate2@example.com',\n        password: 'password123'\n      };\n\n      // Create first user\n      await request(app)\n        .post('/register')\n        .send(userData1)\n        .expect(201);\n\n      // Try to create duplicate\n      const response = await request(app)\n        .post('/register')\n        .send(userData2)\n        .expect(400);\n\n      expect(response.body.error).toBe('Nickname already taken');\n    });\n  });\n\n  describe('POST /login', () => {\n    beforeEach(async () => {\n      // Create a test user\n      const userData = {\n        nickname: 'logintest',\n        email: 'login@example.com',\n        password: 'password123'\n      };\n\n      await request(app)\n        .post('/register')\n        .send(userData)\n        .expect(201);\n    });\n\n    it('should login successfully with correct credentials', async () => {\n      const loginData = {\n        identifier: 'logintest',\n        password: 'password123'\n      };\n\n      const response = await request(app)\n        .post('/login')\n        .send(loginData)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.nickname).toBe('logintest');\n    });\n\n    it('should return 401 for invalid credentials', async () => {\n      const loginData = {\n        identifier: 'logintest',\n        password: 'wrongpassword'\n      };\n\n      const response = await request(app)\n        .post('/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.error).toBe('Invalid credentials');\n    });\n  });\n});\n\ndescribe('Channel Routes', () => {\n  beforeAll(async () => {\n    await connectDB();\n  });\n\n  afterAll(async () => {\n    await closeDB();\n  });\n\n  describe('GET /channels', () => {\n    it('should return empty array when no channels exist', async () => {\n      const response = await request(app)\n        .get('/channels')\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(0);\n    });\n\n    it('should return channels when they exist', async () => {\n      // Create a test channel\n      const channelData = {\n        name: 'Test Channel',\n        type: 'text'\n      };\n\n      await request(app)\n        .post('/channels')\n        .send(channelData)\n        .expect(201);\n\n      const response = await request(app)\n        .get('/channels')\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('name', 'Test Channel');\n      expect(response.body[0]).toHaveProperty('type', 'text');\n    });\n  });\n\n  describe('POST /channels', () => {\n    it('should create a channel successfully', async () => {\n      const channelData = {\n        name: 'New Test Channel',\n        type: 'text',\n        description: 'A test channel'\n      };\n\n      const response = await request(app)\n        .post('/channels')\n        .send(channelData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('name', channelData.name);\n      expect(response.body).toHaveProperty('type', channelData.type);\n      expect(response.body).toHaveProperty('description', channelData.description);\n    });\n\n    it('should return 400 for invalid channel data', async () => {\n      const invalidData = {\n        name: '', // empty name\n        type: 'invalid' // invalid type\n      };\n\n      const response = await request(app)\n        .post('/channels')\n        .send(invalidData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n    });\n\n    it('should return 400 for duplicate channel name', async () => {\n      const channelData = {\n        name: 'Duplicate Channel',\n        type: 'text'\n      };\n\n      // Create first channel\n      await request(app)\n        .post('/channels')\n        .send(channelData)\n        .expect(201);\n\n      // Try to create duplicate\n      const response = await request(app)\n        .post('/channels')\n        .send(channelData)\n        .expect(400);\n\n      expect(response.body.error).toBe('Channel already exists');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}