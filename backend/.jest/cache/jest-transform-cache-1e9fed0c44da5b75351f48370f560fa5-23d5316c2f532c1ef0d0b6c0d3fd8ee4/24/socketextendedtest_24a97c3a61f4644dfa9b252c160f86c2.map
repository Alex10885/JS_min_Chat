{"version":3,"names":["io","require","jwt","connectDB","closeDB","User","Channel","Message","SocketTestServer","testServer","testUser","testToken","serverPort","describe","beforeAll","start","nickname","email","password","status","save","sign","id","_id","role","process","env","JWT_SECRET","expiresIn","afterAll","stop","test","done","invalidSocket","auth","token","forceNew","on","error","expect","message","toContain","disconnect","noTokenSocket","toBe","socket","clientSocket","listenerSocket","emit","room","users","some","user","setTimeout","updatedUsers","every","fail","Error","secondSocket","beforeEach","secondUser","then","secondToken","afterEach","privateMessage","to","text","senderReceived","receiverReceived","data","author","messages","Array","isArray","toHaveProperty","code","reconnectCount","connected","newSocket","sockets","connectedCount","totalSockets","i","push","forEach","sock","channelId","startTime","Date","now","operationCount","targetOperations","performOperation","endTime","duration","toBeLessThan","malformedMessages","undefined","malformed"],"sources":["socket-extended.test.js"],"sourcesContent":["const io = require('socket.io-client');\nconst jwt = require('jsonwebtoken');\nconst { connectDB, closeDB } = require('../db/connection');\nconst User = require('../models/User');\nconst Channel = require('../models/Channel');\nconst Message = require('../models/Message');\nconst SocketTestServer = require('./socket-server.test');\n\nlet testServer;\nlet testUser;\nlet testToken;\nlet serverPort;\n\ndescribe('Socket.IO Extended Tests - Fixed', () => {\n  beforeAll(async () => {\n    await connectDB();\n\n    testServer = new SocketTestServer();\n    serverPort = await testServer.start();\n\n    testUser = new User({\n      nickname: 'extendedSocketTestUser',\n      email: 'extended-socket@test.com',\n      password: 'testpass123',\n      status: 'online'\n    });\n    await testUser.save();\n\n    // Create JWT token\n    testToken = jwt.sign(\n      { id: testUser._id, nickname: testUser.nickname, role: testUser.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n  });\n\n  afterAll(async () => {\n    if (testServer) {\n      await testServer.stop();\n    }\n    await closeDB();\n  });\n\n  describe('Authentication Edge Cases', () => {\n    test('should reject invalid JWT token', (done) => {\n      const invalidSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: 'invalid-token' },\n        forceNew: true\n      });\n\n      invalidSocket.on('connect_error', (error) => {\n        expect(error.message).toContain('Authentication');\n        invalidSocket.disconnect();\n        done();\n      });\n    });\n\n    test('should reject connection without token', (done) => {\n      const noTokenSocket = io(`http://localhost:${serverPort}`, {\n        forceNew: true\n      });\n\n      noTokenSocket.on('connect_error', (error) => {\n        expect(error.message).toBe('Authentication token required');\n        noTokenSocket.disconnect();\n        done();\n      });\n    });\n  });\n\n  describe('Disconnection Handling', () => {\n    test('should handle user disconnect gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.on('disconnect', () => {\n          done();\n        });\n        socket.disconnect();\n      });\n    });\n\n    test('should update online users list on disconnect', (done) => {\n      let clientSocket, listenerSocket;\n\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        clientSocket.emit('join_room', { room: 'general' });\n\n        clientSocket.on('online_users', () => {\n          listenerSocket = io(`http://localhost:${serverPort}`, {\n            auth: { token: testToken },\n            forceNew: true\n          });\n\n          listenerSocket.on('connect', () => {\n            listenerSocket.emit('join_room', { room: 'general' });\n\n            listenerSocket.on('online_users', (users) => {\n              expect(users.some(user => user.nickname === testUser.nickname)).toBe(true);\n              clientSocket.disconnect();\n\n              setTimeout(() => {\n                listenerSocket.emit('get_online_users');\n                listenerSocket.on('online_users', (updatedUsers) => {\n                  expect(updatedUsers.every(user => user.nickname !== testUser.nickname)).toBe(true);\n                  listenerSocket.disconnect();\n                  done();\n                });\n              }, 500);\n            });\n          });\n        });\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done.fail(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Private Messages - /w Command Edge Cases', () => {\n    let clientSocket, secondSocket;\n\n    beforeEach((done) => {\n      const secondUser = new User({\n        nickname: 'extendedTestUser2',\n        email: 'extended-test2@test.com',\n        password: 'testpass123',\n        status: 'online'\n      });\n\n      secondUser.save().then(() => {\n        const secondToken = jwt.sign(\n          { id: secondUser._id, nickname: secondUser.nickname, role: secondUser.role },\n          process.env.JWT_SECRET,\n          { expiresIn: '24h' }\n        );\n\n        clientSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        secondSocket = io(`http://localhost:${serverPort}`, {\n          auth: { token: secondToken },\n          forceNew: true\n        });\n\n        secondSocket.on('connect', () => {\n          clientSocket.emit('join_room', { room: 'general' });\n          secondSocket.emit('join_room', { room: 'general' });\n          done();\n        });\n\n        secondSocket.on('connect_error', (error) => {\n          done.fail(new Error(`Second socket failed: ${error.message}`));\n        });\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n      if (secondSocket) secondSocket.disconnect();\n    });\n\n    test('should send private message between users', (done) => {\n      const privateMessage = 'Private message from extended test';\n\n      clientSocket.emit('private_message', {\n        to: 'extendedTestUser2',\n        text: privateMessage\n      });\n\n      let senderReceived = false;\n      let receiverReceived = false;\n\n      clientSocket.on('private_message', (data) => {\n        if (data.text === privateMessage) {\n          senderReceived = true;\n          if (receiverReceived) done();\n        }\n      });\n\n      secondSocket.on('private_message', (data) => {\n        if (data.text === privateMessage && data.author === testUser.nickname) {\n          receiverReceived = true;\n          if (senderReceived) done();\n        }\n      });\n    });\n  });\n\n  describe('Message History and Archival', () => {\n    let clientSocket;\n\n    beforeEach((done) => {\n      clientSocket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      clientSocket.on('connect', () => {\n        done();\n      });\n\n      clientSocket.on('connect_error', (error) => {\n        done.fail(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    afterEach(() => {\n      if (clientSocket) clientSocket.disconnect();\n    });\n\n    test('should receive history when joining room', (done) => {\n      clientSocket.emit('join_room', { room: 'general' });\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        expect(messages[0]).toHaveProperty('author');\n        expect(messages[0]).toHaveProperty('text');\n        expect(messages[0]).toHaveProperty('timestamp');\n        done();\n      });\n    });\n\n    test('should handle history request without room', (done) => {\n      clientSocket.emit('get_history');\n\n      clientSocket.on('history', (messages) => {\n        expect(Array.isArray(messages)).toBe(true);\n        done();\n      });\n    });\n  });\n\n  describe('Room Switching and Channel Validation', () => {\n    test('should handle invalid room names', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: '' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('INVALID_ROOM_FORMAT');\n          socket.disconnect();\n          done();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done.fail(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n\n    test('should handle non-existent channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'non-existent-channel' });\n\n        socket.on('error', (data) => {\n          expect(data.code).toBe('CHANNEL_NOT_FOUND');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Connection Management and Recovery', () => {\n    test('should handle connection recovery after disconnect', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      let reconnectCount = 0;\n\n      socket.on('connect', () => {\n        reconnectCount++;\n        if (reconnectCount === 2) {\n          expect(socket.connected).toBe(true);\n          done();\n        }\n      });\n\n      socket.on('disconnect', () => {\n        if (reconnectCount === 1) {\n          setTimeout(() => {\n            const newSocket = io(`http://localhost:${serverPort}`, {\n              auth: { token: testToken },\n              forceNew: true\n            });\n          }, 200);\n        }\n      });\n    });\n\n    test('should handle rapid connections', (done) => {\n      const sockets = [];\n      let connectedCount = 0;\n      const totalSockets = 3;\n\n      for (let i = 0; i < totalSockets; i++) {\n        const socket = io(`http://localhost:${serverPort}`, {\n          auth: { token: testToken },\n          forceNew: true\n        });\n\n        socket.on('connect', () => {\n          connectedCount++;\n          sockets.push(socket);\n          if (connectedCount === totalSockets) {\n            expect(connectedCount).toBe(totalSockets);\n            sockets.forEach(sock => sock.disconnect());\n            done();\n          }\n        });\n      }\n    });\n  });\n\n  describe('Advanced Voice Channel Scenarios', () => {\n    test('should reject joining text channel as voice channel', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'general' }); // Text channel\n        socket.on('voice_error', (data) => {\n          expect(data.message).toBe('Voice channel not found');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n\n    test('should join voice channel without room first', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_voice_channel', { channelId: 'voice-chat' });\n\n        socket.on('voice_joined', (data) => {\n          expect(data.channelId).toBe('voice-chat');\n          socket.disconnect();\n          done();\n        });\n      });\n    });\n  });\n\n  describe('Rate Limiting and Performance', () => {\n    test('should maintain performance under load', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        const startTime = Date.now();\n        let operationCount = 0;\n        const targetOperations = 20;\n\n        const performOperation = () => {\n          socket.emit('message', { text: `Load test ${operationCount + 1}` });\n          operationCount++;\n\n          if (operationCount >= targetOperations) {\n            const endTime = Date.now();\n            const duration = endTime - startTime;\n            expect(duration).toBeLessThan(5000); // 5 seconds max\n            socket.disconnect();\n            done();\n          } else {\n            setTimeout(performOperation, 50);\n          }\n        };\n\n        socket.emit('join_room', { room: 'general' });\n        socket.on('online_users', () => {\n          performOperation();\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done.fail(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    test('should handle malformed messages gracefully', (done) => {\n      const socket = io(`http://localhost:${serverPort}`, {\n        auth: { token: testToken },\n        forceNew: true\n      });\n\n      socket.on('connect', () => {\n        socket.emit('join_room', { room: 'general' });\n\n        socket.on('online_users', () => {\n          const malformedMessages = [null, undefined, { text: '' }, { text: '   ' }, {}];\n\n          malformedMessages.forEach((malformed) => {\n            socket.emit('message', malformed);\n          });\n\n          setTimeout(() => {\n            expect(true).toBe(true); // Test passes if no errors thrown\n            socket.disconnect();\n            done();\n          }, 1000);\n        });\n      });\n\n      socket.on('connect_error', (error) => {\n        done.fail(new Error(`Connection failed: ${error.message}`));\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}