{"version":3,"names":["cov_2p4831m7el","actualCoverage","Channel","s","require","logger","cacheQueryResult","getCachedQueryResult","batchCacheChannels","ChannelService","constructor","f","getAllChannels","cacheKey","cachedChannels","b","debug","channels","find","select","sort","position","catch","error","warn","message","slice","length","getChannelById","id","channel","findOne","createChannel","channelData","name","type","description","createdBy","save","info","channelId","code","Error","updateChannel","updateData","findOneAndUpdate","new","deleteChannel","result","findOneAndDelete","validateChannelExists","createDefaultChannels","defaultChannels","upsert","module","exports"],"sources":["channelService.js"],"sourcesContent":["const Channel = require('../models/Channel');\nconst { logger } = require('../middleware/auth');\nconst {\n  cacheQueryResult,\n  getCachedQueryResult,\n  batchCacheChannels\n} = require('./cacheService');\n\nclass ChannelService {\n  constructor() {\n    this.logger = logger;\n  }\n\n  async getAllChannels() {\n    try {\n      // Check cache first\n      const cacheKey = 'all-channels-list';\n      const cachedChannels = await getCachedQueryResult(cacheKey);\n\n      if (cachedChannels) {\n        this.logger.debug('Channels list cache hit');\n        return cachedChannels;\n      }\n\n      const channels = await Channel.find({})\n        .select('-_id id name type description createdBy position')\n        .sort({ position: 1 });\n\n      // Cache the result asynchronously (don't wait)\n      cacheQueryResult(cacheKey, channels, 300).catch(error =>\n        this.logger.warn('Failed to cache channels list:', error.message)\n      );\n\n      // Also batch cache individual channels\n      batchCacheChannels(channels.slice(0, 20)).catch(error =>\n        this.logger.warn('Failed to batch cache channels:', error.message)\n      );\n\n      this.logger.debug(`Retrieved ${channels.length} channels`);\n      return channels;\n    } catch (error) {\n      this.logger.error('Error fetching channels:', error);\n      throw error;\n    }\n  }\n\n  async getChannelById(id) {\n    try {\n      const channel = await Channel.findOne({ id });\n      return channel;\n    } catch (error) {\n      this.logger.error('Error fetching channel by ID:', error);\n      throw error;\n    }\n  }\n\n  async createChannel(channelData) {\n    try {\n      const { name, type, description, createdBy } = channelData;\n\n      // Create new channel (ID will be auto-generated in pre-save middleware)\n      const channel = new Channel({\n        name,\n        type,\n        description,\n        createdBy\n      });\n\n      await channel.save();\n\n      this.logger.info(`Channel '${name}' created by ${createdBy}`, {\n        channelId: channel.id,\n        type,\n        createdBy\n      });\n\n      return channel;\n    } catch (error) {\n      if (error.code === 11000) {\n        throw new Error('Channel name already exists');\n      }\n      this.logger.error('Error creating channel:', error);\n      throw error;\n    }\n  }\n\n  async updateChannel(channelId, updateData) {\n    try {\n      const channel = await Channel.findOneAndUpdate(\n        { id: channelId },\n        updateData,\n        { new: true }\n      );\n\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      this.logger.info(`Channel '${channelId}' updated`);\n      return channel;\n    } catch (error) {\n      this.logger.error('Error updating channel:', error);\n      throw error;\n    }\n  }\n\n  async deleteChannel(channelId) {\n    try {\n      const result = await Channel.findOneAndDelete({ id: channelId });\n      if (!result) {\n        throw new Error('Channel not found');\n      }\n\n      this.logger.info(`Channel '${channelId}' deleted`);\n      return result;\n    } catch (error) {\n      this.logger.error('Error deleting channel:', error);\n      throw error;\n    }\n  }\n\n  async validateChannelExists(channelId) {\n    try {\n      const channel = await this.getChannelById(channelId);\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n      return channel;\n    } catch (error) {\n      this.logger.warn('Channel validation failed:', error.message);\n      throw error;\n    }\n  }\n\n  async createDefaultChannels() {\n    try {\n      const defaultChannels = [\n        { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n        { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' }\n      ];\n\n      for (const channelData of defaultChannels) {\n        await Channel.findOneAndUpdate(\n          { id: channelData.id },\n          channelData,\n          { upsert: true, new: true }\n        );\n      }\n\n      this.logger.info('Default channels initialized');\n    } catch (error) {\n      this.logger.error('Error creating default channels:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = new ChannelService();"],"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","ignoreList":[]}