d45e2e13672ae53a1d683bc7dfb15d56
const io = require('socket.io-client');
const jwt = require('jsonwebtoken');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const User = require('../models/User');
const Channel = require('../models/Channel');
const Message = require('../models/Message');
const SocketTestServer = require('./socket-server.test');

// Utility function to wait for socket event with timeout and retry
function waitForEvent(socket, eventName, timeout = 5000, retryCount = 3) {
  return new Promise((resolve, reject) => {
    let resolved = false;
    let attempts = 0;
    const cleanup = () => {
      socket.off(eventName, eventHandler);
      clearTimeout(timeoutId);
    };
    const eventHandler = data => {
      if (!resolved) {
        resolved = true;
        cleanup();
        resolve(data);
      }
    };
    const tryWait = () => {
      if (resolved || attempts >= retryCount) return;
      const timeoutId = setTimeout(() => {
        if (!resolved) {
          attempts++;
          if (attempts < retryCount) {
            tryWait(); // Retry
          } else {
            cleanup();
            reject(new Error(`Event '${eventName}' not received after ${retryCount} attempts (${timeout * retryCount}ms)`));
          }
        }
      }, timeout);
      if (!resolved) {
        socket.once(eventName, eventHandler);
      }
    };
    tryWait();
  });
}

// Utility function to wait for socket connection with timeout
function waitForSocketConnection(socket, timeout = 5000) {
  return new Promise((resolve, reject) => {
    if (socket.connected) {
      resolve(socket);
      return;
    }
    let resolved = false;
    let cleanup = () => {
      socket.off('connect', connectHandler);
      socket.off('connect_error', errorHandler);
      clearTimeout(timeoutId);
    };
    const connectHandler = () => {
      if (!resolved) {
        resolved = true;
        cleanup();
        resolve(socket);
      }
    };
    const errorHandler = error => {
      if (!resolved) {
        resolved = true;
        cleanup();
        reject(new Error(`Socket connection failed: ${error.message}`));
      }
    };
    const timeoutId = setTimeout(() => {
      if (!resolved) {
        resolved = true;
        cleanup();
        reject(new Error(`Socket connection timeout after ${timeout}ms`));
      }
    }, timeout);
    socket.on('connect', connectHandler);
    socket.on('connect_error', errorHandler);
  });
}

// Utility function to simulate network latency
function simulateLatency(socket, latency = 100) {
  const originalEmit = socket.emit.bind(socket);
  socket.emit = (...args) => {
    return new Promise(resolve => {
      setTimeout(() => {
        originalEmit(...args);
        resolve();
      }, latency);
    });
  };
}

// Retry utility for operations
async function retryOperation(operation, maxRetries = 3, delay = 1000) {
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      if (attempt === maxRetries - 1) throw error;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}
let testServer;
let testUser;
let testToken;
let serverPort;
describe('Socket.IO Extended Tests - Improved Stability', () => {
  beforeAll(async () => {
    jest.setTimeout(90000); // Increase timeout for full test suite

    await retryOperation(async () => {
      await connectDB();
    }, 3, 2000);
    testServer = new SocketTestServer();
    serverPort = await retryOperation(async () => {
      return await testServer.start();
    }, 3, 2000);
    testUser = new User({
      nickname: 'extendedSocketTestUser',
      email: 'extended-socket@test.com',
      password: 'testpass123',
      status: 'online'
    });
    await testUser.save();

    // Create test channels with better error handling
    try {
      await Channel.findOneAndUpdate({
        id: 'general'
      }, {
        id: 'general',
        name: 'General Chat',
        type: 'text',
        createdBy: 'system'
      }, {
        upsert: true,
        new: true
      });
      await Channel.findOneAndUpdate({
        id: 'voice-chat'
      }, {
        id: 'voice-chat',
        name: 'Voice Chat',
        type: 'voice',
        createdBy: 'system'
      }, {
        upsert: true,
        new: true
      });
      await Channel.findOneAndUpdate({
        id: 'private-test'
      }, {
        id: 'private-test',
        name: 'Private Test',
        type: 'text',
        createdBy: 'system'
      }, {
        upsert: true,
        new: true
      });
    } catch (error) {
      console.warn('Channel creation warning:', error.message);
    }

    // Create JWT token
    testToken = jwt.sign({
      id: testUser._id,
      nickname: testUser.nickname,
      role: testUser.role
    }, process.env.JWT_SECRET, {
      expiresIn: '24h'
    });
  });
  afterAll(async () => {
    if (testServer) {
      await testServer.stop();
    }
    await closeDB();
  });
  describe('Authentication Edge Cases', () => {
    test('should reject invalid JWT token', async () => {
      const invalidSocket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: 'invalid-token'
        },
        forceNew: true
      });
      let caughtError = null;
      invalidSocket.on('connect_error', error => {
        caughtError = error;
      });

      // Wait for connection attempt to fail
      await expect(waitForSocketConnection(invalidSocket, 3000)).rejects.toThrow();
      expect(caughtError).toBeTruthy();
      invalidSocket.disconnect();
    });
    test('should reject connection without token', async () => {
      const noTokenSocket = io(`http://localhost:${serverPort}`, {
        forceNew: true
      });
      let caughtError = null;
      noTokenSocket.on('connect_error', error => {
        caughtError = error;
      });
      await expect(waitForSocketConnection(noTokenSocket, 3000)).rejects.toThrow();
      expect(caughtError).toBeTruthy();
      noTokenSocket.disconnect();
    });
  });
  describe('Private Messages - /w Command Edge Cases', () => {
    let clientSocket, secondSocket;
    beforeEach(done => {
      const secondUser = new User({
        nickname: 'extendedTestUser2',
        email: 'extended-test2@test.com',
        password: 'testpass123',
        status: 'online'
      });
      secondUser.save().then(() => {
        const secondToken = jwt.sign({
          id: secondUser._id,
          nickname: secondUser.nickname,
          role: secondUser.role
        }, process.env.JWT_SECRET, {
          expiresIn: '24h'
        });
        clientSocket = io(`http://localhost:${serverPort}`, {
          auth: {
            token: testToken
          },
          forceNew: true
        });
        secondSocket = io(`http://localhost:${serverPort}`, {
          auth: {
            token: secondToken
          },
          forceNew: true
        });
        secondSocket.on('connect', () => {
          clientSocket.emit('join_room', {
            room: 'general'
          });
          secondSocket.emit('join_room', {
            room: 'general'
          });
          done();
        });
        console.log('Connecting secondDebugger socket with token:', secondToken.substring(0, 20) + '...');
        console.log('TestUser ID:', testUser._id, 'Status:', testUser.status);
        secondSocket.on('connect_error', error => {
          done(new Error(`Second socket failed: ${error.message}`));
        });
      });
    });
    afterEach(() => {
      if (clientSocket) clientSocket.disconnect();
      if (secondSocket) secondSocket.disconnect();
    });
    test('should send private message between users', async () => {
      const privateMessage = 'Private message from extended test';

      // Wait for both sockets to be ready
      await retryOperation(async () => {
        await Promise.all([waitForSocketConnection(clientSocket), waitForSocketConnection(secondSocket)]);
      });

      // Emit the message
      clientSocket.emit('private_message', {
        to: 'extendedTestUser2',
        text: privateMessage
      });

      // Wait for both sides to receive the message
      const [senderData, receiverData] = await Promise.all([waitForEvent(clientSocket, 'private_message'), waitForEvent(secondSocket, 'private_message')]);
      expect(senderData.text).toBe(privateMessage);
      expect(receiverData.text).toBe(privateMessage);
      expect(receiverData.author).toBe(testUser.nickname);
      expect(receiverData.from || receiverData.author).toBe(testUser.nickname);
    });
  });
  describe('Message History and Archival', () => {
    let clientSocket;
    beforeEach(done => {
      clientSocket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      clientSocket.on('connect', () => {
        done();
      });
      clientSocket.on('connect_error', error => {
        done(new Error(`Connection failed: ${error.message}`));
      });
    });
    afterEach(() => {
      if (clientSocket) clientSocket.disconnect();
    });
    test('should receive history when joining room', async () => {
      // Send a test message first
      await retryOperation(async () => {
        await waitForSocketConnection(clientSocket);
      });
      clientSocket.emit('join_room', {
        room: 'general'
      });

      // Wait for history event
      const history = await waitForEvent(clientSocket, 'history');
      expect(Array.isArray(history)).toBe(true);
      if (history.length > 0) {
        expect(history[0]).toHaveProperty('author');
        expect(history[0]).toHaveProperty('text');
        expect(history[0]).toHaveProperty('timestamp');
      }
    });
    test('should handle history request without room', done => {
      clientSocket.emit('get_history');
      clientSocket.on('history', messages => {
        expect(Array.isArray(messages)).toBe(true);
        done();
      });
    });
  });
  describe('Room Switching and Channel Validation', () => {
    test('should handle invalid room names', done => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      socket.on('connect', () => {
        socket.emit('join_room', {
          room: ''
        });
        socket.on('error', data => {
          expect(data.code).toBe('INVALID_ROOM_FORMAT');
          socket.disconnect();
          done();
        });
      });
      socket.on('connect_error', error => {
        done(new Error(`Connection failed: ${error.message}`));
      });
    });
    test('should handle non-existent channel', done => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      socket.on('connect', () => {
        socket.emit('join_room', {
          room: 'non-existent-channel'
        });
        socket.on('error', data => {
          expect(data.code).toBe('CHANNEL_NOT_FOUND');
          socket.disconnect();
          done();
        });
      });
    });
  });
  describe('Connection Management and Recovery', () => {
    test('should handle connection recovery after disconnect', async () => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 500
      });
      await waitForSocketConnection(socket);
      expect(socket.connected).toBe(true);

      // Disconnect and wait for reconnection
      socket.disconnect();

      // Wait for disconnect event
      await waitForEvent(socket, 'disconnect');

      // Create new connection (automatic reconnection would be ideal but may not work reliably)
      const newSocket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      await waitForSocketConnection(newSocket);
      expect(newSocket.connected).toBe(true);
      newSocket.disconnect();
    });
    test('should handle rapid connections', async () => {
      const totalSockets = 3;
      const sockets = [];

      // Create all sockets at once using Promise.all
      const connectionPromises = Array.from({
        length: totalSockets
      }, async (_, i) => {
        const socket = io(`http://localhost:${serverPort}`, {
          auth: {
            token: testToken
          },
          forceNew: true
        });
        await waitForSocketConnection(socket);
        sockets.push(socket);
        return socket;
      });

      // Wait for all connections simultaneously
      await Promise.all(connectionPromises);
      expect(sockets.length).toBe(totalSockets);

      // Clean up
      sockets.forEach(sock => sock.disconnect());
    });
  });
  describe('Advanced Voice Channel Scenarios', () => {
    test('should reject joining text channel as voice channel', done => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      socket.on('connect', () => {
        socket.emit('join_voice_channel', {
          channelId: 'general'
        }); // Text channel
        socket.on('voice_error', data => {
          expect(data.message).toBe('Voice channel not found');
          socket.disconnect();
          done();
        });
      });
    });
    test('should join voice channel without room first', done => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      socket.on('connect', () => {
        socket.emit('join_voice_channel', {
          channelId: 'voice-chat'
        });
        socket.on('voice_joined', data => {
          expect(data.channelId).toBe('voice-chat');
          socket.disconnect();
          done();
        });
      });
    });
  });
  describe('Rate Limiting and Performance', () => {
    test('should maintain performance under load', done => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      socket.on('connect', () => {
        const startTime = Date.now();
        let operationCount = 0;
        const targetOperations = 20;
        const performOperation = () => {
          socket.emit('message', {
            text: `Load test ${operationCount + 1}`
          });
          operationCount++;
          if (operationCount >= targetOperations) {
            const endTime = Date.now();
            const duration = endTime - startTime;
            expect(duration).toBeLessThan(5000); // 5 seconds max
            socket.disconnect();
            done();
          } else {
            setTimeout(performOperation, 50);
          }
        };
        socket.emit('join_room', {
          room: 'general'
        });
        socket.on('online_users', () => {
          performOperation();
        });
      });
      socket.on('connect_error', error => {
        done(new Error(`Connection failed: ${error.message}`));
      });
    });
  });
  describe('Error Recovery and Resilience', () => {
    test('should handle malformed messages gracefully', done => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      socket.on('connect', () => {
        socket.emit('join_room', {
          room: 'general'
        });
        socket.on('online_users', () => {
          const malformedMessages = [null, undefined, {
            text: ''
          }, {
            text: '   '
          }, {}];
          malformedMessages.forEach(malformed => {
            socket.emit('message', malformed);
          });
          setTimeout(() => {
            expect(true).toBe(true); // Test passes if no errors thrown
            socket.disconnect();
            done();
          }, 1000);
        });
      });
      socket.on('connect_error', error => {
        done(new Error(`Connection failed: ${error.message}`));
      });
    });
  });
  describe('Network Conditions Emulation', () => {
    test('should handle high latency connections', async () => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });

      // Simulate latency by monkey-patching the emit method
      simulateLatency(socket);
      await waitForSocketConnection(socket, 10000); // Increased timeout for latency

      socket.emit('join_room', {
        room: 'general'
      });
      const data = await waitForEvent(socket, 'message', 10000);
      expect(data.author).toBe('System');
      socket.disconnect();
    });
    test('should handle connection drops and recovery', async () => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true,
        reconnection: true,
        reconnectionDelay: 100,
        reconnectionAttempts: 5
      });
      await waitForSocketConnection(socket);
      socket.emit('join_room', {
        room: 'general'
      });
      await waitForEvent(socket, 'online_users');

      // Forcefully disconnect the socket
      socket.disconnect();

      // The test passes if we reach here without hanging
      expect(true).toBe(true);
    });
    test('should retry failed operations', async () => {
      let retryCount = 0;
      const mockOperation = async () => {
        retryCount++;
        if (retryCount < 2) {
          throw new Error('Simulated network error');
        }
        return 'success';
      };
      const result = await retryOperation(mockOperation, 3, 10); // Very short delay for testing
      expect(result).toBe('success');
      expect(retryCount).toBe(2);
    });
    test('should handle multiple simultaneous operations with Promise.all', async () => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      await waitForSocketConnection(socket);
      socket.emit('join_room', {
        room: 'general'
      });

      // Create multiple promises that should complete simultaneously
      const promises = [waitForEvent(socket, 'online_users'), new Promise(resolve => setTimeout(resolve, 100)).then(() => 'delay'), retryOperation(async () => {
        socket.emit('message', {
          text: 'Concurrent test message'
        });
        return waitForEvent(socket, 'message');
      })];
      const results = await Promise.all(promises);
      expect(results[0]).toHaveLength; // online_users is an array
      expect(results[1]).toBe('delay');
      expect(results[2].text).toBe('Concurrent test message');
      socket.disconnect();
    });
    test('should maintain stability under message flood', async () => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      await waitForSocketConnection(socket);
      socket.emit('join_room', {
        room: 'general'
      });
      await waitForEvent(socket, 'online_users');
      const messagePromises = [];
      for (let i = 0; i < 10; i++) {
        messagePromises.push(retryOperation(async () => {
          socket.emit('message', {
            text: `Flood test ${i}`
          });
          return waitForEvent(socket, 'message');
        }));
      }

      // Use Promise.allSettled for messages that might timeout
      const results = await Promise.allSettled(messagePromises);
      const successful = results.filter(r => r.status === 'fulfilled').length;
      expect(successful).toBeGreaterThan(5); // At least 50% success rate

      socket.disconnect();
    });
    test('should handle network disconnection gracefully', async () => {
      const socket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      await waitForSocketConnection(socket);
      socket.emit('join_room', {
        room: 'general'
      });
      await waitForEvent(socket, 'online_users');

      // Simulate network disconnection by disconnecting
      socket.disconnect();

      // Wait for disconnect event
      await waitForEvent(socket, 'disconnect');

      // Should be able to reconnect
      const newSocket = io(`http://localhost:${serverPort}`, {
        auth: {
          token: testToken
        },
        forceNew: true
      });
      await waitForSocketConnection(newSocket, 10000); // Longer timeout
      expect(newSocket.connected).toBe(true);
      newSocket.disconnect();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,