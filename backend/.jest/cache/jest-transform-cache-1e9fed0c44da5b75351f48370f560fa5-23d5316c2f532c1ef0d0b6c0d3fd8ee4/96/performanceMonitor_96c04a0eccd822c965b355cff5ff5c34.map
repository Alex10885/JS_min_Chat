{"version":3,"names":["performance","PerformanceObserver","require","winston","PerformanceMonitor","constructor","logger","createLogger","level","format","combine","timestamp","errors","stack","json","transports","File","filename","Console","colorize","simple","performanceObserver","list","entries","getEntries","forEach","entry","logPerformanceMetric","observe","type","metrics","responseTimes","endpointStats","Map","slowQueries","memoryUsage","throughput","lastResetTime","Date","now","alerts","slowResponseThreshold","highErrorRateThreshold","highMemoryThreshold","apiPerformanceMiddleware","req","res","next","startTime","startMemory","process","heapUsed","endpoint","method","route","path","url","debug","userAgent","get","ip","toISOString","on","endTime","endMemory","responseTime","memoryDelta","storeEndpointMetrics","statusCode","info","toFixed","contentLength","warn","threshold","recommendation","error","message","dbQueryPerformanceMiddleware","dbQueryObserver","query","options","mark","result","measure","getEntriesByName","length","duration","log","operation","name","collection","JSON","stringify","clearMarks","clearMeasures","push","shift","has","set","count","totalTime","avgTime","minTime","maxTime","p95Time","statusCodes","stats","Math","min","max","sortedTimes","sort","a","b","p95Index","floor","getHealthData","uptime","memory","used","total","heapTotal","percentage","requests","averageResponseTime","calculateAverageResponseTime","p95ResponseTime","calculateP95ResponseTime","endpoints","Array","from","map","memoryImpact","reduce","sorted","checkAlerts","avgResponseTime","errorRate","usage","detail","getDetailedStats","resetMetrics","cpu","cpuUsage","platform","nodeVersion","version","pid","environment","env","NODE_ENV","clear","performanceMonitor","getHealthCheck","healthData","status","getPerformanceDashboard","detailedStats","recommendations","generatePerformanceRecommendations","module","exports"],"sources":["performanceMonitor.js"],"sourcesContent":["const { performance, PerformanceObserver } = require('perf_hooks');\nconst winston = require('winston');\n\n// Performance monitoring middleware\nclass PerformanceMonitor {\n  constructor() {\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n      ),\n      transports: [\n        new winston.transports.File({ filename: 'logs/performance.log' }),\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        })\n      ]\n    });\n\n    this.performanceObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        this.logPerformanceMetric(entry);\n      });\n    });\n\n    this.performanceObserver.observe({ type: 'measure' });\n\n    // Metrics storage (simple in-memory for performance)\n    this.metrics = {\n      responseTimes: [],\n      endpointStats: new Map(),\n      slowQueries: [],\n      memoryUsage: [],\n      throughput: 0,\n      errors: 0,\n      lastResetTime: Date.now()\n    };\n\n    this.alerts = {\n      slowResponseThreshold: 5000, // 5 seconds\n      highErrorRateThreshold: 0.1, // 10%\n      highMemoryThreshold: 0.8 // 80%\n    };\n  }\n\n  // Middleware for API endpoints\n  apiPerformanceMiddleware() {\n    return (req, res, next) => {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage().heapUsed;\n      const endpoint = `${req.method} ${req.route?.path || req.url}`;\n\n      // Log incoming request\n      this.logger.debug('API Request Started', {\n        method: req.method,\n        url: req.url,\n        endpoint,\n        userAgent: req.get('User-Agent'),\n        ip: req.ip,\n        timestamp: new Date().toISOString()\n      });\n\n      res.on('finish', () => {\n        const endTime = performance.now();\n        const endMemory = process.memoryUsage().heapUsed;\n        const responseTime = endTime - startTime;\n        const memoryDelta = endMemory - startMemory;\n\n        // Store metrics\n        this.storeEndpointMetrics(endpoint, responseTime, memoryDelta, res.statusCode);\n\n        // Log detailed performance data\n        this.logger.info('API Response Performance', {\n          endpoint,\n          responseTime: `${responseTime.toFixed(2)}ms`,\n          memoryDelta: `${(memoryDelta / 1024 / 1024).toFixed(2)}MB`,\n          statusCode: res.statusCode,\n          contentLength: res.get('Content-Length') || 0,\n          userAgent: req.get('User-Agent'),\n          ip: req.ip,\n          timestamp: new Date().toISOString()\n        });\n\n        // Alert on slow responses\n        if (responseTime > this.alerts.slowResponseThreshold) {\n          this.logger.warn('⚠️ SLOW RESPONSE ALERT', {\n            endpoint,\n            responseTime: `${responseTime.toFixed(2)}ms`,\n            threshold: `${this.alerts.slowResponseThreshold}ms`,\n            recommendation: 'Consider optimization or caching'\n          });\n        }\n      });\n\n      res.on('error', (error) => {\n        const endTime = performance.now();\n        const responseTime = endTime - startTime;\n\n        this.logger.error('API Request Error', {\n          endpoint,\n          responseTime: `${responseTime.toFixed(2)}ms`,\n          error: error.message,\n          stack: error.stack,\n          ip: req.ip\n        });\n\n        this.metrics.errors++;\n      });\n\n      next();\n    };\n  }\n\n  // Database query performance monitoring middleware\n  dbQueryPerformanceMiddleware() {\n    return async function dbQueryObserver(query, options) {\n      performance.mark('query-start');\n      try {\n        const result = await query();\n        performance.mark('query-end');\n        performance.measure('query-duration', 'query-start', 'query-end');\n\n        const entries = performance.getEntriesByName('query-duration');\n        if (entries.length > 0) {\n          const duration = entries[0].duration;\n\n          winston.log('info', 'Database Query Performance', {\n            operation: query.constructor.name,\n            collection: options?.collection?.name || 'unknown',\n            query: JSON.stringify(options?.query || {}),\n            duration: `${duration.toFixed(2)}ms`,\n            timestamp: new Date().toISOString()\n          });\n\n          // Log slow queries\n          if (duration > 1000) {\n            winston.log('warn', 'SLOW QUERY ALERT', {\n              operation: query.constructor.name,\n              collection: options?.collection?.name || 'unknown',\n              duration: `${duration.toFixed(2)}ms`,\n              query: JSON.stringify(options?.query || {}),\n              timestamp: new Date().toISOString(),\n              recommendation: 'Consider adding indexes or optimizing query'\n            });\n          }\n        }\n\n        return result;\n      } finally {\n        performance.clearMarks('query-start');\n        performance.clearMarks('query-end');\n        performance.clearMeasures('query-duration');\n      }\n    };\n  }\n\n  // Store endpoint metrics for analytics\n  storeEndpointMetrics(endpoint, responseTime, memoryDelta, statusCode) {\n    // Update response times array (keep last 1000 entries)\n    this.metrics.responseTimes.push(responseTime);\n    if (this.metrics.responseTimes.length > 1000) {\n      this.metrics.responseTimes.shift();\n    }\n\n    // Update endpoint statistics\n    if (!this.metrics.endpointStats.has(endpoint)) {\n      this.metrics.endpointStats.set(endpoint, {\n        count: 0,\n        totalTime: 0,\n        avgTime: 0,\n        minTime: responseTime,\n        maxTime: responseTime,\n        p95Time: 0,\n        statusCodes: new Map(),\n        memoryUsage: []\n      });\n    }\n\n    const stats = this.metrics.endpointStats.get(endpoint);\n    stats.count++;\n    stats.totalTime += responseTime;\n    stats.avgTime = stats.totalTime / stats.count;\n    stats.minTime = Math.min(stats.minTime, responseTime);\n    stats.maxTime = Math.max(stats.maxTime, responseTime);\n\n    // Update status codes\n    stats.statusCodes.set(statusCode, (stats.statusCodes.get(statusCode) || 0) + 1);\n\n    // Store memory usage (keep last 100)\n    stats.memoryUsage.push(memoryDelta);\n    if (stats.memoryUsage.length > 100) {\n      stats.memoryUsage.shift();\n    }\n\n    // Calculate P95 response time\n    const sortedTimes = [...this.metrics.responseTimes].sort((a, b) => a - b);\n    const p95Index = Math.floor(sortedTimes.length * 0.95);\n    if (sortedTimes[p95Index]) {\n      stats.p95Time = sortedTimes[p95Index];\n    }\n  }\n\n  // Health check endpoint\n  getHealthData() {\n    const uptime = process.uptime();\n    const memory = process.memoryUsage();\n\n    return {\n      uptime: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m ${Math.floor(uptime % 60)}s`,\n      memory: {\n        used: `${(memory.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n        total: `${(memory.heapTotal / 1024 / 1024).toFixed(2)}MB`,\n        percentage: `${((memory.heapUsed / memory.heapTotal) * 100).toFixed(2)}%`\n      },\n      requests: {\n        total: this.metrics.responseTimes.length,\n        averageResponseTime: this.calculateAverageResponseTime(),\n        p95ResponseTime: this.calculateP95ResponseTime(),\n        errors: this.metrics.errors\n      },\n      endpoints: Array.from(this.metrics.endpointStats.entries()).map(([endpoint, stats]) => ({\n        endpoint,\n        count: stats.count,\n        avgTime: `${stats.avgTime.toFixed(2)}ms`,\n        p95Time: `${stats.p95Time.toFixed(2)}ms`,\n        minTime: `${stats.minTime.toFixed(2)}ms`,\n        maxTime: `${stats.maxTime.toFixed(2)}ms`,\n        memoryImpact: `${(stats.memoryUsage.reduce((a, b) => a + b, 0) / stats.memoryUsage.length / 1024 / 1024).toFixed(2)}MB avg`\n      }))\n    };\n  }\n\n  // Performance metrics calculation\n  calculateAverageResponseTime() {\n    if (this.metrics.responseTimes.length === 0) return 0;\n    return this.metrics.responseTimes.reduce((a, b) => a + b, 0) / this.metrics.responseTimes.length;\n  }\n\n  calculateP95ResponseTime() {\n    if (this.metrics.responseTimes.length === 0) return 0;\n    const sorted = [...this.metrics.responseTimes].sort((a, b) => a - b);\n    return sorted[Math.floor(sorted.length * 0.95)] || 0;\n  }\n\n  // Alert checking\n  checkAlerts() {\n    const avgResponseTime = this.calculateAverageResponseTime();\n    const errorRate = this.metrics.errors / Math.max(this.metrics.responseTimes.length, 1);\n\n    if (avgResponseTime > this.alerts.slowResponseThreshold) {\n      this.logger.warn('🚨 PERFORMANCE ALERT: High average response time', {\n        avgTime: `${avgResponseTime.toFixed(2)}ms`,\n        threshold: `${this.alerts.slowResponseThreshold}ms`\n      });\n    }\n\n    if (errorRate > this.alerts.highErrorRateThreshold) {\n      this.logger.warn('🚨 ERROR RATE ALERT: High error rate', {\n        errorRate: `${(errorRate * 100).toFixed(2)}%`,\n        threshold: `${(this.alerts.highErrorRateThreshold * 100).toFixed(2)}%`\n      });\n    }\n\n    const memoryUsage = process.memoryUsage().heapUsed / process.memoryUsage().heapTotal;\n    if (memoryUsage > this.alerts.highMemoryThreshold) {\n      this.logger.warn('🚨 MEMORY ALERT: High memory usage', {\n        usage: `${(memoryUsage * 100).toFixed(2)}%`,\n        threshold: `${(this.alerts.highMemoryThreshold * 100).toFixed(2)}%`\n      });\n    }\n  }\n\n  logPerformanceMetric(entry) {\n    this.logger.debug('Performance Metric', {\n      name: entry.name,\n      duration: entry.duration,\n      startTime: entry.startTime,\n      detail: entry.detail || {}\n    });\n  }\n\n  // Get detailed stats for monitoring dashboard\n  getDetailedStats() {\n    // Reset metrics periodically (every hour)\n    const now = Date.now();\n    if (now - this.metrics.lastResetTime > 3600000) {\n      this.resetMetrics();\n    }\n\n    return {\n      ...this.metrics,\n      uptime: process.uptime(),\n      cpu: process.cpuUsage(),\n      memory: process.memoryUsage(),\n      platform: process.platform,\n      nodeVersion: process.version,\n      pid: process.pid,\n      environment: process.env.NODE_ENV\n    };\n  }\n\n  // Reset metrics (for periodic cleanup)\n  resetMetrics() {\n    this.metrics.lastResetTime = Date.now();\n    this.metrics.responseTimes = [];\n    this.metrics.endpointStats.clear();\n    this.metrics.slowQueries = [];\n    this.metrics.errors = 0;\n\n    this.logger.info('Performance metrics reset');\n  }\n}\n\n// Export singleton instance\nconst performanceMonitor = new PerformanceMonitor();\n\n// Health check route handler\nconst getHealthCheck = (req, res) => {\n  try {\n    const healthData = performanceMonitor.getHealthData();\n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      ...healthData\n    });\n  } catch (error) {\n    performanceMonitor.logger.error('Health check error:', error);\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// Performance dashboard endpoint\nconst getPerformanceDashboard = (req, res) => {\n  try {\n    const detailedStats = performanceMonitor.getDetailedStats();\n    res.json({\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      metrics: detailedStats,\n      recommendations: generatePerformanceRecommendations(detailedStats)\n    });\n  } catch (error) {\n    performanceMonitor.logger.error('Performance dashboard error:', error);\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\n// Generate performance recommendations\nfunction generatePerformanceRecommendations(metrics) {\n  const recommendations = [];\n\n  const avgResponseTime = metrics.responseTimes.reduce((a, b) => a + b, 0) / metrics.responseTimes.length;\n  if (avgResponseTime > 2000) {\n    recommendations.push('Consider optimizing slow API endpoints (>2s avg)');\n  }\n\n  const memoryUsage = process.memoryUsage().heapUsed / process.memoryUsage().heapTotal;\n  if (memoryUsage > 0.8) {\n    recommendations.push('High memory usage detected - consider memory optimization');\n  }\n\n  if (metrics.errors / Math.max(metrics.responseTimes.length, 1) > 0.1) {\n    recommendations.push('High error rate - investigate error causes');\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push('Performance looks good! 👍');\n  }\n\n  return recommendations;\n}\n\nmodule.exports = {\n  performanceMonitor,\n  apiPerformanceMiddleware: () => performanceMonitor.apiPerformanceMiddleware(),\n  dbQueryPerformanceMiddleware: () => performanceMonitor.dbQueryPerformanceMiddleware(),\n  getHealthCheck,\n  getPerformanceDashboard,\n  generatePerformanceRecommendations\n};"],"mappings":"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","ignoreList":[]}