{"version":3,"names":["cov_2ao5576xhl","actualCoverage","logger","s","require","geoLimitMap","getCountryFromIP","ip","f","b","startsWith","ipParts","split","length","firstOctet","parseInt","geographicRateLimiter","req","res","next","clientIP","connection","remoteAddress","country","multiplier","clientCountry","geoMultiplier","warn","path","userAgent","get","error","sessionFingerprint","session","authenticated","currentUserAgent","currentIP","currentTime","Date","toISOString","sessionId","sessionID","storedUA","currentUA","userId","nickname","suspiciousActivity","destroy","err","info","status","json","code","ipAddress","isConsideredSuspicious","isIPSuspicious","oldIP","newIP","suspicious","networkChanged","ipHistory","push","timestamp","lastActivity","checkSessionInactivity","now","sessionDuration","inactivityTimeout","duration","oldCountry","newCountry","module","exports"],"sources":["security.js"],"sourcesContent":["const { logger } = require('./auth');\n\n// Geographic-based rate limiting map (country -> multiplier)\nconst geoLimitMap = {\n  'RU': 1.0, // Russia - normal limits\n  'US': 1.2, // US - slightly higher suspicion\n  'CN': 1.5, // China - higher suspicion\n  'IN': 1.5, // India - higher suspicion\n  'BR': 1.2, // Brazil - slightly higher\n  'DE': 0.8, // Germany - lower suspicion\n  'JP': 0.9, // Japan - lower suspicion\n  'GB': 0.9, // UK - lower suspicion\n  'CA': 1.0, // Canada - normal\n  'AU': 1.0, // Australia - normal\n};\n\n// Simple IP country detection (without full geoip library for performance)\n// This is a basic implementation - in production, use geoip-lite or similar\nconst getCountryFromIP = (ip) => {\n  // This is a simplified version - in real implementation would use MaxMind DB\n  if (ip.startsWith('192.168.') || ip.startsWith('10.') || ip === '127.0.0.1') {\n    return 'LOCAL'; // Local network\n  }\n\n  // For demo purposes, return some countries based on IP patterns\n  // In production, integrate with geoip2-country or similar\n  const ipParts = ip.split('.');\n  if (ipParts.length === 4) {\n    const firstOctet = parseInt(ipParts[0]);\n    if (firstOctet === 5) return 'RU'; // Example simplification\n    if (firstOctet >= 68 && firstOctet <= 71) return 'US'; // Example for US\n    if (firstOctet >= 101 && firstOctet <= 126) return 'CN'; // Example for CN\n    if (firstOctet >= 198 && firstOctet <= 199) return 'BR'; // Example for BR\n    if (firstOctet >= 188 && firstOctet <= 191) return 'IN'; // Example for IN\n  }\n\n  return 'UNKNOWN'; // Default\n};\n\n// Geographic rate limiting middleware\nconst geographicRateLimiter = (req, res, next) => {\n  try {\n    const clientIP = req.ip || req.connection.remoteAddress;\n    const country = getCountryFromIP(clientIP);\n    const multiplier = geoLimitMap[country] || 1.0;\n\n    // Store geographic information in request for later use\n    req.clientIP = clientIP;\n    req.clientCountry = country;\n    req.geoMultiplier = multiplier;\n\n    // Log suspicious activities\n    if (multiplier > 1.3) {\n      logger.warn(`Suspicious request from ${country} (${clientIP})`, {\n        country,\n        ip: clientIP,\n        path: req.path,\n        userAgent: req.get('User-Agent'),\n        multiplier\n      });\n    }\n\n    next();\n  } catch (error) {\n    logger.error('Geographic middleware error:', error);\n    req.geoMultiplier = 1.0; // Default to normal limits\n    next();\n  }\n};\n\n// Enhanced session fingerprinting middleware\nconst sessionFingerprint = (req, res, next) => {\n  try {\n    if (req.session && req.session.authenticated) {\n      const currentUserAgent = req.get('User-Agent');\n      const currentIP = req.ip;\n      const currentTime = new Date().toISOString();\n\n      // Check if User-Agent has changed (basic check)\n      if (!req.session.userAgent) {\n        req.session.userAgent = currentUserAgent;\n      } else if (req.session.userAgent !== currentUserAgent) {\n        logger.warn('User-Agent fingerprint mismatch detected', {\n          sessionId: req.sessionID,\n          storedUA: req.session.userAgent,\n          currentUA: currentUserAgent,\n          ip: currentIP,\n          userId: req.session.userId,\n          nickname: req.session.nickname\n        });\n\n        // Flag as suspicious activity\n        req.session.suspiciousActivity = (req.session.suspiciousActivity || 0) + 1;\n\n        // If too many suspicious activities, destroy session\n        if (req.session.suspiciousActivity > 3) {\n          req.session.destroy((err) => {\n            if (err) logger.error('Failed to destroy suspicious session:', err);\n            else logger.info('Destroyed session due to suspicious activity', {\n              sessionId: req.sessionID,\n              userId: req.session.userId\n            });\n          });\n\n          return res.status(401).json({\n            error: 'Session compromised - please login again',\n            code: 'SESSION_COMPROMISED'\n          });\n        }\n      }\n\n      // Check IP change from session creation\n      if (!req.session.ipAddress) {\n        req.session.ipAddress = currentIP;\n      } else if (req.session.ipAddress !== currentIP) {\n        const isConsideredSuspicious = isIPSuspicious(req.session.ipAddress, currentIP);\n        if (isConsideredSuspicious) {\n          logger.warn('IP address change detected', {\n            sessionId: req.sessionID,\n            oldIP: req.session.ipAddress,\n            newIP: currentIP,\n            userId: req.session.userId,\n            nickname: req.session.nickname,\n            suspicious: isConsideredSuspicious,\n            networkChanged: true\n          });\n\n          req.session.suspiciousActivity = (req.session.suspiciousActivity || 0) + 1;\n\n          // Store IP history for analysis\n          if (!req.session.ipHistory) req.session.ipHistory = [];\n          req.session.ipHistory.push({\n            ip: currentIP,\n            timestamp: currentTime,\n            suspicious: true\n          });\n        } else {\n          // Store normal IP transitions for legitimate mobile usage\n          if (!req.session.ipHistory) req.session.ipHistory = [];\n          req.session.ipHistory.push({\n            ip: currentIP,\n            timestamp: currentTime,\n            suspicious: false\n          });\n        }\n      }\n\n      // Update last activity time\n      req.session.lastActivity = currentTime;\n    }\n\n    next();\n  } catch (error) {\n    logger.error('Session fingerprint middleware error:', error);\n    next(); // Continue even if fingerprinting fails\n  }\n};\n\n// Middleware for session inactivity timeout and automatic cleanup\nconst checkSessionInactivity = (req, res, next) => {\n  try {\n    if (req.session && req.session.authenticated) {\n      const now = new Date();\n      const lastActivity = req.session.lastActivity ? new Date(req.session.lastActivity) : now;\n      const sessionDuration = now - lastActivity;\n\n      // Check for prolonged inactivity (30 minutes)\n      const inactivityTimeout = 30 * 60 * 1000; // 30 minutes\n      if (sessionDuration > inactivityTimeout) {\n        logger.info('Session expired due to inactivity', {\n          sessionId: req.sessionID,\n          userId: req.session.userId,\n          nickname: req.session.nickname,\n          lastActivity: req.session.lastActivity,\n          duration: sessionDuration / 1000 / 60 + ' minutes'\n        });\n\n        req.session.destroy((err) => {\n          if (err) {\n            logger.error('Failed to destroy inactive session:', err);\n            return next();\n          }\n          res.json({\n            error: 'Session expired due to inactivity',\n            code: 'SESSION_INACTIVE'\n          });\n        });\n        return;\n      }\n\n      // Update last activity time\n      req.session.lastActivity = now.toISOString();\n    }\n    next();\n  } catch (error) {\n    logger.error('Session inactivity check error:', error);\n    next();\n  }\n};\n\n// Simple IP suspicious detection (different geographical regions)\nconst isIPSuspicious = (oldIP, newIP) => {\n  // This is a simplified check - in production use full geo-detection\n  const oldCountry = getCountryFromIP(oldIP);\n  const newCountry = getCountryFromIP(newIP);\n\n  // If both are known countries and different, might be suspicious\n  return (oldCountry !== 'UNKNOWN' && newCountry !== 'UNKNOWN' && oldCountry !== newCountry) ||\n         (oldCountry === 'UNKNOWN' && newCountry !== 'UNKNOWN') ||\n         (newCountry === 'UNKNOWN' && oldCountry !== 'UNKNOWN');\n};\n\nmodule.exports = {\n  geographicRateLimiter,\n  sessionFingerprint,\n  checkSessionInactivity\n};"],"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","ignoreList":[]}