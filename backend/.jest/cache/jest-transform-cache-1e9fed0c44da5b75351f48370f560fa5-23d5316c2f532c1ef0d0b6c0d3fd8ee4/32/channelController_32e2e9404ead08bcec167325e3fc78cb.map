{"version":3,"names":["cov_115p8gz5rs","actualCoverage","channelService","s","require","logger","ChannelController","constructor","f","getAllChannels","req","res","channels","info","user","nickname","userId","_id","channelCount","length","console","log","json","error","message","status","code","createChannel","name","type","description","body","createdBy","channel","channelId","id","position","b","details","getChannelById","params","updateChannel","updateData","deleteChannel","hasAdminPrivileges","deletedChannel","module","exports"],"sources":["channelController.js"],"sourcesContent":["const channelService = require('../services/channelService');\nconst { logger } = require('../middleware/auth');\n\nclass ChannelController {\n  constructor() {\n    this.logger = logger;\n  }\n\n  async getAllChannels(req, res) {\n    try {\n      const channels = await channelService.getAllChannels();\n\n      logger.info(`Channels list requested by ${req.user.nickname}`, {\n        userId: req.user._id,\n        channelCount: channels.length\n      });\n\n      console.log('üì§ Returning channels data:', channels.length);\n      res.json(channels);\n    } catch (error) {\n      logger.error('Error fetching channels:', error);\n      console.error('‚ùå Error in GET /api/channels:', error.message);\n      res.status(500).json({ error: 'Failed to fetch channels', code: 'DATABASE_ERROR' });\n    }\n  }\n\n  async createChannel(req, res) {\n    try {\n      const { name, type, description } = req.body;\n      const createdBy = req.user.nickname;\n\n      const channel = await channelService.createChannel({\n        name,\n        type,\n        description,\n        createdBy\n      });\n\n      logger.info(`Channel '${name}' created by ${createdBy}`, {\n        channelId: channel.id,\n        type,\n        userId: req.user._id\n      });\n\n      res.status(201).json({\n        id: channel.id,\n        name: channel.name,\n        type: channel.type,\n        description: channel.description,\n        createdBy: channel.createdBy,\n        position: channel.position\n      });\n    } catch (error) {\n      logger.error('Error creating channel:', error);\n\n      if (error.message === 'Channel name already exists') {\n        return res.status(409).json({\n          error: 'Channel name already exists',\n          code: 'DUPLICATE_CHANNEL'\n        });\n      }\n\n      if (error.name === 'ValidationError') {\n        return res.status(400).json({\n          error: 'Invalid channel data',\n          details: error.message\n        });\n      }\n\n      res.status(500).json({\n        error: 'Failed to create channel',\n        code: 'DATABASE_ERROR'\n      });\n    }\n  }\n\n  async getChannelById(req, res) {\n    try {\n      const { channelId } = req.params;\n      const channel = await channelService.getChannelById(channelId);\n\n      if (!channel) {\n        return res.status(404).json({\n          error: 'Channel not found',\n          code: 'CHANNEL_NOT_FOUND'\n        });\n      }\n\n      res.json({\n        id: channel.id,\n        name: channel.name,\n        type: channel.type,\n        description: channel.description,\n        createdBy: channel.createdBy,\n        position: channel.position\n      });\n    } catch (error) {\n      logger.error('Error fetching channel:', error);\n      res.status(500).json({ error: 'Failed to fetch channel', code: 'DATABASE_ERROR' });\n    }\n  }\n\n  async updateChannel(req, res) {\n    try {\n      const { channelId } = req.params;\n      const updateData = req.body;\n\n      const channel = await channelService.updateChannel(channelId, updateData);\n\n      logger.info(`Channel '${channelId}' updated by ${req.user.nickname}`, {\n        userId: req.user._id\n      });\n\n      res.json({\n        id: channel.id,\n        name: channel.name,\n        type: channel.type,\n        description: channel.description,\n        createdBy: channel.createdBy,\n        position: channel.position\n      });\n    } catch (error) {\n      logger.error('Error updating channel:', error);\n      if (error.message === 'Channel not found') {\n        res.status(404).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: 'Failed to update channel', code: 'DATABASE_ERROR' });\n      }\n    }\n  }\n\n  async deleteChannel(req, res) {\n    try {\n      const { channelId } = req.params;\n\n      // Check if channel exists first\n      const channel = await channelService.getChannelById(channelId);\n      if (channel.createdBy !== req.user.nickname && !req.user.hasAdminPrivileges()) {\n        return res.status(403).json({\n          error: 'You can only delete channels you created',\n          code: 'INSUFFICIENT_PERMISSIONS'\n        });\n      }\n\n      const deletedChannel = await channelService.deleteChannel(channelId);\n\n      logger.info(`Channel '${channelId}' deleted by ${req.user.nickname}`, {\n        userId: req.user._id\n      });\n\n      res.json({\n        message: 'Channel deleted successfully',\n        channel: {\n          id: deletedChannel.id,\n          name: deletedChannel.name\n        }\n      });\n    } catch (error) {\n      logger.error('Error deleting channel:', error);\n      if (error.message === 'Channel not found') {\n        res.status(404).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: 'Failed to delete channel', code: 'DATABASE_ERROR' });\n      }\n    }\n  }\n}\n\nmodule.exports = new ChannelController();"],"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","ignoreList":[]}