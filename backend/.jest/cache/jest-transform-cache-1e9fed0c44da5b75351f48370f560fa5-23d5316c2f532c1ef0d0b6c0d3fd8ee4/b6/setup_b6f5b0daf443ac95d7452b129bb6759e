4a225ba949a6e095c362d521b14ac990
const mongoose = require('mongoose');
const {
  exec
} = require('child_process');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
let mongodProcess;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Check if mongod is running
  const isMongodRunning = () => {
    return new Promise(resolve => {
      exec('pgrep mongod', error => {
        resolve(!error);
      });
    });
  };

  // If mongod is not running, start it
  if (!(await isMongodRunning())) {
    console.log('Starting mongod...');
    mongodProcess = exec('mongod --port 27017 --dbpath /tmp/mongodb_test --logpath /tmp/mongod_test.log --fork', error => {
      if (error) {
        console.error('Failed to start mongod:', error);
        throw error;
      }
    });
    // Wait a bit for mongod to start
    await new Promise(resolve => setTimeout(resolve, 2000));
  } else {
    console.log('mongod is already running');
  }

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = 'mongodb://localhost:27017/chatjs_test';
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to local test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues
  await TestFixtures.cleanup();
  await closeDB();

  // Stop mongod if we started it
  if (mongodProcess) {
    console.log('Stopping mongod...');
    exec('pkill -f mongod');
  }

  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test (skip if security test file detected)
  if (mongoose.connection.readyState === 1 && global.testFileName !== 'auth-security.test.js') {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      await collections[key].deleteMany({});
    }
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJleGVjIiwiY29ubmVjdERCIiwiY2xvc2VEQiIsIlRlc3RGaXh0dXJlcyIsIm9yaWdpbmFsTW9uZ29VcmkiLCJtb25nb2RQcm9jZXNzIiwiYmVmb3JlQWxsIiwiZ2xvYmFsIiwiZ2MiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJpc01vbmdvZFJ1bm5pbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInNldFRpbWVvdXQiLCJOT0RFX0VOViIsIkpXVF9TRUNSRVQiLCJzZXR1cCIsImFmdGVyQWxsIiwiY2xlYW51cCIsImFmdGVyRWFjaCIsImNvbm5lY3Rpb24iLCJyZWFkeVN0YXRlIiwidGVzdEZpbGVOYW1lIiwiY29sbGVjdGlvbnMiLCJrZXkiLCJkZWxldGVNYW55IiwiamVzdCIsIk5PREVfVEVTVF9USU1FT1VUIiwic2V0Il0sInNvdXJjZXMiOlsic2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuY29uc3QgeyBleGVjIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCB7IGNvbm5lY3REQiwgY2xvc2VEQiB9ID0gcmVxdWlyZSgnLi4vZGIvY29ubmVjdGlvbicpO1xuY29uc3QgeyBUZXN0Rml4dHVyZXMgfSA9IHJlcXVpcmUoJy4vc2hhcmVkL3Rlc3RGaXh0dXJlcycpO1xuXG5cbmxldCBvcmlnaW5hbE1vbmdvVXJpO1xubGV0IG1vbmdvZFByb2Nlc3M7XG5cbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgLy8gRW5hYmxlIGdhcmJhZ2UgY29sbGVjdGlvbiBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgaWYgKGdsb2JhbC5nYykge1xuICAgICAgZ2xvYmFsLmdjKCk7XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBvcmlnaW5hbCBNb25nb0RCIFVSSVxuICAgIG9yaWdpbmFsTW9uZ29VcmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSTtcblxuICAgIC8vIENoZWNrIGlmIG1vbmdvZCBpcyBydW5uaW5nXG4gICAgY29uc3QgaXNNb25nb2RSdW5uaW5nID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGV4ZWMoJ3BncmVwIG1vbmdvZCcsIChlcnJvcikgPT4ge1xuICAgICAgICAgIHJlc29sdmUoIWVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gSWYgbW9uZ29kIGlzIG5vdCBydW5uaW5nLCBzdGFydCBpdFxuICAgIGlmICghKGF3YWl0IGlzTW9uZ29kUnVubmluZygpKSkge1xuICAgICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIG1vbmdvZC4uLicpO1xuICAgICAgbW9uZ29kUHJvY2VzcyA9IGV4ZWMoJ21vbmdvZCAtLXBvcnQgMjcwMTcgLS1kYnBhdGggL3RtcC9tb25nb2RiX3Rlc3QgLS1sb2dwYXRoIC90bXAvbW9uZ29kX3Rlc3QubG9nIC0tZm9yaycsIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RhcnQgbW9uZ29kOicsIGVycm9yKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBXYWl0IGEgYml0IGZvciBtb25nb2QgdG8gc3RhcnRcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdtb25nb2QgaXMgYWxyZWFkeSBydW5uaW5nJyk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG4gICAgcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkkgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9jaGF0anNfdGVzdCc7XG4gICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd5b3VyX3N1cGVyX3NlY3VyZV9qd3Rfc2VjcmV0X2tleV9oZXJlX3JlcGxhY2VfaW5fcHJvZHVjdGlvbic7XG5cbiAgICAvLyBDb25uZWN0IHRvIGxvY2FsIHRlc3QgZGF0YWJhc2VcbiAgICBhd2FpdCBjb25uZWN0REIoKTtcblxuICAgIC8vIFNldHVwIHJldXNhYmxlIGZpeHR1cmVzIGZvciBmYXN0ZXIgdGVzdCBleGVjdXRpb25cbiAgICBjb25zb2xlLmxvZygnU2V0dGluZyB1cCB0ZXN0IGZpeHR1cmVzLi4uJyk7XG4gICAgYXdhaXQgVGVzdEZpeHR1cmVzLnNldHVwKCk7XG59KTtcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgICAvLyBjb25zb2xlLmxvZygnQ2xlYW5pbmcgdXAgdGVzdCBmaXh0dXJlcy4uLicpOyAvLyBEaXNhYmxlZCB0byBhdm9pZCBtb2NraW5nIGlzc3Vlc1xuICAgICBhd2FpdCBUZXN0Rml4dHVyZXMuY2xlYW51cCgpO1xuICAgICBhd2FpdCBjbG9zZURCKCk7XG5cbiAgICAgLy8gU3RvcCBtb25nb2QgaWYgd2Ugc3RhcnRlZCBpdFxuICAgICBpZiAobW9uZ29kUHJvY2Vzcykge1xuICAgICAgIGNvbnNvbGUubG9nKCdTdG9wcGluZyBtb25nb2QuLi4nKTtcbiAgICAgICBleGVjKCdwa2lsbCAtZiBtb25nb2QnKTtcbiAgICAgfVxuXG4gICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgVVJJIGlmIG5lZWRlZFxuICAgICBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSA9IG9yaWdpbmFsTW9uZ29Vcmk7XG5cbiAgICAgLy8gRmluYWwgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgICBnbG9iYWwuZ2MoKTtcbiAgICAgfVxuICB9KTtcblxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBDbGVhciBhbGwgY29sbGVjdGlvbnMgYWZ0ZXIgZWFjaCB0ZXN0IChza2lwIGlmIHNlY3VyaXR5IHRlc3QgZmlsZSBkZXRlY3RlZClcbiAgICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAxICYmIGdsb2JhbC50ZXN0RmlsZU5hbWUgIT09ICdhdXRoLXNlY3VyaXR5LnRlc3QuanMnKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IG1vbmdvb3NlLmNvbm5lY3Rpb24uY29sbGVjdGlvbnM7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb2xsZWN0aW9ucykge1xuICAgICAgICBhd2FpdCBjb2xsZWN0aW9uc1trZXldLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHRpbWVvdXRzIGFuZCBzdGFiaWxpemF0aW9uXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApOyAgLy8gMzAgc2Vjb25kIGdsb2JhbCB0aW1lb3V0XG5wcm9jZXNzLmVudi5OT0RFX1RFU1RfVElNRU9VVCA9IDI1MDAwOyAgLy8gQ3VzdG9tIGVudiBmb3IgSFRUUCB0ZXN0c1xuXG4vLyBJbmNyZWFzZSBzb2NrZXQgdGltZW91dCBmb3IgZGF0YWJhc2Ugb3BlcmF0aW9uc1xubW9uZ29vc2Uuc2V0KCdidWZmZXJDb21tYW5kcycsIGZhbHNlKTsgIC8vIERpc2FibGUgbW9uZ29vc2UgYnVmZmVyaW5nXG5tb25nb29zZS5zZXQoJ21heFRpbWVNUycsIDIwMDAwKTsgICAgICAvLyAyMCBzZWNvbmQgbGltaXQgZm9yIG9wZXJhdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxNQUFNO0VBQUVDO0FBQUssQ0FBQyxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3pDLE1BQU07RUFBRUUsU0FBUztFQUFFQztBQUFRLENBQUMsR0FBR0gsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzFELE1BQU07RUFBRUk7QUFBYSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUd6RCxJQUFJSyxnQkFBZ0I7QUFDcEIsSUFBSUMsYUFBYTtBQUVqQkMsU0FBUyxDQUFDLFlBQVk7RUFDbEI7RUFDQSxJQUFJQyxNQUFNLENBQUNDLEVBQUUsRUFBRTtJQUNiRCxNQUFNLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2I7O0VBRUE7RUFDQUosZ0JBQWdCLEdBQUdLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxXQUFXOztFQUUxQztFQUNBLE1BQU1DLGVBQWUsR0FBR0EsQ0FBQSxLQUFNO0lBQzVCLE9BQU8sSUFBSUMsT0FBTyxDQUFFQyxPQUFPLElBQUs7TUFDOUJkLElBQUksQ0FBQyxjQUFjLEVBQUdlLEtBQUssSUFBSztRQUM5QkQsT0FBTyxDQUFDLENBQUNDLEtBQUssQ0FBQztNQUNqQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSixDQUFDOztFQUVEO0VBQ0EsSUFBSSxFQUFFLE1BQU1ILGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUM5QkksT0FBTyxDQUFDQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7SUFDakNaLGFBQWEsR0FBR0wsSUFBSSxDQUFDLHNGQUFzRixFQUFHZSxLQUFLLElBQUs7TUFDdEgsSUFBSUEsS0FBSyxFQUFFO1FBQ1RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHlCQUF5QixFQUFFQSxLQUFLLENBQUM7UUFDL0MsTUFBTUEsS0FBSztNQUNiO0lBQ0YsQ0FBQyxDQUFDO0lBQ0Y7SUFDQSxNQUFNLElBQUlGLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJSSxVQUFVLENBQUNKLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUN6RCxDQUFDLE1BQU07SUFDTEUsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7RUFDMUM7O0VBRUE7RUFDQVIsT0FBTyxDQUFDQyxHQUFHLENBQUNTLFFBQVEsR0FBRyxNQUFNO0VBQzdCVixPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHLHVDQUF1QztFQUNqRUYsT0FBTyxDQUFDQyxHQUFHLENBQUNVLFVBQVUsR0FBRyw2REFBNkQ7O0VBRXRGO0VBQ0EsTUFBTW5CLFNBQVMsQ0FBQyxDQUFDOztFQUVqQjtFQUNBZSxPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQztFQUMxQyxNQUFNZCxZQUFZLENBQUNrQixLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUM7QUFFRkMsUUFBUSxDQUFDLFlBQVk7RUFDaEI7RUFDQSxNQUFNbkIsWUFBWSxDQUFDb0IsT0FBTyxDQUFDLENBQUM7RUFDNUIsTUFBTXJCLE9BQU8sQ0FBQyxDQUFDOztFQUVmO0VBQ0EsSUFBSUcsYUFBYSxFQUFFO0lBQ2pCVyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztJQUNqQ2pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztFQUN6Qjs7RUFFQTtFQUNBUyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHUCxnQkFBZ0I7O0VBRTFDO0VBQ0EsSUFBSUcsTUFBTSxDQUFDQyxFQUFFLEVBQUU7SUFDYkQsTUFBTSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNiO0FBQ0gsQ0FBQyxDQUFDO0FBRUpnQixTQUFTLENBQUMsWUFBWTtFQUNsQjtFQUNBLElBQUkxQixRQUFRLENBQUMyQixVQUFVLENBQUNDLFVBQVUsS0FBSyxDQUFDLElBQUluQixNQUFNLENBQUNvQixZQUFZLEtBQUssdUJBQXVCLEVBQUU7SUFDM0YsTUFBTUMsV0FBVyxHQUFHOUIsUUFBUSxDQUFDMkIsVUFBVSxDQUFDRyxXQUFXO0lBQ25ELEtBQUssTUFBTUMsR0FBRyxJQUFJRCxXQUFXLEVBQUU7TUFDN0IsTUFBTUEsV0FBVyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDO0VBQ0Y7QUFDRixDQUFDLENBQUM7O0FBRUo7QUFDQUMsSUFBSSxDQUFDYixVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRTtBQUN6QlQsT0FBTyxDQUFDQyxHQUFHLENBQUNzQixpQkFBaUIsR0FBRyxLQUFLLENBQUMsQ0FBRTs7QUFFeEM7QUFDQWxDLFFBQVEsQ0FBQ21DLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFFO0FBQ3hDbkMsUUFBUSxDQUFDbUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFNIiwiaWdub3JlTGlzdCI6W119