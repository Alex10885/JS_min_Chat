a4313e467321a4f3e5dc1519378a756e
const mongoose = require('mongoose');
const {
  exec
} = require('child_process');
const {
  connectDB,
  closeDB
} = require('../db/connection');
const {
  TestFixtures
} = require('./shared/testFixtures');
let originalMongoUri;
let mongodProcess;
beforeAll(async () => {
  // Enable garbage collection for performance optimization
  if (global.gc) {
    global.gc();
  }

  // Save original MongoDB URI
  originalMongoUri = process.env.MONGODB_URI;

  // Check if mongod is running
  const isMongodRunning = () => {
    return new Promise(resolve => {
      exec('pgrep mongod', error => {
        resolve(!error);
      });
    });
  };

  // If mongod is not running, start it
  if (!(await isMongodRunning())) {
    console.log('Starting mongod...');
    mongodProcess = exec('mongod --port 27017 --dbpath /tmp/mongodb_test --logpath /tmp/mongod_test.log --fork', error => {
      if (error) {
        console.error('Failed to start mongod:', error);
        throw error;
      }
    });
    // Wait a bit for mongod to start
    await new Promise(resolve => setTimeout(resolve, 2000));
  } else {
    console.log('mongod is already running');
  }

  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.MONGODB_URI = 'mongodb://localhost:27017/chatjs_test';
  process.env.JWT_SECRET = 'your_super_secure_jwt_secret_key_here_replace_in_production';

  // Connect to local test database
  await connectDB();

  // Setup reusable fixtures for faster test execution
  console.log('Setting up test fixtures...');
  await TestFixtures.setup();
});
afterAll(async () => {
  // console.log('Cleaning up test fixtures...'); // Disabled to avoid mocking issues
  await TestFixtures.cleanup();
  await closeDB();

  // Stop mongod if we started it
  if (mongodProcess) {
    console.log('Stopping mongod...');
    exec('pkill -f mongod');
  }

  // Restore original URI if needed
  process.env.MONGODB_URI = originalMongoUri;

  // Final garbage collection
  if (global.gc) {
    global.gc();
  }
});
afterEach(async () => {
  // Clear all collections after each test (skip for security tests to preserve users)
  if (mongoose.connection.readyState === 1 && !global.testFileName?.includes('security')) {
    const collections = mongoose.connection.collections;
    for (const key in collections) {
      await collections[key].deleteMany({});
    }
  }
});

// Global test timeouts and stabilization
jest.setTimeout(30000); // 30 second global timeout
process.env.NODE_TEST_TIMEOUT = 25000; // Custom env for HTTP tests

// Increase socket timeout for database operations
mongoose.set('bufferCommands', false); // Disable mongoose buffering
mongoose.set('maxTimeMS', 20000); // 20 second limit for operations
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJleGVjIiwiY29ubmVjdERCIiwiY2xvc2VEQiIsIlRlc3RGaXh0dXJlcyIsIm9yaWdpbmFsTW9uZ29VcmkiLCJtb25nb2RQcm9jZXNzIiwiYmVmb3JlQWxsIiwiZ2xvYmFsIiwiZ2MiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJpc01vbmdvZFJ1bm5pbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInNldFRpbWVvdXQiLCJOT0RFX0VOViIsIkpXVF9TRUNSRVQiLCJzZXR1cCIsImFmdGVyQWxsIiwiY2xlYW51cCIsImFmdGVyRWFjaCIsImNvbm5lY3Rpb24iLCJyZWFkeVN0YXRlIiwidGVzdEZpbGVOYW1lIiwiaW5jbHVkZXMiLCJjb2xsZWN0aW9ucyIsImtleSIsImRlbGV0ZU1hbnkiLCJqZXN0IiwiTk9ERV9URVNUX1RJTUVPVVQiLCJzZXQiXSwic291cmNlcyI6WyJzZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5jb25zdCB7IGV4ZWMgfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbmNvbnN0IHsgY29ubmVjdERCLCBjbG9zZURCIH0gPSByZXF1aXJlKCcuLi9kYi9jb25uZWN0aW9uJyk7XG5jb25zdCB7IFRlc3RGaXh0dXJlcyB9ID0gcmVxdWlyZSgnLi9zaGFyZWQvdGVzdEZpeHR1cmVzJyk7XG5cblxubGV0IG9yaWdpbmFsTW9uZ29Vcmk7XG5sZXQgbW9uZ29kUHJvY2VzcztcblxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAvLyBFbmFibGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgICBnbG9iYWwuZ2MoKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIG9yaWdpbmFsIE1vbmdvREIgVVJJXG4gICAgb3JpZ2luYWxNb25nb1VyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJO1xuXG4gICAgLy8gQ2hlY2sgaWYgbW9uZ29kIGlzIHJ1bm5pbmdcbiAgICBjb25zdCBpc01vbmdvZFJ1bm5pbmcgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgZXhlYygncGdyZXAgbW9uZ29kJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSghZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBJZiBtb25nb2QgaXMgbm90IHJ1bm5pbmcsIHN0YXJ0IGl0XG4gICAgaWYgKCEoYXdhaXQgaXNNb25nb2RSdW5uaW5nKCkpKSB7XG4gICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgbW9uZ29kLi4uJyk7XG4gICAgICBtb25nb2RQcm9jZXNzID0gZXhlYygnbW9uZ29kIC0tcG9ydCAyNzAxNyAtLWRicGF0aCAvdG1wL21vbmdvZGJfdGVzdCAtLWxvZ3BhdGggL3RtcC9tb25nb2RfdGVzdC5sb2cgLS1mb3JrJywgKGVycm9yKSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzdGFydCBtb25nb2Q6JywgZXJyb3IpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFdhaXQgYSBiaXQgZm9yIG1vbmdvZCB0byBzdGFydFxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ21vbmdvZCBpcyBhbHJlYWR5IHJ1bm5pbmcnKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgICBwcm9jZXNzLmVudi5NT05HT0RCX1VSSSA9ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L2NoYXRqc190ZXN0JztcbiAgICBwcm9jZXNzLmVudi5KV1RfU0VDUkVUID0gJ3lvdXJfc3VwZXJfc2VjdXJlX2p3dF9zZWNyZXRfa2V5X2hlcmVfcmVwbGFjZV9pbl9wcm9kdWN0aW9uJztcblxuICAgIC8vIENvbm5lY3QgdG8gbG9jYWwgdGVzdCBkYXRhYmFzZVxuICAgIGF3YWl0IGNvbm5lY3REQigpO1xuXG4gICAgLy8gU2V0dXAgcmV1c2FibGUgZml4dHVyZXMgZm9yIGZhc3RlciB0ZXN0IGV4ZWN1dGlvblxuICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIHVwIHRlc3QgZml4dHVyZXMuLi4nKTtcbiAgICBhd2FpdCBUZXN0Rml4dHVyZXMuc2V0dXAoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgIC8vIGNvbnNvbGUubG9nKCdDbGVhbmluZyB1cCB0ZXN0IGZpeHR1cmVzLi4uJyk7IC8vIERpc2FibGVkIHRvIGF2b2lkIG1vY2tpbmcgaXNzdWVzXG4gICAgIGF3YWl0IFRlc3RGaXh0dXJlcy5jbGVhbnVwKCk7XG4gICAgIGF3YWl0IGNsb3NlREIoKTtcblxuICAgICAvLyBTdG9wIG1vbmdvZCBpZiB3ZSBzdGFydGVkIGl0XG4gICAgIGlmIChtb25nb2RQcm9jZXNzKSB7XG4gICAgICAgY29uc29sZS5sb2coJ1N0b3BwaW5nIG1vbmdvZC4uLicpO1xuICAgICAgIGV4ZWMoJ3BraWxsIC1mIG1vbmdvZCcpO1xuICAgICB9XG5cbiAgICAgLy8gUmVzdG9yZSBvcmlnaW5hbCBVUkkgaWYgbmVlZGVkXG4gICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJID0gb3JpZ2luYWxNb25nb1VyaTtcblxuICAgICAvLyBGaW5hbCBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgaWYgKGdsb2JhbC5nYykge1xuICAgICAgIGdsb2JhbC5nYygpO1xuICAgICB9XG4gIH0pO1xuXG5hZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIENsZWFyIGFsbCBjb2xsZWN0aW9ucyBhZnRlciBlYWNoIHRlc3QgKHNraXAgZm9yIHNlY3VyaXR5IHRlc3RzIHRvIHByZXNlcnZlIHVzZXJzKVxuICAgIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgPT09IDEgJiYgIWdsb2JhbC50ZXN0RmlsZU5hbWU/LmluY2x1ZGVzKCdzZWN1cml0eScpKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IG1vbmdvb3NlLmNvbm5lY3Rpb24uY29sbGVjdGlvbnM7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb2xsZWN0aW9ucykge1xuICAgICAgICBhd2FpdCBjb2xsZWN0aW9uc1trZXldLmRlbGV0ZU1hbnkoe30pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHRpbWVvdXRzIGFuZCBzdGFiaWxpemF0aW9uXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApOyAgLy8gMzAgc2Vjb25kIGdsb2JhbCB0aW1lb3V0XG5wcm9jZXNzLmVudi5OT0RFX1RFU1RfVElNRU9VVCA9IDI1MDAwOyAgLy8gQ3VzdG9tIGVudiBmb3IgSFRUUCB0ZXN0c1xuXG4vLyBJbmNyZWFzZSBzb2NrZXQgdGltZW91dCBmb3IgZGF0YWJhc2Ugb3BlcmF0aW9uc1xubW9uZ29vc2Uuc2V0KCdidWZmZXJDb21tYW5kcycsIGZhbHNlKTsgIC8vIERpc2FibGUgbW9uZ29vc2UgYnVmZmVyaW5nXG5tb25nb29zZS5zZXQoJ21heFRpbWVNUycsIDIwMDAwKTsgICAgICAvLyAyMCBzZWNvbmQgbGltaXQgZm9yIG9wZXJhdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxNQUFNO0VBQUVDO0FBQUssQ0FBQyxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3pDLE1BQU07RUFBRUUsU0FBUztFQUFFQztBQUFRLENBQUMsR0FBR0gsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzFELE1BQU07RUFBRUk7QUFBYSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUd6RCxJQUFJSyxnQkFBZ0I7QUFDcEIsSUFBSUMsYUFBYTtBQUVqQkMsU0FBUyxDQUFDLFlBQVk7RUFDbEI7RUFDQSxJQUFJQyxNQUFNLENBQUNDLEVBQUUsRUFBRTtJQUNiRCxNQUFNLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2I7O0VBRUE7RUFDQUosZ0JBQWdCLEdBQUdLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxXQUFXOztFQUUxQztFQUNBLE1BQU1DLGVBQWUsR0FBR0EsQ0FBQSxLQUFNO0lBQzVCLE9BQU8sSUFBSUMsT0FBTyxDQUFFQyxPQUFPLElBQUs7TUFDOUJkLElBQUksQ0FBQyxjQUFjLEVBQUdlLEtBQUssSUFBSztRQUM5QkQsT0FBTyxDQUFDLENBQUNDLEtBQUssQ0FBQztNQUNqQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSixDQUFDOztFQUVEO0VBQ0EsSUFBSSxFQUFFLE1BQU1ILGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUM5QkksT0FBTyxDQUFDQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7SUFDakNaLGFBQWEsR0FBR0wsSUFBSSxDQUFDLHNGQUFzRixFQUFHZSxLQUFLLElBQUs7TUFDdEgsSUFBSUEsS0FBSyxFQUFFO1FBQ1RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHlCQUF5QixFQUFFQSxLQUFLLENBQUM7UUFDL0MsTUFBTUEsS0FBSztNQUNiO0lBQ0YsQ0FBQyxDQUFDO0lBQ0Y7SUFDQSxNQUFNLElBQUlGLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJSSxVQUFVLENBQUNKLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUN6RCxDQUFDLE1BQU07SUFDTEUsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7RUFDMUM7O0VBRUE7RUFDQVIsT0FBTyxDQUFDQyxHQUFHLENBQUNTLFFBQVEsR0FBRyxNQUFNO0VBQzdCVixPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHLHVDQUF1QztFQUNqRUYsT0FBTyxDQUFDQyxHQUFHLENBQUNVLFVBQVUsR0FBRyw2REFBNkQ7O0VBRXRGO0VBQ0EsTUFBTW5CLFNBQVMsQ0FBQyxDQUFDOztFQUVqQjtFQUNBZSxPQUFPLENBQUNDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQztFQUMxQyxNQUFNZCxZQUFZLENBQUNrQixLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUM7QUFFRkMsUUFBUSxDQUFDLFlBQVk7RUFDaEI7RUFDQSxNQUFNbkIsWUFBWSxDQUFDb0IsT0FBTyxDQUFDLENBQUM7RUFDNUIsTUFBTXJCLE9BQU8sQ0FBQyxDQUFDOztFQUVmO0VBQ0EsSUFBSUcsYUFBYSxFQUFFO0lBQ2pCVyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztJQUNqQ2pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztFQUN6Qjs7RUFFQTtFQUNBUyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBVyxHQUFHUCxnQkFBZ0I7O0VBRTFDO0VBQ0EsSUFBSUcsTUFBTSxDQUFDQyxFQUFFLEVBQUU7SUFDYkQsTUFBTSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNiO0FBQ0gsQ0FBQyxDQUFDO0FBRUpnQixTQUFTLENBQUMsWUFBWTtFQUNsQjtFQUNBLElBQUkxQixRQUFRLENBQUMyQixVQUFVLENBQUNDLFVBQVUsS0FBSyxDQUFDLElBQUksQ0FBQ25CLE1BQU0sQ0FBQ29CLFlBQVksRUFBRUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0lBQ3RGLE1BQU1DLFdBQVcsR0FBRy9CLFFBQVEsQ0FBQzJCLFVBQVUsQ0FBQ0ksV0FBVztJQUNuRCxLQUFLLE1BQU1DLEdBQUcsSUFBSUQsV0FBVyxFQUFFO01BQzdCLE1BQU1BLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QztFQUNGO0FBQ0YsQ0FBQyxDQUFDOztBQUVKO0FBQ0FDLElBQUksQ0FBQ2QsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUU7QUFDekJULE9BQU8sQ0FBQ0MsR0FBRyxDQUFDdUIsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLENBQUU7O0FBRXhDO0FBQ0FuQyxRQUFRLENBQUNvQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBRTtBQUN4Q3BDLFFBQVEsQ0FBQ29DLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBTSIsImlnbm9yZUxpc3QiOltdfQ==