{"version":3,"names":["cov_hs23rl6zq","actualCoverage","jwt","s","require","crypto","User","config","logger","connectDB","closeDB","AuthService","constructor","f","registerUser","userData","nickname","email","password","existingUser","findOne","$or","b","conflictField","errorMessage","Error","user","role","status","save","info","error","loginUser","identifier","captchaToken","warn","ip","isAccountLocked","lockTimeRemaining","Math","ceil","accountLockedUntil","Date","captchaRequired","isPasswordValid","comparePassword","incFailedAttempts","userId","_id","attempts","failedLoginAttempts","lockedUntil","resetFailedAttempts","generateToken","sessionId","csrfToken","token","sign","security","jwtSecret","expiresIn","generateCsrfToken","randomBytes","toString","logoutUser","findByIdAndUpdate","lastActive","getUserFromToken","decoded","verify","findById","message","validateSession","session","authenticated","enable2FA","secret","generate2FASecret","qrCodeUrl","base32","backupCodes","confirm2FA","code","twoFactorSecret","isValid","verify2FACode","success","disable2FA","twoFactorEnabled","module","exports"],"sources":["authService.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst User = require('../models/User');\nconst config = require('../config');\nconst { logger } = require('../middleware/auth');\nconst { connectDB, closeDB } = require('../../db/connection');\n\nclass AuthService {\n  constructor() {\n    this.logger = logger;\n  }\n\n  async registerUser(userData) {\n    try {\n      const { nickname, email, password } = userData;\n\n      // Check if user exists\n      const existingUser = await User.findOne({\n        $or: [{ nickname }, { email }]\n      });\n\n      if (existingUser) {\n        const conflictField = existingUser.nickname === nickname ? 'nickname' : 'email';\n        const errorMessage = conflictField === 'nickname' ? 'Nickname already taken' : 'Email already registered';\n        throw new Error(errorMessage);\n      }\n\n      // Create user\n      const user = new User({ nickname, email, password, role: 'member', status: 'online' });\n      await user.save();\n\n      this.logger.info(`User registered: ${user.nickname}`);\n      return user;\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  async loginUser(identifier, password, captchaToken = null) {\n    try {\n      // Find user by nickname or email\n      const user = await User.findOne({\n        $or: [{ nickname: identifier }, { email: identifier }]\n      });\n\n      if (!user) {\n        // Log IP-based attempt for tracking\n        this.logger.warn('Login attempt with non-existent user', { identifier, ip: 'tracked' });\n        throw new Error('Invalid credentials');\n      }\n\n      // Check if account is locked\n      if (user.isAccountLocked()) {\n        const lockTimeRemaining = Math.ceil((user.accountLockedUntil - new Date()) / 1000 / 60);\n        throw new Error(`Account temporarily locked due to multiple failed attempts. Try again in ${lockTimeRemaining} minutes.`);\n      }\n\n      // Check if CAPTCHA is required\n      if (user.captchaRequired && !captchaToken) {\n        // For now, simulate CAPTCHA by requiring a specific token\n        // In production, integrate with Google reCAPTCHA or similar\n        throw new Error('CAPTCHA verification required due to previous failed attempts.');\n      }\n\n      // Compare password\n      const isPasswordValid = await user.comparePassword(password);\n\n      if (!isPasswordValid) {\n        // Increment failed attempts\n        await user.incFailedAttempts();\n\n        // Log security event\n        this.logger.warn('Failed login attempt', {\n          userId: user._id,\n          nickname: user.nickname,\n          attempts: user.failedLoginAttempts,\n          captchaRequired: user.captchaRequired,\n          lockedUntil: user.accountLockedUntil\n        });\n\n        throw new Error('Invalid credentials');\n      }\n\n      // Successful login - reset failed attempts\n      await user.resetFailedAttempts();\n\n      // Update user status to online\n      user.status = 'online';\n      await user.save();\n\n      this.logger.info(`User logged in successfully: ${user.nickname}`);\n      return user;\n    } catch (error) {\n      this.logger.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  generateToken(user, sessionId, csrfToken) {\n    const token = jwt.sign(\n      {\n        userId: user._id,\n        nickname: user.nickname,\n        role: user.role,\n        csrfToken: csrfToken,\n        sessionId: sessionId\n      },\n      config.security.jwtSecret,\n      { expiresIn: '24h' }\n    );\n    return token;\n  }\n\n  generateCsrfToken() {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  async logoutUser(userId) {\n    try {\n      await User.findByIdAndUpdate(userId, {\n        status: 'offline',\n        lastActive: new Date()\n      });\n      this.logger.info(`User logged out: ${userId}`);\n    } catch (error) {\n      this.logger.error('Logout error:', error);\n      throw error;\n    }\n  }\n\n  async getUserFromToken(token) {\n    try {\n      const decoded = jwt.verify(token, config.security.jwtSecret);\n      const user = await User.findById(decoded.userId);\n\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.warn('Token verification failed:', error.message);\n      throw error;\n    }\n  }\n\n  async validateSession(session) {\n    try {\n      if (!session || !session.authenticated || !session.userId) {\n        return null;\n      }\n\n      const user = await User.findById(session.userId);\n      if (!user) {\n        return null;\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Session validation error:', error);\n      return null;\n    }\n  }\n\n  // Enable 2FA for user\n  async enable2FA(userId) {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      const secret = await user.generate2FASecret();\n      const qrCodeUrl = `otpauth://totp/Chat-JS(${user.nickname})?secret=${secret.base32}&issuer=Chat-JS`;\n\n      return {\n        secret: secret.base32,\n        qrCodeUrl: qrCodeUrl,\n        backupCodes: user.backupCodes\n      };\n    } catch (error) {\n      this.logger.error('Enable 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // Confirm 2FA setup\n  async confirm2FA(userId, code) {\n    try {\n      const user = await User.findById(userId);\n      if (!user || !user.twoFactorSecret) {\n        throw new Error('2FA not initialized');\n      }\n\n      const isValid = user.verify2FACode(code);\n      if (!isValid) {\n        throw new Error('Invalid 2FA code');\n      }\n\n      await user.enable2FA();\n      return { success: true, message: '2FA enabled successfully' };\n    } catch (error) {\n      this.logger.error('Confirm 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // Disable 2FA for user\n  async disable2FA(userId, password) {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Verify password before disabling\n      const isPasswordValid = await user.comparePassword(password);\n      if (!isPasswordValid) {\n        throw new Error('Invalid password');\n      }\n\n      await user.disable2FA();\n      return { success: true, message: '2FA disabled successfully' };\n    } catch (error) {\n      this.logger.error('Disable 2FA error:', error);\n      throw error;\n    }\n  }\n\n  // Verify 2FA code for login\n  async verify2FACode(userId, code) {\n    try {\n      const user = await User.findById(userId);\n      if (!user || !user.twoFactorEnabled) {\n        return { success: false, message: '2FA not enabled' };\n      }\n\n      const isValid = user.verify2FACode(code) || user.verify2FACode(code, true);\n      if (!isValid) {\n        throw new Error('Invalid 2FA code');\n      }\n\n      return { success: true, message: '2FA verified successfully' };\n    } catch (error) {\n      this.logger.error('Verify 2FA error:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = new AuthService();"],"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","ignoreList":[]}