994379ccab350fe82c24d10914b3cceb
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const userSchema = new mongoose.Schema({
  nickname: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    minlength: 3,
    maxlength: 50,
    index: true // Remove duplicate index call below
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true,
    index: true // Remove duplicate index call below
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  role: {
    type: String,
    enum: ['admin', 'moderator', 'member'],
    default: 'member'
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  lastActive: {
    type: Date,
    default: Date.now
  },
  status: {
    type: String,
    enum: ['online', 'offline'],
    default: 'offline'
  },
  // Moderation fields
  banned: {
    type: Boolean,
    default: false
  },
  banReason: {
    type: String,
    default: null
  },
  banExpires: {
    type: Date,
    default: null
  },
  warnings: [{
    reason: String,
    issuedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    issuedAt: {
      type: Date,
      default: Date.now
    },
    expires: Date
  }],
  muteExpires: {
    type: Date,
    default: null
  },
  // Security fields for brute-force protection
  failedLoginAttempts: {
    type: Number,
    default: 0
  },
  lastFailedAttempt: {
    type: Date,
    default: null
  },
  accountLockedUntil: {
    type: Date,
    default: null
  },
  captchaRequired: {
    type: Boolean,
    default: false
  },
  securityToken: {
    type: String,
    default: null
  },
  // Two-Factor Authentication (2FA/OTP) fields
  twoFactorEnabled: {
    type: Boolean,
    default: false
  },
  twoFactorSecret: {
    type: String,
    default: null
  },
  backupCodes: [{
    type: String,
    default: []
  }],
  twoFactorMethod: {
    type: String,
    enum: ['TOTP', 'SMS', 'EMAIL'],
    default: 'TOTP'
  },
  last2FACode: {
    type: String,
    default: null
  },
  last2FACodeExpiry: {
    type: Date,
    default: null
  },
  // Temporary tokens
  resetPasswordToken: {
    type: String,
    default: null
  },
  resetPasswordExpires: {
    type: Date,
    default: null
  },
  moderationToken: {
    type: String,
    default: null
  },
  moderationTokenExpires: {
    type: Date,
    default: null
  }
});

// Hash password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  console.log('Hashing password for user:', this.nickname);
  try {
    const salt = await bcrypt.genSalt(12);
    console.log('Salt generated:', salt);
    this.password = await bcrypt.hash(this.password, salt);
    console.log('Password hashed successfully');
    next();
  } catch (error) {
    console.error('Error hashing password:', error.message);
    next(error);
  }
});

// Compare password method
userSchema.methods.comparePassword = async function (candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

// Generate reset password token
userSchema.methods.generateResetToken = function () {
  // Generate random token
  const resetToken = crypto.randomBytes(32).toString('hex');

  // Hash token before storing
  this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex');

  // Set expiration (1 hour from now)
  this.resetPasswordExpires = Date.now() + 60 * 60 * 1000; // 1 hour

  return resetToken;
};

// Reset password using token
userSchema.methods.resetPassword = function (token, newPassword) {
  const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
  if (hashedToken !== this.resetPasswordToken) {
    throw new Error('Invalid or expired password reset token');
  }
  if (Date.now() > this.resetPasswordExpires) {
    throw new Error('Password reset token has expired');
  }
  this.password = newPassword;
  this.resetPasswordToken = null;
  this.resetPasswordExpires = null;
  return this.save();
};

// Ban user
userSchema.methods.ban = function (reason, duration = null, issuedBy = null) {
  this.banned = true;
  this.banReason = reason;
  if (duration) {
    this.banExpires = new Date(Date.now() + duration);
  } else {
    this.banExpires = null; // permanent ban
  }
  return this.save();
};

// Unban user
userSchema.methods.unban = function () {
  this.banned = false;
  this.banReason = null;
  this.banExpires = null;
  return this.save();
};

// Check if user is banned and if ban is active
userSchema.methods.isBanned = function () {
  if (!this.banned) return false;
  if (!this.banExpires) return true; // permanent ban
  return this.banExpires > new Date(); // temporary ban still active
};

// Add warning to user
userSchema.methods.warn = function (reason, issuedBy, duration = null) {
  const warning = {
    reason: reason,
    issuedBy: issuedBy,
    issuedAt: new Date(),
    expires: duration ? new Date(Date.now() + duration) : null
  };
  this.warnings.push(warning);
  return this.save();
};

// Remove expired warnings
userSchema.methods.cleanWarnings = function () {
  this.warnings = this.warnings.filter(warning => {
    return !warning.expires || warning.expires > new Date();
  });
  return this.save();
};

// Get active warnings count
userSchema.methods.getActiveWarningsCount = function () {
  this.cleanWarnings();
  return this.warnings.length;
};

// Mute user (for chat)
userSchema.methods.mute = function (duration = 3600000) {
  // default 1 hour
  this.muteExpires = new Date(Date.now() + duration);
  return this.save();
};

// Unmute user
userSchema.methods.unmute = function () {
  this.muteExpires = null;
  return this.save();
};

// Check if user is muted
userSchema.methods.isMuted = function () {
  return this.muteExpires && this.muteExpires > new Date();
};

// Generate moderation token for admin actions
userSchema.methods.generateModerationToken = function () {
  const moderationToken = crypto.randomBytes(32).toString('hex');
  this.moderationToken = crypto.createHash('sha256').update(moderationToken).digest('hex');
  this.moderationTokenExpires = Date.now() + 3600000; // 1 hour
  return this.save().then(() => moderationToken);
};

// Verify moderation token
userSchema.methods.verifyModerationToken = function (token) {
  const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
  if (hashedToken !== this.moderationToken) {
    throw new Error('Invalid moderation token');
  }
  if (Date.now() > this.moderationTokenExpires) {
    throw new Error('Moderation token expired');
  }
  this.moderationToken = null;
  this.moderationTokenExpires = null;
  return this.save();
};

// Check if user has moderator/admin permissions
userSchema.methods.hasModeratorPrivileges = function () {
  return this.role === 'admin' || this.role === 'moderator';
};
userSchema.methods.hasAdminPrivileges = function () {
  return this.role === 'admin';
};

// Check if account is locked
userSchema.methods.isAccountLocked = function () {
  if (!this.accountLockedUntil) return false;
  return this.accountLockedUntil > new Date();
};

// Increment failed login attempts
userSchema.methods.incFailedAttempts = function () {
  this.failedLoginAttempts += 1;
  this.lastFailedAttempt = new Date();

  // Lock account after 3 failed attempts
  if (this.failedLoginAttempts >= 3) {
    this.accountLockedUntil = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes lock
    this.captchaRequired = true; // Require CAPTCHA when unlocked
  }

  // Require CAPTCHA after 2 failed attempts
  if (this.failedLoginAttempts >= 2) {
    this.captchaRequired = true;
  }
  return this.save();
};

// Reset failed login attempts (on successful login)
userSchema.methods.resetFailedAttempts = function () {
  this.failedLoginAttempts = 0;
  this.accountLockedUntil = null;
  this.captchaRequired = false;
  return this.save();
};

// Generate security token for CAPTCHA verification
userSchema.methods.generateSecurityToken = function () {
  this.securityToken = crypto.randomBytes(32).toString('hex');
  return this.save().then(() => this.securityToken);
};

// Clear security token
userSchema.methods.clearSecurityToken = function () {
  this.securityToken = null;
  return this.save();
};

// Generate 2FA secret (base32 encoded)
userSchema.methods.generate2FASecret = function () {
  const speakeasy = require('speakeasy');
  const secret = speakeasy.generateSecret({
    name: `Chat-JS (${this.nickname})`,
    issuer: 'Chat-JS'
  });
  this.twoFactorSecret = secret.base32;
  return this.save().then(() => secret);
};

// Enable 2FA
userSchema.methods.enable2FA = function (method = 'TOTP') {
  if (!this.twoFactorSecret) {
    throw new Error('2FA secret not generated');
  }
  this.twoFactorEnabled = true;
  this.twoFactorMethod = method;

  // Generate backup codes (10 codes)
  this.backupCodes = [];
  for (let i = 0; i < 10; i++) {
    const code = crypto.randomBytes(4).toString('hex').toUpperCase();
    this.backupCodes.push(code);
  }
  return this.save();
};

// Disable 2FA
userSchema.methods.disable2FA = function () {
  this.twoFactorEnabled = false;
  this.twoFactorSecret = null;
  this.backupCodes = [];
  return this.save();
};

// Verify 2FA code
userSchema.methods.verify2FACode = function (code, useBackup = false) {
  if (!this.twoFactorEnabled || !this.twoFactorSecret) {
    return false;
  }

  // Check if using backup code
  if (useBackup && this.backupCodes.includes(code)) {
    // Remove used backup code
    this.backupCodes = this.backupCodes.filter(bc => bc !== code);
    return this.save().then(() => true);
  }
  if (useBackup) return false;

  // Verify TOTP
  const speakeasy = require('speakeasy');
  return speakeasy.totp.verify({
    secret: this.twoFactorSecret,
    encoding: 'base32',
    token: code,
    window: 2 // Allow time window for clock skew
  });
};

// Remove password and sensitive data from JSON output
userSchema.methods.toJSON = function () {
  const userObject = this.toObject();
  delete userObject.password;
  delete userObject.resetPasswordToken;
  delete userObject.resetPasswordExpires;
  delete userObject.moderationToken;
  delete userObject.moderationTokenExpires;
  delete userObject.securityToken;
  // Don't show ban details to regular users
  if (!this.hasModeratorPrivileges()) {
    delete userObject.banReason;
    delete userObject.banExpires;
    delete userObject.warnings;
    delete userObject.failedLoginAttempts;
    delete userObject.lastFailedAttempt;
    delete userObject.accountLockedUntil;
  }
  return userObject;
};
module.exports = mongoose.model('User', userSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJiY3J5cHQiLCJjcnlwdG8iLCJ1c2VyU2NoZW1hIiwiU2NoZW1hIiwibmlja25hbWUiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJ1bmlxdWUiLCJ0cmltIiwibWlubGVuZ3RoIiwibWF4bGVuZ3RoIiwiaW5kZXgiLCJlbWFpbCIsImxvd2VyY2FzZSIsInBhc3N3b3JkIiwicm9sZSIsImVudW0iLCJkZWZhdWx0IiwiY3JlYXRlZEF0IiwiRGF0ZSIsIm5vdyIsImxhc3RBY3RpdmUiLCJzdGF0dXMiLCJiYW5uZWQiLCJCb29sZWFuIiwiYmFuUmVhc29uIiwiYmFuRXhwaXJlcyIsIndhcm5pbmdzIiwicmVhc29uIiwiaXNzdWVkQnkiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiaXNzdWVkQXQiLCJleHBpcmVzIiwibXV0ZUV4cGlyZXMiLCJmYWlsZWRMb2dpbkF0dGVtcHRzIiwiTnVtYmVyIiwibGFzdEZhaWxlZEF0dGVtcHQiLCJhY2NvdW50TG9ja2VkVW50aWwiLCJjYXB0Y2hhUmVxdWlyZWQiLCJzZWN1cml0eVRva2VuIiwidHdvRmFjdG9yRW5hYmxlZCIsInR3b0ZhY3RvclNlY3JldCIsImJhY2t1cENvZGVzIiwidHdvRmFjdG9yTWV0aG9kIiwibGFzdDJGQUNvZGUiLCJsYXN0MkZBQ29kZUV4cGlyeSIsInJlc2V0UGFzc3dvcmRUb2tlbiIsInJlc2V0UGFzc3dvcmRFeHBpcmVzIiwibW9kZXJhdGlvblRva2VuIiwibW9kZXJhdGlvblRva2VuRXhwaXJlcyIsInByZSIsIm5leHQiLCJpc01vZGlmaWVkIiwiY29uc29sZSIsImxvZyIsInNhbHQiLCJnZW5TYWx0IiwiaGFzaCIsImVycm9yIiwibWVzc2FnZSIsIm1ldGhvZHMiLCJjb21wYXJlUGFzc3dvcmQiLCJjYW5kaWRhdGVQYXNzd29yZCIsImNvbXBhcmUiLCJnZW5lcmF0ZVJlc2V0VG9rZW4iLCJyZXNldFRva2VuIiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJyZXNldFBhc3N3b3JkIiwidG9rZW4iLCJuZXdQYXNzd29yZCIsImhhc2hlZFRva2VuIiwiRXJyb3IiLCJzYXZlIiwiYmFuIiwiZHVyYXRpb24iLCJ1bmJhbiIsImlzQmFubmVkIiwid2FybiIsIndhcm5pbmciLCJwdXNoIiwiY2xlYW5XYXJuaW5ncyIsImZpbHRlciIsImdldEFjdGl2ZVdhcm5pbmdzQ291bnQiLCJsZW5ndGgiLCJtdXRlIiwidW5tdXRlIiwiaXNNdXRlZCIsImdlbmVyYXRlTW9kZXJhdGlvblRva2VuIiwidGhlbiIsInZlcmlmeU1vZGVyYXRpb25Ub2tlbiIsImhhc01vZGVyYXRvclByaXZpbGVnZXMiLCJoYXNBZG1pblByaXZpbGVnZXMiLCJpc0FjY291bnRMb2NrZWQiLCJpbmNGYWlsZWRBdHRlbXB0cyIsInJlc2V0RmFpbGVkQXR0ZW1wdHMiLCJnZW5lcmF0ZVNlY3VyaXR5VG9rZW4iLCJjbGVhclNlY3VyaXR5VG9rZW4iLCJnZW5lcmF0ZTJGQVNlY3JldCIsInNwZWFrZWFzeSIsInNlY3JldCIsImdlbmVyYXRlU2VjcmV0IiwibmFtZSIsImlzc3VlciIsImJhc2UzMiIsImVuYWJsZTJGQSIsIm1ldGhvZCIsImkiLCJjb2RlIiwidG9VcHBlckNhc2UiLCJkaXNhYmxlMkZBIiwidmVyaWZ5MkZBQ29kZSIsInVzZUJhY2t1cCIsImluY2x1ZGVzIiwiYmMiLCJ0b3RwIiwidmVyaWZ5IiwiZW5jb2RpbmciLCJ3aW5kb3ciLCJ0b0pTT04iLCJ1c2VyT2JqZWN0IiwidG9PYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZWwiXSwic291cmNlcyI6WyJVc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbmNvbnN0IGJjcnlwdCA9IHJlcXVpcmUoJ2JjcnlwdGpzJyk7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuY29uc3QgdXNlclNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICBuaWNrbmFtZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB1bmlxdWU6IHRydWUsXG4gICAgdHJpbTogdHJ1ZSxcbiAgICBtaW5sZW5ndGg6IDMsXG4gICAgbWF4bGVuZ3RoOiA1MCxcbiAgICBpbmRleDogdHJ1ZSAvLyBSZW1vdmUgZHVwbGljYXRlIGluZGV4IGNhbGwgYmVsb3dcbiAgfSxcbiAgZW1haWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdW5pcXVlOiB0cnVlLFxuICAgIGxvd2VyY2FzZTogdHJ1ZSxcbiAgICB0cmltOiB0cnVlLFxuICAgIGluZGV4OiB0cnVlIC8vIFJlbW92ZSBkdXBsaWNhdGUgaW5kZXggY2FsbCBiZWxvd1xuICB9LFxuICBwYXNzd29yZDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICBtaW5sZW5ndGg6IDZcbiAgfSxcbiAgcm9sZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBlbnVtOiBbJ2FkbWluJywgJ21vZGVyYXRvcicsICdtZW1iZXInXSxcbiAgICBkZWZhdWx0OiAnbWVtYmVyJ1xuICB9LFxuICBjcmVhdGVkQXQ6IHtcbiAgICB0eXBlOiBEYXRlLFxuICAgIGRlZmF1bHQ6IERhdGUubm93XG4gIH0sXG4gIGxhc3RBY3RpdmU6IHtcbiAgICB0eXBlOiBEYXRlLFxuICAgIGRlZmF1bHQ6IERhdGUubm93XG4gIH0sXG4gIHN0YXR1czoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBlbnVtOiBbJ29ubGluZScsICdvZmZsaW5lJ10sXG4gICAgZGVmYXVsdDogJ29mZmxpbmUnXG4gIH0sXG4gIC8vIE1vZGVyYXRpb24gZmllbGRzXG4gIGJhbm5lZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgYmFuUmVhc29uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgYmFuRXhwaXJlczoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICB3YXJuaW5nczogW3tcbiAgICByZWFzb246IFN0cmluZyxcbiAgICBpc3N1ZWRCeTogeyB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ1VzZXInIH0sXG4gICAgaXNzdWVkQXQ6IHsgdHlwZTogRGF0ZSwgZGVmYXVsdDogRGF0ZS5ub3cgfSxcbiAgICBleHBpcmVzOiBEYXRlXG4gIH1dLFxuICBtdXRlRXhwaXJlczoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICAvLyBTZWN1cml0eSBmaWVsZHMgZm9yIGJydXRlLWZvcmNlIHByb3RlY3Rpb25cbiAgZmFpbGVkTG9naW5BdHRlbXB0czoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGxhc3RGYWlsZWRBdHRlbXB0OiB7XG4gICAgdHlwZTogRGF0ZSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGFjY291bnRMb2NrZWRVbnRpbDoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBjYXB0Y2hhUmVxdWlyZWQ6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIHNlY3VyaXR5VG9rZW46IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICAvLyBUd28tRmFjdG9yIEF1dGhlbnRpY2F0aW9uICgyRkEvT1RQKSBmaWVsZHNcbiAgdHdvRmFjdG9yRW5hYmxlZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgdHdvRmFjdG9yU2VjcmV0OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgYmFja3VwQ29kZXM6IFt7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFtdXG4gIH1dLFxuICB0d29GYWN0b3JNZXRob2Q6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWydUT1RQJywgJ1NNUycsICdFTUFJTCddLFxuICAgIGRlZmF1bHQ6ICdUT1RQJ1xuICB9LFxuICBsYXN0MkZBQ29kZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGxhc3QyRkFDb2RlRXhwaXJ5OiB7XG4gICAgdHlwZTogRGF0ZSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIC8vIFRlbXBvcmFyeSB0b2tlbnNcbiAgcmVzZXRQYXNzd29yZFRva2VuOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgcmVzZXRQYXNzd29yZEV4cGlyZXM6IHtcbiAgICB0eXBlOiBEYXRlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgbW9kZXJhdGlvblRva2VuOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgbW9kZXJhdGlvblRva2VuRXhwaXJlczoge1xuICAgIHR5cGU6IERhdGUsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9XG59KTtcblxuLy8gSGFzaCBwYXNzd29yZCBiZWZvcmUgc2F2aW5nXG51c2VyU2NoZW1hLnByZSgnc2F2ZScsIGFzeW5jIGZ1bmN0aW9uKG5leHQpIHtcbiAgIGlmICghdGhpcy5pc01vZGlmaWVkKCdwYXNzd29yZCcpKSByZXR1cm4gbmV4dCgpO1xuXG4gICBjb25zb2xlLmxvZygnSGFzaGluZyBwYXNzd29yZCBmb3IgdXNlcjonLCB0aGlzLm5pY2tuYW1lKTtcbiAgIHRyeSB7XG4gICAgIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgxMik7XG4gICAgIGNvbnNvbGUubG9nKCdTYWx0IGdlbmVyYXRlZDonLCBzYWx0KTtcbiAgICAgdGhpcy5wYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHRoaXMucGFzc3dvcmQsIHNhbHQpO1xuICAgICBjb25zb2xlLmxvZygnUGFzc3dvcmQgaGFzaGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICBuZXh0KCk7XG4gICB9IGNhdGNoIChlcnJvcikge1xuICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBoYXNoaW5nIHBhc3N3b3JkOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICBuZXh0KGVycm9yKTtcbiAgIH1cbiB9KTtcblxuLy8gQ29tcGFyZSBwYXNzd29yZCBtZXRob2RcbnVzZXJTY2hlbWEubWV0aG9kcy5jb21wYXJlUGFzc3dvcmQgPSBhc3luYyBmdW5jdGlvbihjYW5kaWRhdGVQYXNzd29yZCkge1xuICByZXR1cm4gYmNyeXB0LmNvbXBhcmUoY2FuZGlkYXRlUGFzc3dvcmQsIHRoaXMucGFzc3dvcmQpO1xufTtcblxuLy8gR2VuZXJhdGUgcmVzZXQgcGFzc3dvcmQgdG9rZW5cbnVzZXJTY2hlbWEubWV0aG9kcy5nZW5lcmF0ZVJlc2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgLy8gR2VuZXJhdGUgcmFuZG9tIHRva2VuXG4gIGNvbnN0IHJlc2V0VG9rZW4gPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKCdoZXgnKTtcblxuICAvLyBIYXNoIHRva2VuIGJlZm9yZSBzdG9yaW5nXG4gIHRoaXMucmVzZXRQYXNzd29yZFRva2VuID0gY3J5cHRvXG4gICAgLmNyZWF0ZUhhc2goJ3NoYTI1NicpXG4gICAgLnVwZGF0ZShyZXNldFRva2VuKVxuICAgIC5kaWdlc3QoJ2hleCcpO1xuXG4gIC8vIFNldCBleHBpcmF0aW9uICgxIGhvdXIgZnJvbSBub3cpXG4gIHRoaXMucmVzZXRQYXNzd29yZEV4cGlyZXMgPSBEYXRlLm5vdygpICsgNjAgKiA2MCAqIDEwMDA7IC8vIDEgaG91clxuXG4gIHJldHVybiByZXNldFRva2VuO1xufTtcblxuLy8gUmVzZXQgcGFzc3dvcmQgdXNpbmcgdG9rZW5cbnVzZXJTY2hlbWEubWV0aG9kcy5yZXNldFBhc3N3b3JkID0gZnVuY3Rpb24odG9rZW4sIG5ld1Bhc3N3b3JkKSB7XG4gIGNvbnN0IGhhc2hlZFRva2VuID0gY3J5cHRvXG4gICAgLmNyZWF0ZUhhc2goJ3NoYTI1NicpXG4gICAgLnVwZGF0ZSh0b2tlbilcbiAgICAuZGlnZXN0KCdoZXgnKTtcblxuICBpZiAoaGFzaGVkVG9rZW4gIT09IHRoaXMucmVzZXRQYXNzd29yZFRva2VuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9yIGV4cGlyZWQgcGFzc3dvcmQgcmVzZXQgdG9rZW4nKTtcbiAgfVxuXG4gIGlmIChEYXRlLm5vdygpID4gdGhpcy5yZXNldFBhc3N3b3JkRXhwaXJlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFzc3dvcmQgcmVzZXQgdG9rZW4gaGFzIGV4cGlyZWQnKTtcbiAgfVxuXG4gIHRoaXMucGFzc3dvcmQgPSBuZXdQYXNzd29yZDtcbiAgdGhpcy5yZXNldFBhc3N3b3JkVG9rZW4gPSBudWxsO1xuICB0aGlzLnJlc2V0UGFzc3dvcmRFeHBpcmVzID0gbnVsbDtcblxuICByZXR1cm4gdGhpcy5zYXZlKCk7XG59O1xuXG4vLyBCYW4gdXNlclxudXNlclNjaGVtYS5tZXRob2RzLmJhbiA9IGZ1bmN0aW9uKHJlYXNvbiwgZHVyYXRpb24gPSBudWxsLCBpc3N1ZWRCeSA9IG51bGwpIHtcbiAgdGhpcy5iYW5uZWQgPSB0cnVlO1xuICB0aGlzLmJhblJlYXNvbiA9IHJlYXNvbjtcbiAgaWYgKGR1cmF0aW9uKSB7XG4gICAgdGhpcy5iYW5FeHBpcmVzID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmJhbkV4cGlyZXMgPSBudWxsOyAvLyBwZXJtYW5lbnQgYmFuXG4gIH1cbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gVW5iYW4gdXNlclxudXNlclNjaGVtYS5tZXRob2RzLnVuYmFuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYmFubmVkID0gZmFsc2U7XG4gIHRoaXMuYmFuUmVhc29uID0gbnVsbDtcbiAgdGhpcy5iYW5FeHBpcmVzID0gbnVsbDtcbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gQ2hlY2sgaWYgdXNlciBpcyBiYW5uZWQgYW5kIGlmIGJhbiBpcyBhY3RpdmVcbnVzZXJTY2hlbWEubWV0aG9kcy5pc0Jhbm5lZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuYmFubmVkKSByZXR1cm4gZmFsc2U7XG4gIGlmICghdGhpcy5iYW5FeHBpcmVzKSByZXR1cm4gdHJ1ZTsgLy8gcGVybWFuZW50IGJhblxuICByZXR1cm4gdGhpcy5iYW5FeHBpcmVzID4gbmV3IERhdGUoKTsgLy8gdGVtcG9yYXJ5IGJhbiBzdGlsbCBhY3RpdmVcbn07XG5cbi8vIEFkZCB3YXJuaW5nIHRvIHVzZXJcbnVzZXJTY2hlbWEubWV0aG9kcy53YXJuID0gZnVuY3Rpb24ocmVhc29uLCBpc3N1ZWRCeSwgZHVyYXRpb24gPSBudWxsKSB7XG4gIGNvbnN0IHdhcm5pbmcgPSB7XG4gICAgcmVhc29uOiByZWFzb24sXG4gICAgaXNzdWVkQnk6IGlzc3VlZEJ5LFxuICAgIGlzc3VlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIGV4cGlyZXM6IGR1cmF0aW9uID8gbmV3IERhdGUoRGF0ZS5ub3coKSArIGR1cmF0aW9uKSA6IG51bGxcbiAgfTtcbiAgdGhpcy53YXJuaW5ncy5wdXNoKHdhcm5pbmcpO1xuICByZXR1cm4gdGhpcy5zYXZlKCk7XG59O1xuXG4vLyBSZW1vdmUgZXhwaXJlZCB3YXJuaW5nc1xudXNlclNjaGVtYS5tZXRob2RzLmNsZWFuV2FybmluZ3MgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy53YXJuaW5ncyA9IHRoaXMud2FybmluZ3MuZmlsdGVyKHdhcm5pbmcgPT4ge1xuICAgIHJldHVybiAhd2FybmluZy5leHBpcmVzIHx8IHdhcm5pbmcuZXhwaXJlcyA+IG5ldyBEYXRlKCk7XG4gIH0pO1xuICByZXR1cm4gdGhpcy5zYXZlKCk7XG59O1xuXG4vLyBHZXQgYWN0aXZlIHdhcm5pbmdzIGNvdW50XG51c2VyU2NoZW1hLm1ldGhvZHMuZ2V0QWN0aXZlV2FybmluZ3NDb3VudCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNsZWFuV2FybmluZ3MoKTtcbiAgcmV0dXJuIHRoaXMud2FybmluZ3MubGVuZ3RoO1xufTtcblxuLy8gTXV0ZSB1c2VyIChmb3IgY2hhdClcbnVzZXJTY2hlbWEubWV0aG9kcy5tdXRlID0gZnVuY3Rpb24oZHVyYXRpb24gPSAzNjAwMDAwKSB7IC8vIGRlZmF1bHQgMSBob3VyXG4gIHRoaXMubXV0ZUV4cGlyZXMgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgZHVyYXRpb24pO1xuICByZXR1cm4gdGhpcy5zYXZlKCk7XG59O1xuXG4vLyBVbm11dGUgdXNlclxudXNlclNjaGVtYS5tZXRob2RzLnVubXV0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm11dGVFeHBpcmVzID0gbnVsbDtcbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gQ2hlY2sgaWYgdXNlciBpcyBtdXRlZFxudXNlclNjaGVtYS5tZXRob2RzLmlzTXV0ZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubXV0ZUV4cGlyZXMgJiYgdGhpcy5tdXRlRXhwaXJlcyA+IG5ldyBEYXRlKCk7XG59O1xuXG4vLyBHZW5lcmF0ZSBtb2RlcmF0aW9uIHRva2VuIGZvciBhZG1pbiBhY3Rpb25zXG51c2VyU2NoZW1hLm1ldGhvZHMuZ2VuZXJhdGVNb2RlcmF0aW9uVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgbW9kZXJhdGlvblRva2VuID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDMyKS50b1N0cmluZygnaGV4Jyk7XG4gIHRoaXMubW9kZXJhdGlvblRva2VuID0gY3J5cHRvXG4gICAgLmNyZWF0ZUhhc2goJ3NoYTI1NicpXG4gICAgLnVwZGF0ZShtb2RlcmF0aW9uVG9rZW4pXG4gICAgLmRpZ2VzdCgnaGV4Jyk7XG4gIHRoaXMubW9kZXJhdGlvblRva2VuRXhwaXJlcyA9IERhdGUubm93KCkgKyAzNjAwMDAwOyAvLyAxIGhvdXJcbiAgcmV0dXJuIHRoaXMuc2F2ZSgpLnRoZW4oKCkgPT4gbW9kZXJhdGlvblRva2VuKTtcbn07XG5cbi8vIFZlcmlmeSBtb2RlcmF0aW9uIHRva2VuXG51c2VyU2NoZW1hLm1ldGhvZHMudmVyaWZ5TW9kZXJhdGlvblRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgY29uc3QgaGFzaGVkVG9rZW4gPSBjcnlwdG9cbiAgICAuY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAudXBkYXRlKHRva2VuKVxuICAgIC5kaWdlc3QoJ2hleCcpO1xuXG4gIGlmIChoYXNoZWRUb2tlbiAhPT0gdGhpcy5tb2RlcmF0aW9uVG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZXJhdGlvbiB0b2tlbicpO1xuICB9XG5cbiAgaWYgKERhdGUubm93KCkgPiB0aGlzLm1vZGVyYXRpb25Ub2tlbkV4cGlyZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVyYXRpb24gdG9rZW4gZXhwaXJlZCcpO1xuICB9XG5cbiAgdGhpcy5tb2RlcmF0aW9uVG9rZW4gPSBudWxsO1xuICB0aGlzLm1vZGVyYXRpb25Ub2tlbkV4cGlyZXMgPSBudWxsO1xuICByZXR1cm4gdGhpcy5zYXZlKCk7XG59O1xuXG4vLyBDaGVjayBpZiB1c2VyIGhhcyBtb2RlcmF0b3IvYWRtaW4gcGVybWlzc2lvbnNcbnVzZXJTY2hlbWEubWV0aG9kcy5oYXNNb2RlcmF0b3JQcml2aWxlZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnJvbGUgPT09ICdhZG1pbicgfHwgdGhpcy5yb2xlID09PSAnbW9kZXJhdG9yJztcbn07XG5cbnVzZXJTY2hlbWEubWV0aG9kcy5oYXNBZG1pblByaXZpbGVnZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucm9sZSA9PT0gJ2FkbWluJztcbn07XG5cbi8vIENoZWNrIGlmIGFjY291bnQgaXMgbG9ja2VkXG51c2VyU2NoZW1hLm1ldGhvZHMuaXNBY2NvdW50TG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5hY2NvdW50TG9ja2VkVW50aWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRoaXMuYWNjb3VudExvY2tlZFVudGlsID4gbmV3IERhdGUoKTtcbn07XG5cbi8vIEluY3JlbWVudCBmYWlsZWQgbG9naW4gYXR0ZW1wdHNcbnVzZXJTY2hlbWEubWV0aG9kcy5pbmNGYWlsZWRBdHRlbXB0cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmZhaWxlZExvZ2luQXR0ZW1wdHMgKz0gMTtcbiAgdGhpcy5sYXN0RmFpbGVkQXR0ZW1wdCA9IG5ldyBEYXRlKCk7XG5cbiAgLy8gTG9jayBhY2NvdW50IGFmdGVyIDMgZmFpbGVkIGF0dGVtcHRzXG4gIGlmICh0aGlzLmZhaWxlZExvZ2luQXR0ZW1wdHMgPj0gMykge1xuICAgIHRoaXMuYWNjb3VudExvY2tlZFVudGlsID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDEwICogNjAgKiAxMDAwKTsgLy8gMTAgbWludXRlcyBsb2NrXG4gICAgdGhpcy5jYXB0Y2hhUmVxdWlyZWQgPSB0cnVlOyAvLyBSZXF1aXJlIENBUFRDSEEgd2hlbiB1bmxvY2tlZFxuICB9XG5cbiAgLy8gUmVxdWlyZSBDQVBUQ0hBIGFmdGVyIDIgZmFpbGVkIGF0dGVtcHRzXG4gIGlmICh0aGlzLmZhaWxlZExvZ2luQXR0ZW1wdHMgPj0gMikge1xuICAgIHRoaXMuY2FwdGNoYVJlcXVpcmVkID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnNhdmUoKTtcbn07XG5cbi8vIFJlc2V0IGZhaWxlZCBsb2dpbiBhdHRlbXB0cyAob24gc3VjY2Vzc2Z1bCBsb2dpbilcbnVzZXJTY2hlbWEubWV0aG9kcy5yZXNldEZhaWxlZEF0dGVtcHRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZmFpbGVkTG9naW5BdHRlbXB0cyA9IDA7XG4gIHRoaXMuYWNjb3VudExvY2tlZFVudGlsID0gbnVsbDtcbiAgdGhpcy5jYXB0Y2hhUmVxdWlyZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gR2VuZXJhdGUgc2VjdXJpdHkgdG9rZW4gZm9yIENBUFRDSEEgdmVyaWZpY2F0aW9uXG51c2VyU2NoZW1hLm1ldGhvZHMuZ2VuZXJhdGVTZWN1cml0eVRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2VjdXJpdHlUb2tlbiA9IGNyeXB0by5yYW5kb21CeXRlcygzMikudG9TdHJpbmcoJ2hleCcpO1xuICByZXR1cm4gdGhpcy5zYXZlKCkudGhlbigoKSA9PiB0aGlzLnNlY3VyaXR5VG9rZW4pO1xufTtcblxuLy8gQ2xlYXIgc2VjdXJpdHkgdG9rZW5cbnVzZXJTY2hlbWEubWV0aG9kcy5jbGVhclNlY3VyaXR5VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZWN1cml0eVRva2VuID0gbnVsbDtcbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gR2VuZXJhdGUgMkZBIHNlY3JldCAoYmFzZTMyIGVuY29kZWQpXG51c2VyU2NoZW1hLm1ldGhvZHMuZ2VuZXJhdGUyRkFTZWNyZXQgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc3BlYWtlYXN5ID0gcmVxdWlyZSgnc3BlYWtlYXN5Jyk7XG4gIGNvbnN0IHNlY3JldCA9IHNwZWFrZWFzeS5nZW5lcmF0ZVNlY3JldCh7XG4gICAgbmFtZTogYENoYXQtSlMgKCR7dGhpcy5uaWNrbmFtZX0pYCxcbiAgICBpc3N1ZXI6ICdDaGF0LUpTJ1xuICB9KTtcbiAgdGhpcy50d29GYWN0b3JTZWNyZXQgPSBzZWNyZXQuYmFzZTMyO1xuICByZXR1cm4gdGhpcy5zYXZlKCkudGhlbigoKSA9PiBzZWNyZXQpO1xufTtcblxuLy8gRW5hYmxlIDJGQVxudXNlclNjaGVtYS5tZXRob2RzLmVuYWJsZTJGQSA9IGZ1bmN0aW9uKG1ldGhvZCA9ICdUT1RQJykge1xuICBpZiAoIXRoaXMudHdvRmFjdG9yU2VjcmV0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCcyRkEgc2VjcmV0IG5vdCBnZW5lcmF0ZWQnKTtcbiAgfVxuICB0aGlzLnR3b0ZhY3RvckVuYWJsZWQgPSB0cnVlO1xuICB0aGlzLnR3b0ZhY3Rvck1ldGhvZCA9IG1ldGhvZDtcblxuICAvLyBHZW5lcmF0ZSBiYWNrdXAgY29kZXMgKDEwIGNvZGVzKVxuICB0aGlzLmJhY2t1cENvZGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGNvbnN0IGNvZGUgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoNCkudG9TdHJpbmcoJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG4gICAgdGhpcy5iYWNrdXBDb2Rlcy5wdXNoKGNvZGUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gRGlzYWJsZSAyRkFcbnVzZXJTY2hlbWEubWV0aG9kcy5kaXNhYmxlMkZBID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudHdvRmFjdG9yRW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLnR3b0ZhY3RvclNlY3JldCA9IG51bGw7XG4gIHRoaXMuYmFja3VwQ29kZXMgPSBbXTtcbiAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xufTtcblxuLy8gVmVyaWZ5IDJGQSBjb2RlXG51c2VyU2NoZW1hLm1ldGhvZHMudmVyaWZ5MkZBQ29kZSA9IGZ1bmN0aW9uKGNvZGUsIHVzZUJhY2t1cCA9IGZhbHNlKSB7XG4gIGlmICghdGhpcy50d29GYWN0b3JFbmFibGVkIHx8ICF0aGlzLnR3b0ZhY3RvclNlY3JldCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHVzaW5nIGJhY2t1cCBjb2RlXG4gIGlmICh1c2VCYWNrdXAgJiYgdGhpcy5iYWNrdXBDb2Rlcy5pbmNsdWRlcyhjb2RlKSkge1xuICAgIC8vIFJlbW92ZSB1c2VkIGJhY2t1cCBjb2RlXG4gICAgdGhpcy5iYWNrdXBDb2RlcyA9IHRoaXMuYmFja3VwQ29kZXMuZmlsdGVyKGJjID0+IGJjICE9PSBjb2RlKTtcbiAgICByZXR1cm4gdGhpcy5zYXZlKCkudGhlbigoKSA9PiB0cnVlKTtcbiAgfVxuXG4gIGlmICh1c2VCYWNrdXApIHJldHVybiBmYWxzZTtcblxuICAvLyBWZXJpZnkgVE9UUFxuICBjb25zdCBzcGVha2Vhc3kgPSByZXF1aXJlKCdzcGVha2Vhc3knKTtcbiAgcmV0dXJuIHNwZWFrZWFzeS50b3RwLnZlcmlmeSh7XG4gICAgc2VjcmV0OiB0aGlzLnR3b0ZhY3RvclNlY3JldCxcbiAgICBlbmNvZGluZzogJ2Jhc2UzMicsXG4gICAgdG9rZW46IGNvZGUsXG4gICAgd2luZG93OiAyIC8vIEFsbG93IHRpbWUgd2luZG93IGZvciBjbG9jayBza2V3XG4gIH0pO1xufTtcblxuLy8gUmVtb3ZlIHBhc3N3b3JkIGFuZCBzZW5zaXRpdmUgZGF0YSBmcm9tIEpTT04gb3V0cHV0XG51c2VyU2NoZW1hLm1ldGhvZHMudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHVzZXJPYmplY3QgPSB0aGlzLnRvT2JqZWN0KCk7XG4gIGRlbGV0ZSB1c2VyT2JqZWN0LnBhc3N3b3JkO1xuICBkZWxldGUgdXNlck9iamVjdC5yZXNldFBhc3N3b3JkVG9rZW47XG4gIGRlbGV0ZSB1c2VyT2JqZWN0LnJlc2V0UGFzc3dvcmRFeHBpcmVzO1xuICBkZWxldGUgdXNlck9iamVjdC5tb2RlcmF0aW9uVG9rZW47XG4gIGRlbGV0ZSB1c2VyT2JqZWN0Lm1vZGVyYXRpb25Ub2tlbkV4cGlyZXM7XG4gIGRlbGV0ZSB1c2VyT2JqZWN0LnNlY3VyaXR5VG9rZW47XG4gIC8vIERvbid0IHNob3cgYmFuIGRldGFpbHMgdG8gcmVndWxhciB1c2Vyc1xuICBpZiAoIXRoaXMuaGFzTW9kZXJhdG9yUHJpdmlsZWdlcygpKSB7XG4gICAgZGVsZXRlIHVzZXJPYmplY3QuYmFuUmVhc29uO1xuICAgIGRlbGV0ZSB1c2VyT2JqZWN0LmJhbkV4cGlyZXM7XG4gICAgZGVsZXRlIHVzZXJPYmplY3Qud2FybmluZ3M7XG4gICAgZGVsZXRlIHVzZXJPYmplY3QuZmFpbGVkTG9naW5BdHRlbXB0cztcbiAgICBkZWxldGUgdXNlck9iamVjdC5sYXN0RmFpbGVkQXR0ZW1wdDtcbiAgICBkZWxldGUgdXNlck9iamVjdC5hY2NvdW50TG9ja2VkVW50aWw7XG4gIH1cbiAgcmV0dXJuIHVzZXJPYmplY3Q7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdVc2VyJywgdXNlclNjaGVtYSk7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2xDLE1BQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUVoQyxNQUFNRyxVQUFVLEdBQUcsSUFBSUosUUFBUSxDQUFDSyxNQUFNLENBQUM7RUFDckNDLFFBQVEsRUFBRTtJQUNSQyxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsTUFBTSxFQUFFLElBQUk7SUFDWkMsSUFBSSxFQUFFLElBQUk7SUFDVkMsU0FBUyxFQUFFLENBQUM7SUFDWkMsU0FBUyxFQUFFLEVBQUU7SUFDYkMsS0FBSyxFQUFFLElBQUksQ0FBQztFQUNkLENBQUM7RUFDREMsS0FBSyxFQUFFO0lBQ0xSLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxNQUFNLEVBQUUsSUFBSTtJQUNaTSxTQUFTLEVBQUUsSUFBSTtJQUNmTCxJQUFJLEVBQUUsSUFBSTtJQUNWRyxLQUFLLEVBQUUsSUFBSSxDQUFDO0VBQ2QsQ0FBQztFQUNERyxRQUFRLEVBQUU7SUFDUlYsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxJQUFJO0lBQ2RHLFNBQVMsRUFBRTtFQUNiLENBQUM7RUFDRE0sSUFBSSxFQUFFO0lBQ0pYLElBQUksRUFBRUMsTUFBTTtJQUNaVyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFF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