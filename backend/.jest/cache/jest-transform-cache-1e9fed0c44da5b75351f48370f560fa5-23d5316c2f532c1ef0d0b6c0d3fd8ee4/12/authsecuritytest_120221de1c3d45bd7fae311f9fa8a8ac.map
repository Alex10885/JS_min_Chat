{"version":3,"names":["request","require","jwt","app","closeDB","beforeAll","global","testFileName","closeDBFn","afterAll","describe","validUser","adminUser","accessToken","adminToken","userResponse","post","send","nickname","email","password","body","user","token","adminResponse","it","decoded","decode","userId","modifiedToken","sign","response","get","set","expect","toHaveProperty","code","toBe","complete","header","payload","maliciousInputs","each","maliciousInput","identifier","error","toContain","status","longInput","repeat","Array","isArray","maliciousToken","requests","i","push","startTime","Date","now","results","Promise","allSettled","endTime","totalDuration","toBeLessThan","forEach","result","value","response1","response2","duration1","duration2","timingDifference","Math","abs","variations","map","authType","all","successfulRequests","filter","r","length","rateLimitedRequests","toBeGreaterThan","tokenExpiryMinutes","expirationTimeInMs","exp","currentTimeInMs","toBeDefined","failedAttempts","lastResult","maliciousChannelIds","maliciousId","not","toMatch"],"sources":["auth-security.test.js"],"sourcesContent":["const request = require('supertest');\nconst jwt = require('jsonwebtoken');\n\nlet app, closeDB;\n\nbeforeAll(async () => {\n  // Import app for testing\n  global.testFileName = 'auth-security.test.js';\n  app = require('../../server.js');\n\n  const { closeDB: closeDBFn } = require('../../db/connection');\n  closeDB = closeDBFn;\n});\n\nafterAll(async () => {\n  if (closeDB) {\n    await closeDB();\n  }\n});\n\ndescribe('Security Tests - Authorization Vulnerabilities', () => {\n  let validUser, adminUser, accessToken, adminToken;\n\n  beforeAll(async () => {\n    // Create regular user\n    const userResponse = await request(app)\n      .post('/api/register')\n      .send({\n        nickname: 'security_test_user',\n        email: 'security_test@example.com',\n        password: 'securePass123'\n      });\n\n    validUser = userResponse.body.user;\n    accessToken = userResponse.body.token;\n\n    // Create admin user\n    const adminResponse = await request(app)\n      .post('/api/register')\n      .send({\n        nickname: 'security_admin_user',\n        email: 'security_admin@example.com',\n        password: 'securePass123'\n      });\n\n    adminUser = adminResponse.body.user;\n    adminToken = adminResponse.body.token;\n  });\n\n  describe('JWT Token Manipulation', () => {\n    it('should reject modified JWT payload', async () => {\n      // Decode and modify token payload\n      const decoded = jwt.decode(accessToken);\n      decoded.userId = '507f1f77bcf86cd799439012'; // Different user ID\n\n      // Re-sign token (attacker wouldn't have the secret)\n      const modifiedToken = jwt.sign(decoded, 'wrong_secret');\n\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${modifiedToken}`)\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.code).toBe('TOKEN_VERIFICATION_FAILED');\n    });\n\n    it('should reject JWT with wrong signature', async () => {\n      // Create unsigned token payload\n      const decoded = jwt.decode(accessToken, { complete: true });\n      const modifiedToken = `${decoded.header}.${decoded.payload}.wrong_signature`;\n\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${modifiedToken}`)\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.code).toBe('INVALID_TOKEN_FORMAT');\n    });\n\n    it('should reject JWT token in wrong format', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', 'Basic dXNlcjpwYXNz') // Basic auth instead of Bearer\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should reject JWT token as query parameter', async () => {\n      const decoded = jwt.decode(accessToken);\n      const response = await request(app)\n        .get(`/api/channels?token=${accessToken}`)\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Access token required');\n    });\n\n    it('should reject JWT token in cookie', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Cookie', `auth_token=${accessToken}`)\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Access token required');\n    });\n  });\n\n  describe('Input Validation Bypass Attempts', () => {\n    const maliciousInputs = [\n      '<script>alert(\"XSS\")</script>',\n      '\"; DROP TABLE users; --',\n      '../../etc/passwd',\n      '<img src=x onerror=alert(\"XSS\")>',\n      '${process.env}',\n      '../public/uploads/../app.js'\n    ];\n\n    it.each(maliciousInputs)('should sanitize malicious input: %s', async (maliciousInput) => {\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: maliciousInput,\n          password: 'testpass123'\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.error).toBe('Invalid credentials');\n    });\n\n    it.each(maliciousInputs)('should prevent malicious nickname registration: %s', async (maliciousInput) => {\n      const response = await request(app)\n        .post('/api/register')\n        .send({\n          nickname: maliciousInput,\n          email: 'test@example.com',\n          password: 'testpass123'\n        });\n\n      // Should either validate and reject, or sanitize\n      expect([400, 409]).toContain(response.status);\n    });\n\n    it('should prevent overly long input values', async () => {\n      const longInput = 'a'.repeat(1000);\n      const response = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: longInput,\n          password: 'testpass123'\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('errors');\n    });\n  });\n\n  describe('Authorization Bypass Attempts', () => {\n    it('should prevent horizontal privilege escalation', async () => {\n      // Try to access another user's data by modifying channel ID\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      // All returned channels should be accessible to the user\n      expect(Array.isArray(response.body)).toBe(true);\n      // Ensure no sensitive channel data is leaked\n    });\n\n    it('should reject authorization headers with trailing data', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken} some_trailing_data`)\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should reject multiple authorization headers', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .set('Authorization', 'Bearer second_token')\n        .expect(401);\n    });\n  });\n\n  describe('Header Injection Attacks', () => {\n    it('should prevent header injection in JWT', async () => {\n      // Try to inject header manipulation\n      const maliciousToken = accessToken + '\\r\\nX-Custom-Header: injected\\r\\n';\n\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${maliciousToken}`)\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should prevent content-length manipulation', async () => {\n      const response = await request(app)\n        .get('/api/channels')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .set('Content-Length', '9999999')\n        .expect(200); // Should still work normally\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n\n  describe('Timing Attack Prevention', () => {\n    it('should have consistent response times for invalid credentials', async () => {\n      const requests = [];\n\n      // Send multiple requests with different invalid credentials\n      for (let i = 0; i < 10; i++) {\n        requests.push(\n          request(app)\n            .post('/api/login')\n            .send({\n              identifier: `nonexistent_user_${i}`,\n              password: 'wrong_password'\n            })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.allSettled(requests);\n      const endTime = Date.now();\n\n      // All requests should be within reasonable time range\n      const totalDuration = endTime - startTime;\n      expect(totalDuration).toBeLessThan(10000); // Should complete within 10 seconds\n\n      // All requests should return same error\n      results.forEach(result => {\n        expect(result.status).toBe('fulfilled');\n        expect(result.value.status).toBe(400);\n        expect(result.value.body.error).toBe('Invalid credentials');\n      });\n    });\n\n    it('should prevent enumeration via timing', async () => {\n      const startTime = Date.now();\n\n      // Try valid username with invalid password\n      const response1 = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'security_test_user',\n          password: 'wrong_password'\n        });\n\n      // Try invalid username with same password\n      const response2 = await request(app)\n        .post('/api/login')\n        .send({\n          identifier: 'nonexistent_user_xyz',\n          password: 'wrong_password'\n        });\n\n      const duration1 = Date.now() - startTime;\n      const duration2 = Date.now() - duration1 - startTime;\n\n      // Timing difference shouldn't reveal valid usernames\n      const timingDifference = Math.abs(duration1 - duration2);\n      expect(timingDifference).toBeLessThan(1000); // Less than 1 second difference\n    });\n  });\n\n  describe('Rate Limit Bypass Attempts', () => {\n    it('should enforce rate limit even with case variations', async () => {\n      const variations = [\n        'Bearer',\n        'BEARER',\n        'bearer',\n        'BeArEr'\n      ];\n\n      const requests = variations.map(authType => {\n        return request(app)\n          .get('/api/channels')\n          .set('Authorization', `${authType} ${accessToken}`);\n      });\n\n      const results = await Promise.all(requests);\n\n      // Should rate limit consistently regardless of case\n      const successfulRequests = results.filter(r => r.status === 200);\n      expect(successfulRequests.length).toBeLessThan(5);\n    });\n\n    it('should detect and mitigate rapid requests from same IP', async () => {\n      // Create multiple requests to trigger rate limiting\n      const requests = [];\n      for (let i = 0; i < 100; i++) {\n        requests.push(\n          request(app)\n            .get('/health') // Use health endpoint which doesn't require auth\n        );\n      }\n\n      const results = await Promise.allSettled(requests);\n\n      // Should have rate limited some requests\n      const rateLimitedRequests = results.filter(r =>\n        r.status === 'fulfilled' && r.value.status === 429\n      );\n\n      expect(rateLimitedRequests.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Session Management Security', () => {\n    it('should expire tokens as configured', async () => {\n      const tokenExpiryMinutes = 24 * 60; // 24 hours\n      const decoded = jwt.decode(accessToken);\n\n      // Simulate time manipulation\n      const expirationTimeInMs = decoded.exp * 1000;\n      const currentTimeInMs = Date.now();\n\n      // Token should have expiration set\n      expect(decoded.exp).toBeDefined();\n      expect(expirationTimeInMs).toBeGreaterThan(currentTimeInMs);\n    });\n\n    it('should invalidate session on excessive failed attempts', async () => {\n      // Reset rate limits - this would need to be handled in real scenario\n      // For now, test the functionality\n      const failedAttempts = [];\n      for (let i = 0; i < 10; i++) {\n        failedAttempts.push(\n          request(app)\n            .post('/api/login')\n            .send({\n              identifier: 'security_test_user',\n              password: 'wrong_password_' + i\n            })\n        );\n      }\n\n      const results = await Promise.all(failedAttempts);\n      const lastResult = results[results.length - 1];\n\n      // Should eventually rate limit after multiple failures\n      expect([400, 429]).toContain(lastResult.status);\n    });\n  });\n\n  describe('Directory Traversal Protection', () => {\n    it('should prevent directory traversal in channel access', async () => {\n      const maliciousChannelIds = [\n        '../../etc/passwd',\n        '../../../config/database.js',\n        '..\\\\..\\\\config\\\\secrets.json',\n        '%2e%2e%2fetc%2fpasswd',\n        '\\..\\..\\windows\\system32\\config\\sam'\n      ];\n\n      for (const maliciousId of maliciousChannelIds) {\n        const response = await request(app)\n          .get(`/api/channels/${maliciousId}`)\n          .set('Authorization', `Bearer ${accessToken}`);\n\n        // Should return 404 (channel not found) instead of file access\n        expect([403, 404, 422]).toContain(response.status);\n        expect(response.body).not.toMatch(/root:|admin:|password:/);\n      }\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}