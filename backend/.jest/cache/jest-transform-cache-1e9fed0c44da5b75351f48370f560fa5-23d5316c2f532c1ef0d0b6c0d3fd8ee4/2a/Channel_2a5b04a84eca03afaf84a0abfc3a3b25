2efbecf02ced3bf0fd78493e2da9e7df
const mongoose = require('mongoose');
const channelSchema = new mongoose.Schema({
  id: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  name: {
    type: String,
    required: true,
    trim: true,
    maxlength: 100
  },
  parent: {
    type: String,
    default: null
  },
  type: {
    type: String,
    enum: ['text', 'voice'],
    required: true
  },
  description: {
    type: String,
    maxlength: 500
  },
  position: {
    type: Number,
    default: 0
  },
  createdBy: {
    type: String,
    required: true,
    trim: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  permissions: {
    read: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    },
    write: {
      type: String,
      enum: ['everyone', 'admin'],
      default: 'everyone'
    }
  },
  locked: {
    type: Boolean,
    default: false
  }
});

// Indexes
channelSchema.index({
  id: 1,
  type: 1
}); // For channel queries by type
channelSchema.index({
  parent: 1
}); // For nested channels
channelSchema.index({
  position: 1
}); // For ordering

// Generate unique ID from name and handle slug
channelSchema.pre('save', async function (next) {
  this.updatedAt = new Date();
  if (this.isNew && this.name && !this.id) {
    // Generate base ID from name
    let baseId = this.name.toLowerCase().replace(/[^a-z0-9\s-]/g, '') // Remove special chars except spaces and hyphens
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens

    // Ensure ID is not empty
    if (!baseId) {
      baseId = 'channel-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    }

    // Ensure uniqueness
    let uniqueId = baseId;
    let counter = 1;
    let existing = await this.constructor.findOne({
      id: uniqueId
    });
    while (existing) {
      uniqueId = `${baseId}-${counter}`;
      counter++;
      existing = await this.constructor.findOne({
        id: uniqueId
      });
    }
    this.id = uniqueId;
  }
  next();
});

// Remove channel method (used for deleting with checks)
channelSchema.methods.safeDelete = async function () {
  const MessageModel = require('./Message'); // Ensure model is loaded
  // Count messages in this channel
  const messageCount = await MessageModel.countDocuments({
    channel: this.id
  });
  if (messageCount > 0) {
    throw new Error(`Cannot delete channel with ${messageCount} messages. Channel must be empty or archived.`);
  }
  return this.deleteOne();
};
module.exports = mongoose.model('Channel', channelSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJjaGFubmVsU2NoZW1hIiwiU2NoZW1hIiwiaWQiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJ1bmlxdWUiLCJ0cmltIiwibmFtZSIsIm1heGxlbmd0aCIsInBhcmVudCIsImRlZmF1bHQiLCJlbnVtIiwiZGVzY3JpcHRpb24iLCJwb3NpdGlvbiIsIk51bWJlciIsImNyZWF0ZWRCeSIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJ1cGRhdGVkQXQiLCJwZXJtaXNzaW9ucyIsInJlYWQiLCJ3cml0ZSIsImxvY2tlZCIsIkJvb2xlYW4iLCJpbmRleCIsInByZSIsIm5leHQiLCJpc05ldyIsImJhc2VJZCIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInVuaXF1ZUlkIiwiY291bnRlciIsImV4aXN0aW5nIiwiY29uc3RydWN0b3IiLCJmaW5kT25lIiwibWV0aG9kcyIsInNhZmVEZWxldGUiLCJNZXNzYWdlTW9kZWwiLCJtZXNzYWdlQ291bnQiLCJjb3VudERvY3VtZW50cyIsImNoYW5uZWwiLCJFcnJvciIsImRlbGV0ZU9uZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJzb3VyY2VzIjpbIkNoYW5uZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuXG5jb25zdCBjaGFubmVsU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGlkOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICB0cmltOiB0cnVlXG4gIH0sXG4gIG5hbWU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdHJpbTogdHJ1ZSxcbiAgICBtYXhsZW5ndGg6IDEwMFxuICB9LFxuICBwYXJlbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICB0eXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGVudW06IFsndGV4dCcsICd2b2ljZSddLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIGRlc2NyaXB0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIG1heGxlbmd0aDogNTAwXG4gIH0sXG4gIHBvc2l0aW9uOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgY3JlYXRlZEJ5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHRyaW06IHRydWVcbiAgfSxcbiAgY3JlYXRlZEF0OiB7XG4gICAgdHlwZTogRGF0ZSxcbiAgICBkZWZhdWx0OiBEYXRlLm5vd1xuICB9LFxuICB1cGRhdGVkQXQ6IHtcbiAgICB0eXBlOiBEYXRlLFxuICAgIGRlZmF1bHQ6IERhdGUubm93XG4gIH0sXG4gIHBlcm1pc3Npb25zOiB7XG4gICAgcmVhZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZW51bTogWydldmVyeW9uZScsICdhZG1pbiddLFxuICAgICAgZGVmYXVsdDogJ2V2ZXJ5b25lJ1xuICAgIH0sXG4gICAgd3JpdGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGVudW06IFsnZXZlcnlvbmUnLCAnYWRtaW4nXSxcbiAgICAgIGRlZmF1bHQ6ICdldmVyeW9uZSdcbiAgICB9XG4gIH0sXG4gIGxvY2tlZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfVxufSk7XG5cbi8vIEluZGV4ZXNcbmNoYW5uZWxTY2hlbWEuaW5kZXgoeyBpZDogMSwgdHlwZTogMSB9KTsgLy8gRm9yIGNoYW5uZWwgcXVlcmllcyBieSB0eXBlXG5jaGFubmVsU2NoZW1hLmluZGV4KHsgcGFyZW50OiAxIH0pOyAvLyBGb3IgbmVzdGVkIGNoYW5uZWxzXG5jaGFubmVsU2NoZW1hLmluZGV4KHsgcG9zaXRpb246IDEgfSk7IC8vIEZvciBvcmRlcmluZ1xuXG4vLyBHZW5lcmF0ZSB1bmlxdWUgSUQgZnJvbSBuYW1lIGFuZCBoYW5kbGUgc2x1Z1xuY2hhbm5lbFNjaGVtYS5wcmUoJ3NhdmUnLCBhc3luYyBmdW5jdGlvbihuZXh0KSB7XG4gIHRoaXMudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcblxuICBpZiAodGhpcy5pc05ldyAmJiB0aGlzLm5hbWUgJiYgIXRoaXMuaWQpIHtcbiAgICAvLyBHZW5lcmF0ZSBiYXNlIElEIGZyb20gbmFtZVxuICAgIGxldCBiYXNlSWQgPSB0aGlzLm5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgLnJlcGxhY2UoL1teYS16MC05XFxzLV0vZywgJycpIC8vIFJlbW92ZSBzcGVjaWFsIGNoYXJzIGV4Y2VwdCBzcGFjZXMgYW5kIGh5cGhlbnNcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csICctJykgLy8gUmVwbGFjZSBzcGFjZXMgd2l0aCBoeXBoZW5zXG4gICAgICAucmVwbGFjZSgvLSsvZywgJy0nKSAvLyBSZXBsYWNlIG11bHRpcGxlIGh5cGhlbnMgd2l0aCBzaW5nbGVcbiAgICAgIC5yZXBsYWNlKC9eLXwtJC9nLCAnJyk7IC8vIFJlbW92ZSBsZWFkaW5nL3RyYWlsaW5nIGh5cGhlbnNcblxuICAgIC8vIEVuc3VyZSBJRCBpcyBub3QgZW1wdHlcbiAgICBpZiAoIWJhc2VJZCkge1xuICAgICAgYmFzZUlkID0gJ2NoYW5uZWwtJyArIERhdGUubm93KCkgKyAnLScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHVuaXF1ZW5lc3NcbiAgICBsZXQgdW5pcXVlSWQgPSBiYXNlSWQ7XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGxldCBleGlzdGluZyA9IGF3YWl0IHRoaXMuY29uc3RydWN0b3IuZmluZE9uZSh7IGlkOiB1bmlxdWVJZCB9KTtcblxuICAgIHdoaWxlIChleGlzdGluZykge1xuICAgICAgdW5pcXVlSWQgPSBgJHtiYXNlSWR9LSR7Y291bnRlcn1gO1xuICAgICAgY291bnRlcisrO1xuICAgICAgZXhpc3RpbmcgPSBhd2FpdCB0aGlzLmNvbnN0cnVjdG9yLmZpbmRPbmUoeyBpZDogdW5pcXVlSWQgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5pZCA9IHVuaXF1ZUlkO1xuICB9XG5cbiAgbmV4dCgpO1xufSk7XG5cbi8vIFJlbW92ZSBjaGFubmVsIG1ldGhvZCAodXNlZCBmb3IgZGVsZXRpbmcgd2l0aCBjaGVja3MpXG5jaGFubmVsU2NoZW1hLm1ldGhvZHMuc2FmZURlbGV0ZSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgY29uc3QgTWVzc2FnZU1vZGVsID0gcmVxdWlyZSgnLi9NZXNzYWdlJyk7IC8vIEVuc3VyZSBtb2RlbCBpcyBsb2FkZWRcbiAgIC8vIENvdW50IG1lc3NhZ2VzIGluIHRoaXMgY2hhbm5lbFxuICAgY29uc3QgbWVzc2FnZUNvdW50ID0gYXdhaXQgTWVzc2FnZU1vZGVsLmNvdW50RG9jdW1lbnRzKHsgY2hhbm5lbDogdGhpcy5pZCB9KTtcblxuICAgaWYgKG1lc3NhZ2VDb3VudCA+IDApIHtcbiAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVsZXRlIGNoYW5uZWwgd2l0aCAke21lc3NhZ2VDb3VudH0gbWVzc2FnZXMuIENoYW5uZWwgbXVzdCBiZSBlbXB0eSBvciBhcmNoaXZlZC5gKTtcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuZGVsZXRlT25lKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdDaGFubmVsJywgY2hhbm5lbFNjaGVtYSk7Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFcEMsTUFBTUMsYUFBYSxHQUFHLElBQUlGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDO0VBQ3hDQyxFQUFFLEVBQUU7SUFDRkMsSUFBSSxFQUFFQyxNQUFNO0lB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