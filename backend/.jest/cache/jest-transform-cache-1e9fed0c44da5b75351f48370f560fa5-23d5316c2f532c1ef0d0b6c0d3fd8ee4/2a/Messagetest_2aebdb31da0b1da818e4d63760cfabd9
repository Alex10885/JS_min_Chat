006a88df518e3c8df0d9e37742f7ca9e
const Message = require('../../models/Message');
describe('Message Model', () => {
  describe('Message Creation', () => {
    it('should create a message with valid data', async () => {
      const messageData = {
        author: 'testuser',
        channel: 'general',
        text: 'Hello world!',
        type: 'public'
      };
      const message = new Message(messageData);
      const savedMessage = await message.save();
      expect(savedMessage.author).toBe(messageData.author);
      expect(savedMessage.channel).toBe(messageData.channel);
      expect(savedMessage.text).toBe(messageData.text);
      expect(savedMessage.type).toBe(messageData.type);
      expect(savedMessage.timestamp).toBeDefined();
      expect(savedMessage.status).toBe('delivered');
    });
    it('should require author, channel and text', async () => {
      const message = new Message({});
      let error;
      try {
        await message.save();
      } catch (err) {
        error = err;
      }
      expect(error).toBeDefined();
      expect(error.errors.author).toBeDefined();
      expect(error.errors.channel).toBeDefined();
      expect(error.errors.text).toBeDefined();
    });
    it('should enforce text length limits', async () => {
      const longText = 'a'.repeat(2001);
      const message = new Message({
        author: 'testuser',
        channel: 'general',
        text: longText,
        type: 'public'
      });
      let error;
      try {
        await message.save();
      } catch (err) {
        error = err;
      }
      expect(error).toBeDefined();
      expect(error.errors.text).toBeDefined();
    });
  });
  describe('Message Types', () => {
    it('should support different message types', async () => {
      const messageTypes = ['public', 'private', 'system'];
      for (const type of messageTypes) {
        const message = new Message({
          author: 'testuser',
          channel: 'general',
          text: `Test ${type} message`,
          type: type
        });
        const savedMessage = await message.save();
        expect(savedMessage.type).toBe(type);
      }
    });
    it('should reject invalid message types', async () => {
      const message = new Message({
        author: 'testuser',
        channel: 'general',
        text: 'Test message',
        type: 'invalid'
      });
      let error;
      try {
        await message.save();
      } catch (err) {
        error = err;
      }
      expect(error).toBeDefined();
      expect(error.errors.type).toBeDefined();
    });
  });
  describe('Private Messages', () => {
    it('should handle private messages correctly', async () => {
      const privateMessage = {
        author: 'sender',
        channel: 'general',
        text: 'Private message',
        type: 'private',
        target: 'recipient'
      };
      const message = new Message(privateMessage);
      const savedMessage = await message.save();
      expect(savedMessage.type).toBe('private');
      expect(savedMessage.target).toBe('recipient');
    });
    it('should allow null target for public messages', async () => {
      const publicMessage = {
        author: 'sender',
        channel: 'general',
        text: 'Public message',
        type: 'public',
        target: null
      };
      const message = new Message(publicMessage);
      const savedMessage = await message.save();
      expect(savedMessage.target).toBeNull();
    });
  });
  describe('Indexing', () => {
    it('should use timestamp index for queries', async () => {
      const messages = [];
      const now = new Date();

      // Create messages with different timestamps
      for (let i = 0; i < 5; i++) {
        const message = new Message({
          author: 'testuser',
          channel: 'general',
          text: `Message ${i}`,
          type: 'public'
        });
        await message.save();
        messages.push(message);
      }

      // Query messages sorted by timestamp
      const foundMessages = await Message.find({
        channel: 'general',
        type: 'public'
      }).sort({
        timestamp: -1
      });
      expect(foundMessages.length).toBe(5);
      // Check that messages are properly sorted
      for (let i = 0; i < foundMessages.length - 1; i++) {
        expect(foundMessages[i].timestamp.getTime()).toBeGreaterThanOrEqual(foundMessages[i + 1].timestamp.getTime());
      }
    });
  });
  describe('Message Status', () => {
    it('should default status to delivered', async () => {
      const messageData = {
        author: 'testuser',
        channel: 'general',
        text: 'Test message',
        type: 'public'
      };
      const message = new Message(messageData);
      const savedMessage = await message.save();
      expect(savedMessage.status).toBe('delivered');
    });
    it('should accept different status values', async () => {
      const statuses = ['delivered', 'failed'];
      for (const status of statuses) {
        const message = new Message({
          author: 'testuser',
          channel: 'general',
          text: `Message with status ${status}`,
          type: 'public',
          status: status
        });
        const savedMessage = await message.save();
        expect(savedMessage.status).toBe(status);
      }
    });
  });
  describe('Timestamps', () => {
    it('should set timestamp on creation', async () => {
      const beforeCreate = new Date();
      const message = new Message({
        author: 'testuser',
        channel: 'general',
        text: 'Timestamp test',
        type: 'public'
      });
      const savedMessage = await message.save();
      const afterCreate = new Date();
      expect(savedMessage.timestamp).toBeDefined();
      expect(savedMessage.timestamp.getTime()).toBeGreaterThanOrEqual(beforeCreate.getTime());
      expect(savedMessage.timestamp.getTime()).toBeLessThanOrEqual(afterCreate.getTime());
    });
  });
  describe('Target Validation', () => {
    it('should allow null target for private messages', async () => {
      const message = new Message({
        author: 'sender',
        channel: 'general',
        text: 'Private message',
        type: 'private',
        target: null
      });
      const savedMessage = await message.save();
      expect(savedMessage.target).toBeNull();
    });
    it('should handle empty targets correctly', async () => {
      const message = new Message({
        author: 'sender',
        channel: 'general',
        text: 'Empty target test',
        type: 'private',
        target: ''
      });
      const savedMessage = await message.save();
      expect(savedMessage.target).toBe('');
    });
  });
  describe('Channel-based Queries', () => {
    it('should filter messages by channel', async () => {
      // Create messages in different channels
      await new Message({
        author: 'user1',
        channel: 'general',
        text: 'General message',
        type: 'public'
      }).save();
      await new Message({
        author: 'user2',
        channel: 'random',
        text: 'Random message',
        type: 'public'
      }).save();
      await new Message({
        author: 'user3',
        channel: 'general',
        text: 'Another general message',
        type: 'public'
      }).save();
      const generalMessages = await Message.find({
        channel: 'general'
      });
      const randomMessages = await Message.find({
        channel: 'random'
      });
      expect(generalMessages.length).toBe(2);
      expect(randomMessages.length).toBe(1);
    });
    it('should filter by multiple criteria', async () => {
      await new Message({
        author: 'testuser',
        channel: 'general',
        text: 'Public message',
        type: 'public'
      }).save();
      await new Message({
        author: 'testuser',
        channel: 'general',
        text: 'Private message',
        type: 'private',
        target: 'recipient'
      }).save();
      const publicMessages = await Message.find({
        channel: 'general',
        type: 'public'
      });
      const privateMessages = await Message.find({
        channel: 'general',
        type: 'private'
      });
      expect(publicMessages.length).toBe(1);
      expect(privateMessages.length).toBe(1);
    });
  });
  describe('Text Validation', () => {
    it('should allow unicode characters', async () => {
      const unicodeText = 'Привет, мир! 🌍 こんにちは';
      const message = new Message({
        author: 'unicodetest',
        channel: 'general',
        text: unicodeText,
        type: 'public'
      });
      const savedMessage = await message.save();
      expect(savedMessage.text).toBe(unicodeText);
    });
    it('should preserve whitespace in text', async () => {
      const message = new Message({
        author: 'whitespacetest',
        channel: 'general',
        text: '  Text with spaces  ',
        type: 'public'
      });
      const savedMessage = await message.save();
      expect(savedMessage.text).toBe('  Text with spaces  ');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNZXNzYWdlIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJtZXNzYWdlRGF0YSIsImF1dGhvciIsImNoYW5uZWwiLCJ0ZXh0IiwidHlwZSIsIm1lc3NhZ2UiLCJzYXZlZE1lc3NhZ2UiLCJzYXZlIiwiZXhwZWN0IiwidG9CZSIsInRpbWVzdGFtcCIsInRvQmVEZWZpbmVkIiwic3RhdHVzIiwiZXJyb3IiLCJlcnIiLCJlcnJvcnMiLCJsb25nVGV4dCIsInJlcGVhdCIsIm1lc3NhZ2VUeXBlcyIsInByaXZhdGVNZXNzYWdlIiwidGFyZ2V0IiwicHVibGljTWVzc2FnZSIsInRvQmVOdWxsIiwibWVzc2FnZXMiLCJub3ciLCJEYXRlIiwiaSIsInB1c2giLCJmb3VuZE1lc3NhZ2VzIiwiZmluZCIsInNvcnQiLCJsZW5ndGgiLCJnZXRUaW1lIiwidG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCIsInN0YXR1c2VzIiwiYmVmb3JlQ3JlYXRlIiwiYWZ0ZXJDcmVhdGUiLCJ0b0JlTGVzc1RoYW5PckVxdWFsIiwiZ2VuZXJhbE1lc3NhZ2VzIiwicmFuZG9tTWVzc2FnZXMiLCJwdWJsaWNNZXNzYWdlcyIsInByaXZhdGVNZXNzYWdlcyIsInVuaWNvZGVUZXh0Il0sInNvdXJjZXMiOlsiTWVzc2FnZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1lc3NhZ2UgPSByZXF1aXJlKCcuLi8uLi9tb2RlbHMvTWVzc2FnZScpO1xuXG5kZXNjcmliZSgnTWVzc2FnZSBNb2RlbCcsICgpID0+IHtcbiAgZGVzY3JpYmUoJ01lc3NhZ2UgQ3JlYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBtZXNzYWdlIHdpdGggdmFsaWQgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0ge1xuICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJ0hlbGxvIHdvcmxkIScsXG4gICAgICAgIHR5cGU6ICdwdWJsaWMnXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2UobWVzc2FnZURhdGEpO1xuICAgICAgY29uc3Qgc2F2ZWRNZXNzYWdlID0gYXdhaXQgbWVzc2FnZS5zYXZlKCk7XG5cbiAgICAgIGV4cGVjdChzYXZlZE1lc3NhZ2UuYXV0aG9yKS50b0JlKG1lc3NhZ2VEYXRhLmF1dGhvcik7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLmNoYW5uZWwpLnRvQmUobWVzc2FnZURhdGEuY2hhbm5lbCk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRleHQpLnRvQmUobWVzc2FnZURhdGEudGV4dCk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnR5cGUpLnRvQmUobWVzc2FnZURhdGEudHlwZSk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRpbWVzdGFtcCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChzYXZlZE1lc3NhZ2Uuc3RhdHVzKS50b0JlKCdkZWxpdmVyZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVxdWlyZSBhdXRob3IsIGNoYW5uZWwgYW5kIHRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe30pO1xuICAgICAgbGV0IGVycm9yO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZXhwZWN0KGVycm9yKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGVycm9yLmVycm9ycy5hdXRob3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZXJyb3IuZXJyb3JzLmNoYW5uZWwpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZXJyb3IuZXJyb3JzLnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGVuZm9yY2UgdGV4dCBsZW5ndGggbGltaXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbG9uZ1RleHQgPSAnYScucmVwZWF0KDIwMDEpO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgYXV0aG9yOiAndGVzdHVzZXInLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6IGxvbmdUZXh0LFxuICAgICAgICB0eXBlOiAncHVibGljJ1xuICAgICAgfSk7XG5cbiAgICAgIGxldCBlcnJvcjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG1lc3NhZ2Uuc2F2ZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZXJyb3IuZXJyb3JzLnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNZXNzYWdlIFR5cGVzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc3VwcG9ydCBkaWZmZXJlbnQgbWVzc2FnZSB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VUeXBlcyA9IFsncHVibGljJywgJ3ByaXZhdGUnLCAnc3lzdGVtJ107XG5cbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBtZXNzYWdlVHlwZXMpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgICAgY2hhbm5lbDogJ2dlbmVyYWwnLFxuICAgICAgICAgIHRleHQ6IGBUZXN0ICR7dHlwZX0gbWVzc2FnZWAsXG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzYXZlZE1lc3NhZ2UgPSBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcbiAgICAgICAgZXhwZWN0KHNhdmVkTWVzc2FnZS50eXBlKS50b0JlKHR5cGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBtZXNzYWdlIHR5cGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgYXV0aG9yOiAndGVzdHVzZXInLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6ICdUZXN0IG1lc3NhZ2UnLFxuICAgICAgICB0eXBlOiAnaW52YWxpZCdcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgZXJyb3I7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZXhwZWN0KGVycm9yKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGVycm9yLmVycm9ycy50eXBlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUHJpdmF0ZSBNZXNzYWdlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwcml2YXRlIG1lc3NhZ2VzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHByaXZhdGVNZXNzYWdlID0ge1xuICAgICAgICBhdXRob3I6ICdzZW5kZXInLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6ICdQcml2YXRlIG1lc3NhZ2UnLFxuICAgICAgICB0eXBlOiAncHJpdmF0ZScsXG4gICAgICAgIHRhcmdldDogJ3JlY2lwaWVudCdcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgTWVzc2FnZShwcml2YXRlTWVzc2FnZSk7XG4gICAgICBjb25zdCBzYXZlZE1lc3NhZ2UgPSBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcblxuICAgICAgZXhwZWN0KHNhdmVkTWVzc2FnZS50eXBlKS50b0JlKCdwcml2YXRlJyk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRhcmdldCkudG9CZSgncmVjaXBpZW50Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFsbG93IG51bGwgdGFyZ2V0IGZvciBwdWJsaWMgbWVzc2FnZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwdWJsaWNNZXNzYWdlID0ge1xuICAgICAgICBhdXRob3I6ICdzZW5kZXInLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6ICdQdWJsaWMgbWVzc2FnZScsXG4gICAgICAgIHR5cGU6ICdwdWJsaWMnLFxuICAgICAgICB0YXJnZXQ6IG51bGxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgTWVzc2FnZShwdWJsaWNNZXNzYWdlKTtcbiAgICAgIGNvbnN0IHNhdmVkTWVzc2FnZSA9IGF3YWl0IG1lc3NhZ2Uuc2F2ZSgpO1xuXG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRhcmdldCkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0luZGV4aW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdXNlIHRpbWVzdGFtcCBpbmRleCBmb3IgcXVlcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAvLyBDcmVhdGUgbWVzc2FnZXMgd2l0aCBkaWZmZXJlbnQgdGltZXN0YW1wc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgICAgY2hhbm5lbDogJ2dlbmVyYWwnLFxuICAgICAgICAgIHRleHQ6IGBNZXNzYWdlICR7aX1gLFxuICAgICAgICAgIHR5cGU6ICdwdWJsaWMnXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcbiAgICAgICAgbWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgLy8gUXVlcnkgbWVzc2FnZXMgc29ydGVkIGJ5IHRpbWVzdGFtcFxuICAgICAgY29uc3QgZm91bmRNZXNzYWdlcyA9IGF3YWl0IE1lc3NhZ2UuZmluZCh7XG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdHlwZTogJ3B1YmxpYydcbiAgICAgIH0pLnNvcnQoeyB0aW1lc3RhbXA6IC0xIH0pO1xuXG4gICAgICBleHBlY3QoZm91bmRNZXNzYWdlcy5sZW5ndGgpLnRvQmUoNSk7XG4gICAgICAvLyBDaGVjayB0aGF0IG1lc3NhZ2VzIGFyZSBwcm9wZXJseSBzb3J0ZWRcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm91bmRNZXNzYWdlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgZXhwZWN0KGZvdW5kTWVzc2FnZXNbaV0udGltZXN0YW1wLmdldFRpbWUoKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChcbiAgICAgICAgICBmb3VuZE1lc3NhZ2VzW2kgKyAxXS50aW1lc3RhbXAuZ2V0VGltZSgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNZXNzYWdlIFN0YXR1cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRlZmF1bHQgc3RhdHVzIHRvIGRlbGl2ZXJlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0ge1xuICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJ1Rlc3QgbWVzc2FnZScsXG4gICAgICAgIHR5cGU6ICdwdWJsaWMnXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2UobWVzc2FnZURhdGEpO1xuICAgICAgY29uc3Qgc2F2ZWRNZXNzYWdlID0gYXdhaXQgbWVzc2FnZS5zYXZlKCk7XG5cbiAgICAgIGV4cGVjdChzYXZlZE1lc3NhZ2Uuc3RhdHVzKS50b0JlKCdkZWxpdmVyZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYWNjZXB0IGRpZmZlcmVudCBzdGF0dXMgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhdHVzZXMgPSBbJ2RlbGl2ZXJlZCcsICdmYWlsZWQnXTtcblxuICAgICAgZm9yIChjb25zdCBzdGF0dXMgb2Ygc3RhdHVzZXMpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgICAgY2hhbm5lbDogJ2dlbmVyYWwnLFxuICAgICAgICAgIHRleHQ6IGBNZXNzYWdlIHdpdGggc3RhdHVzICR7c3RhdHVzfWAsXG4gICAgICAgICAgdHlwZTogJ3B1YmxpYycsXG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2F2ZWRNZXNzYWdlID0gYXdhaXQgbWVzc2FnZS5zYXZlKCk7XG4gICAgICAgIGV4cGVjdChzYXZlZE1lc3NhZ2Uuc3RhdHVzKS50b0JlKHN0YXR1cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUaW1lc3RhbXBzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2V0IHRpbWVzdGFtcCBvbiBjcmVhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlZm9yZUNyZWF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe1xuICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJ1RpbWVzdGFtcCB0ZXN0JyxcbiAgICAgICAgdHlwZTogJ3B1YmxpYydcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzYXZlZE1lc3NhZ2UgPSBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcbiAgICAgIGNvbnN0IGFmdGVyQ3JlYXRlID0gbmV3IERhdGUoKTtcblxuICAgICAgZXhwZWN0KHNhdmVkTWVzc2FnZS50aW1lc3RhbXApLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRpbWVzdGFtcC5nZXRUaW1lKCkpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoYmVmb3JlQ3JlYXRlLmdldFRpbWUoKSk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRpbWVzdGFtcC5nZXRUaW1lKCkpLnRvQmVMZXNzVGhhbk9yRXF1YWwoYWZ0ZXJDcmVhdGUuZ2V0VGltZSgpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RhcmdldCBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYWxsb3cgbnVsbCB0YXJnZXQgZm9yIHByaXZhdGUgbWVzc2FnZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe1xuICAgICAgICBhdXRob3I6ICdzZW5kZXInLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6ICdQcml2YXRlIG1lc3NhZ2UnLFxuICAgICAgICB0eXBlOiAncHJpdmF0ZScsXG4gICAgICAgIHRhcmdldDogbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNhdmVkTWVzc2FnZSA9IGF3YWl0IG1lc3NhZ2Uuc2F2ZSgpO1xuICAgICAgZXhwZWN0KHNhdmVkTWVzc2FnZS50YXJnZXQpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSB0YXJnZXRzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgTWVzc2FnZSh7XG4gICAgICAgIGF1dGhvcjogJ3NlbmRlcicsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJ0VtcHR5IHRhcmdldCB0ZXN0JyxcbiAgICAgICAgdHlwZTogJ3ByaXZhdGUnLFxuICAgICAgICB0YXJnZXQ6ICcnXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2F2ZWRNZXNzYWdlID0gYXdhaXQgbWVzc2FnZS5zYXZlKCk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRhcmdldCkudG9CZSgnJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDaGFubmVsLWJhc2VkIFF1ZXJpZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBmaWx0ZXIgbWVzc2FnZXMgYnkgY2hhbm5lbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSBtZXNzYWdlcyBpbiBkaWZmZXJlbnQgY2hhbm5lbHNcbiAgICAgIGF3YWl0IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgYXV0aG9yOiAndXNlcjEnLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6ICdHZW5lcmFsIG1lc3NhZ2UnLFxuICAgICAgICB0eXBlOiAncHVibGljJ1xuICAgICAgfSkuc2F2ZSgpO1xuXG4gICAgICBhd2FpdCBuZXcgTWVzc2FnZSh7XG4gICAgICAgIGF1dGhvcjogJ3VzZXIyJyxcbiAgICAgICAgY2hhbm5lbDogJ3JhbmRvbScsXG4gICAgICAgIHRleHQ6ICdSYW5kb20gbWVzc2FnZScsXG4gICAgICAgIHR5cGU6ICdwdWJsaWMnXG4gICAgICB9KS5zYXZlKCk7XG5cbiAgICAgIGF3YWl0IG5ldyBNZXNzYWdlKHtcbiAgICAgICAgYXV0aG9yOiAndXNlcjMnLFxuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHRleHQ6ICdBbm90aGVyIGdlbmVyYWwgbWVzc2FnZScsXG4gICAgICAgIHR5cGU6ICdwdWJsaWMnXG4gICAgICB9KS5zYXZlKCk7XG5cbiAgICAgIGNvbnN0IGdlbmVyYWxNZXNzYWdlcyA9IGF3YWl0IE1lc3NhZ2UuZmluZCh7IGNoYW5uZWw6ICdnZW5lcmFsJyB9KTtcbiAgICAgIGNvbnN0IHJhbmRvbU1lc3NhZ2VzID0gYXdhaXQgTWVzc2FnZS5maW5kKHsgY2hhbm5lbDogJ3JhbmRvbScgfSk7XG5cbiAgICAgIGV4cGVjdChnZW5lcmFsTWVzc2FnZXMubGVuZ3RoKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHJhbmRvbU1lc3NhZ2VzLmxlbmd0aCkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmlsdGVyIGJ5IG11bHRpcGxlIGNyaXRlcmlhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgbmV3IE1lc3NhZ2Uoe1xuICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJ1B1YmxpYyBtZXNzYWdlJyxcbiAgICAgICAgdHlwZTogJ3B1YmxpYydcbiAgICAgIH0pLnNhdmUoKTtcblxuICAgICAgYXdhaXQgbmV3IE1lc3NhZ2Uoe1xuICAgICAgICBhdXRob3I6ICd0ZXN0dXNlcicsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJ1ByaXZhdGUgbWVzc2FnZScsXG4gICAgICAgIHR5cGU6ICdwcml2YXRlJyxcbiAgICAgICAgdGFyZ2V0OiAncmVjaXBpZW50J1xuICAgICAgfSkuc2F2ZSgpO1xuXG4gICAgICBjb25zdCBwdWJsaWNNZXNzYWdlcyA9IGF3YWl0IE1lc3NhZ2UuZmluZCh7XG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdHlwZTogJ3B1YmxpYydcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBwcml2YXRlTWVzc2FnZXMgPSBhd2FpdCBNZXNzYWdlLmZpbmQoe1xuICAgICAgICBjaGFubmVsOiAnZ2VuZXJhbCcsXG4gICAgICAgIHR5cGU6ICdwcml2YXRlJ1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChwdWJsaWNNZXNzYWdlcy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocHJpdmF0ZU1lc3NhZ2VzLmxlbmd0aCkudG9CZSgxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RleHQgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGFsbG93IHVuaWNvZGUgY2hhcmFjdGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVuaWNvZGVUZXh0ID0gJ9Cf0YDQuNCy0LXRgiwg0LzQuNGAISDwn4yNIOOBk+OCk+OBq+OBoeOBryc7XG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe1xuICAgICAgICBhdXRob3I6ICd1bmljb2RldGVzdCcsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogdW5pY29kZVRleHQsXG4gICAgICAgIHR5cGU6ICdwdWJsaWMnXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2F2ZWRNZXNzYWdlID0gYXdhaXQgbWVzc2FnZS5zYXZlKCk7XG4gICAgICBleHBlY3Qoc2F2ZWRNZXNzYWdlLnRleHQpLnRvQmUodW5pY29kZVRleHQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcmVzZXJ2ZSB3aGl0ZXNwYWNlIGluIHRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe1xuICAgICAgICBhdXRob3I6ICd3aGl0ZXNwYWNldGVzdCcsXG4gICAgICAgIGNoYW5uZWw6ICdnZW5lcmFsJyxcbiAgICAgICAgdGV4dDogJyAgVGV4dCB3aXRoIHNwYWNlcyAgJyxcbiAgICAgICAgdHlwZTogJ3B1YmxpYydcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzYXZlZE1lc3NhZ2UgPSBhd2FpdCBtZXNzYWdlLnNhdmUoKTtcbiAgICAgIGV4cGVjdChzYXZlZE1lc3NhZ2UudGV4dCkudG9CZSgnICBUZXh0IHdpdGggc3BhY2VzICAnKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBRS9DQyxRQUFRLENBQUMsZUFBZSxFQUFFLE1BQU07RUFDOUJBLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNO0lBQ2pDQyxFQUFFLENBQUMseUNBQXlDLEVBQUUsWUFBWTtNQUN4RCxNQUFNQyxXQUFXLEdBQUc7UUFDbEJDLE1BQU0sRUFBRSxVQUFVO1FBQ2xCQyxPQUFPLEVBQUUsU0FBUztRQUNsQkMsSUFBSSxFQUFFLGNBQWM7UUFDcEJDLElBQUksRUFBRTtNQUNSLENBQUM7TUFFRCxNQUFNQyxPQUFPLEdBQUcsSUFBSVQsT0FBTyxDQUFDSSxXQUFXLENBQUM7TUFDeEMsTUFBTU0sWUFBWSxHQUFHLE1BQU1ELE9BQU8sQ0FBQ0UsSUFBSSxDQUFDLENBQUM7TUFFekNDLE1BQU0sQ0FBQ0YsWUFBWSxDQUFDTCxNQUFNLENBQUMsQ0FBQ1EsSUFBSSxDQUFDVCxXQUFXLENBQUNDLE1BQU0sQ0FBQztNQUNwRE8sTUFBTSxDQUFDRixZQUFZLENBQUNKLE9BQU8sQ0FBQyxDQUFDTyxJQUFJLENBQUNULFdBQVcsQ0FBQ0UsT0FBTyxDQUFDO01BQ3RETSxNQUFNLENBQUNGLFlBQVksQ0FBQ0gsSUFBSSxDQUFDLENBQUNNLElBQUksQ0FBQ1QsV0FBVyxDQUFDRyxJQUFJLENBQUM7TUFDaERLLE1BQU0sQ0FBQ0YsWUFBWSxDQUFDRixJQUFJLENBQUMsQ0FBQ0ssSUFBSSxDQUFDVCxXQUFXLENBQUNJLElBQUksQ0FBQztNQUNoREksTUFBTSxDQUFDRixZQUFZLENBQUNJLFNBQVMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztNQUM1Q0gsTUFBTSxDQUFDRixZQUFZLENBQUNNLE1BQU0sQ0FBQyxDQUFDSCxJQUFJLENBQUMsV0FB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