{"version":3,"names":["cov_l7pdl3a5t","actualCoverage","Message","s","require","Channel","User","logger","getCachedChannelMessages","cacheChannelMessages","getConnectionMetrics","trackQueryPerformance","ChatService","constructor","f","queryCache","Map","getChannelsBatch","channelIds","b","length","channels","find","id","$in","select","channelMap","channel","set","error","getUsersStatusBatch","userIds","users","nickname","userMap","user","isBanned","isMuted","exists","userId","has","saveMessage","messageData","author","text","type","target","message","save","debug","getChannelHistory","channelId","limit","page","cachedMessages","get","Error","history","aggregate","$match","$sort","timestamp","$limit","$skip","$project","_id","formattedHistory","map","msg","room","catch","warn","getUserChannelHistory","userNickname","$or","sort","joinChannel","socket","io","leave","join","info","connectionMetrics","joinMessage","to","emit","leaveChannel","leaveMessage","sendPublicMessage","data","trim","trimmedText","userStatuses","userStatus","status","connectionStats","activeConnections","activeCount","availableConnections","availableCount","Math","random","sendPrivateMessage","onlineUsers","targetNickname","senderStatus","targetStatus","targetUser","Array","from","values","u","targetSocketId","keys","sender","getOnlineUsers","sockets","roomUsers","filter","role","createSystemMessage","systemMessage","module","exports"],"sources":["chatService.js"],"sourcesContent":["const Message = require('../models/Message');\nconst Channel = require('../models/Channel');\nconst User = require('../models/User');\nconst { logger } = require('../middleware/auth');\nconst {\n  getCachedChannelMessages,\n  cacheChannelMessages,\n  getConnectionMetrics\n} = require('./cacheService');\nconst { trackQueryPerformance } = require('../../db/connection');\n\nclass ChatService {\n  constructor() {\n    this.logger = logger;\n    this.queryCache = new Map(); // Simple in-memory cache for small datasets\n  }\n\n  /**\n   * Optimized method to get channels without N+1 queries\n   * @param {Array} channelIds - Array of channel IDs\n   * @returns {Promise<Map>} - Map of channel objects\n   */\n  async getChannelsBatch(channelIds) {\n    if (!channelIds || channelIds.length === 0) {\n      return new Map();\n    }\n\n    try {\n      const channels = await Channel.find({\n        id: { $in: channelIds }\n      }).select('id name type description');\n\n      // Convert to Map for easy lookup\n      const channelMap = new Map();\n      for (const channel of channels) {\n        channelMap.set(channel.id, channel);\n      }\n\n      return channelMap;\n    } catch (error) {\n      this.logger.error('Error in getChannelsBatch:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Optimized method to check user status (banned/muted) in batch\n   * @param {Array} userIds - Array of user IDs\n   * @returns {Promise<Map>} - Map of user status objects\n   */\n  async getUsersStatusBatch(userIds) {\n    if (!userIds || userIds.length === 0) {\n      return new Map();\n    }\n\n    try {\n      const users = await User.find({\n        nickname: { $in: userIds }\n      }).select('nickname isBanned isMuted');\n\n      const userMap = new Map();\n      for (const user of users) {\n        userMap.set(user.nickname, {\n          isBanned: user.isBanned,\n          isMuted: user.isMuted,\n          exists: true\n        });\n      }\n\n      // Mark non-existent users\n      for (const userId of userIds) {\n        if (!userMap.has(userId)) {\n          userMap.set(userId, {\n            isBanned: false,\n            isMuted: false,\n            exists: false\n          });\n        }\n      }\n\n      return userMap;\n    } catch (error) {\n      this.logger.error('Error in getUsersStatusBatch:', error);\n      throw error;\n    }\n  }\n\n  async saveMessage(messageData) {\n    try {\n      const { author, channel, text, type, target } = messageData;\n\n      const message = new Message({\n        author,\n        channel,\n        text,\n        type: type || 'public',\n        target\n      });\n\n      await message.save();\n\n      this.logger.debug(`Message saved from ${author} in ${channel}`);\n      return message;\n    } catch (error) {\n      this.logger.error('Error saving message:', error);\n      throw error;\n    }\n  }\n\n  async getChannelHistory(channelId, limit = 100, page = 1) {\n    try {\n      // Check cache first\n      const cachedMessages = await getCachedChannelMessages(channelId, page, limit);\n      if (cachedMessages) {\n        this.logger.debug(`Channel history cache hit for ${channelId}`);\n        return cachedMessages;\n      }\n\n      // Verify channel exists (batch operation)\n      const channels = await this.getChannelsBatch([channelId]);\n      const channel = channels.get(channelId);\n\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      // Use aggregation pipeline for optimized query\n      const history = await Message.aggregate([\n        {\n          $match: {\n            channel: channelId,\n            type: { $in: ['public', 'system'] }\n          }\n        },\n        {\n          $sort: { timestamp: -1 }\n        },\n        {\n          $limit: limit * page\n        },\n        {\n          $sort: { timestamp: 1 }\n        },\n        {\n          $skip: (page - 1) * limit\n        },\n        {\n          $project: {\n            _id: 0, // Exclude MongoDB _id\n            author: 1,\n            channel: 1,\n            text: 1,\n            type: 1,\n            target: 1,\n            timestamp: 1\n          }\n        }\n      ]);\n\n      // Format messages for response\n      const formattedHistory = history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      }));\n\n      // Cache the result asynchronously (don't wait)\n      cacheChannelMessages(channelId, formattedHistory, page, limit).catch(error =>\n        this.logger.warn('Failed to cache channel messages:', error.message)\n      );\n\n      this.logger.debug(`Retrieved ${formattedHistory.length} messages for channel ${channelId}`);\n      return formattedHistory;\n    } catch (error) {\n      this.logger.error('Error getting channel history:', error);\n      throw error;\n    }\n  }\n\n  async getUserChannelHistory(channelId, userNickname, limit = 100) {\n    try {\n      const history = await Message.find({\n        channel: channelId,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: userNickname },\n          { target: userNickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(limit)\n        .sort({ timestamp: 1 });\n\n      return history.map(msg => ({\n        author: msg.author,\n        room: msg.channel,\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      }));\n    } catch (error) {\n      this.logger.error('Error getting user channel history:', error);\n      throw error;\n    }\n  }\n\n  async joinChannel(socket, channelId, io) {\n    try {\n      // Optimized: Verify channel exists using batch query (removes N+1)\n      const channels = await this.getChannelsBatch([channelId]);\n      const channel = channels.get(channelId);\n\n      if (!channel) {\n        throw new Error('Channel not found');\n      }\n\n      // Leave previous room\n      if (socket.room) {\n        socket.leave(socket.room);\n      }\n\n      socket.room = channelId;\n      socket.join(socket.room);\n\n      this.logger.info(`User ${socket.nickname} joined room ${socket.room}`, {\n        channelId,\n        connectionMetrics: getConnectionMetrics()\n      });\n\n      // Send system message about joining\n      const joinMessage = new Message({\n        author: 'System',\n        channel: socket.room,\n        text: `${socket.nickname} joined the channel.`,\n        type: 'system'\n      });\n\n      await joinMessage.save();\n\n      io.to(socket.room).emit('message', {\n        author: joinMessage.author,\n        channel: joinMessage.channel,\n        text: joinMessage.text,\n        type: joinMessage.type,\n        timestamp: joinMessage.timestamp\n      });\n\n      // Send message history\n      const history = await this.getUserChannelHistory(channelId, socket.nickname);\n\n      return { channel, history };\n    } catch (error) {\n      this.logger.error('Error joining channel:', error);\n      throw error;\n    }\n  }\n\n  async leaveChannel(socket, io) {\n    try {\n      if (socket.room) {\n        // Create leave message\n        const leaveMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} left the channel.`,\n          type: 'system'\n        });\n        await leaveMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: leaveMessage.author,\n          room: leaveMessage.channel,\n          text: leaveMessage.text,\n          type: leaveMessage.type,\n          timestamp: leaveMessage.timestamp\n        });\n      }\n    } catch (error) {\n      this.logger.error('Error leaving channel:', error);\n      throw error;\n    }\n  }\n\n  async sendPublicMessage(socket, data, io) {\n    try {\n      // Validate input first\n      if (!socket.room || !data.text?.trim()) {\n        throw new Error('Invalid message data');\n      }\n\n      const trimmedText = data.text.trim();\n\n      // Optimized: Check user status in batch (removes N+1 query)\n      const userStatuses = await this.getUsersStatusBatch([socket.nickname]);\n      const userStatus = userStatuses.get(socket.nickname);\n\n      if (!userStatus.exists) {\n        throw new Error('User not found');\n      }\n\n      if (userStatus.isBanned) {\n        throw new Error('You are banned and cannot send messages');\n      }\n\n      if (userStatus.isMuted) {\n        throw new Error('You are muted and cannot send messages');\n      }\n\n      // Use connection monitoring for performance tracking\n      const connectionMetrics = getConnectionMetrics();\n\n      const message = await this.saveMessage({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'public'\n      });\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        status: 'delivered',\n        type: message.type,\n        connectionStats: {\n          activeConnections: connectionMetrics.activeCount,\n          availableConnections: connectionMetrics.availableCount\n        }\n      };\n\n      io.to(socket.room).emit('message', messageData);\n\n      // Log performance metrics occasionally\n      if (Math.random() < 0.1) { // 10% sampling\n        this.logger.info('Message sent performance', {\n          channelId: socket.room,\n          author: socket.nickname,\n          connectionMetrics\n        });\n      }\n\n      return messageData;\n    } catch (error) {\n      this.logger.error('Error sending public message:', error);\n      throw error;\n    }\n  }\n\n  async sendPrivateMessage(socket, data, onlineUsers, io) {\n    try {\n      const trimmedText = data.text.trim();\n      const targetNickname = data.to.trim();\n\n      if (!socket.room || !targetNickname || !trimmedText) {\n        throw new Error('Invalid private message data');\n      }\n\n      // Optimized: Batch check for both sender and target users\n      const userStatuses = await this.getUsersStatusBatch([socket.nickname, targetNickname]);\n      const senderStatus = userStatuses.get(socket.nickname);\n      const targetStatus = userStatuses.get(targetNickname);\n\n      // Validate sender\n      if (!senderStatus.exists) {\n        throw new Error('Sender not found');\n      }\n\n      if (senderStatus.isBanned) {\n        throw new Error('You are banned and cannot send messages');\n      }\n\n      if (senderStatus.isMuted) {\n        throw new Error('You are muted and cannot send messages');\n      }\n\n      // Validate target\n      if (!targetStatus || !targetStatus.exists) {\n        throw new Error('Target user not found');\n      }\n\n      // Validate target nickname format\n      if (targetNickname.length === 0 || targetNickname.length > 50) {\n        throw new Error('Invalid target user nickname');\n      }\n\n      // Prevent self-messaging\n      if (targetNickname === socket.nickname) {\n        throw new Error('Cannot send private message to yourself');\n      }\n\n      // Find target user in same room\n      const targetUser = Array.from(onlineUsers.values()).find(\n        u => u.nickname === targetNickname && u.room === socket.room\n      );\n\n      if (!targetUser) {\n        throw new Error(`User '${targetNickname}' is not available in this channel`);\n      }\n\n      const message = await this.saveMessage({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'private',\n        target: targetNickname\n      });\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: message.target,\n        status: 'delivered'\n      };\n\n      // Find target socket and send message\n      const targetSocketId = Array.from(onlineUsers.keys()).find(\n        id => onlineUsers.get(id).nickname === targetNickname\n      );\n\n      if (targetSocketId) {\n        io.to(targetSocketId).emit('private_message', messageData);\n      }\n\n      // Send confirmation to sender (without target for privacy)\n      socket.emit('private_message', {\n        author: message.author,\n        room: message.room,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: null, // Hide target from sender's confirmation\n        status: 'sent'\n      });\n\n      this.logger.info(`Private message sent successfully`, {\n        sender: socket.nickname,\n        target: targetNickname,\n        room: socket.room\n      });\n\n      return messageData;\n    } catch (error) {\n      this.logger.error('Error sending private message:', error);\n      throw error;\n    }\n  }\n\n  async getOnlineUsers(sockets, room) {\n    try {\n      const roomUsers = Array.from(sockets.values())\n        .filter(u => u.room === room)\n        .map(u => ({ nickname: u.nickname, role: u.role }));\n\n      return roomUsers;\n    } catch (error) {\n      this.logger.error('Error getting online users:', error);\n      return [];\n    }\n  }\n\n  async createSystemMessage(channel, message, io) {\n    try {\n      const systemMessage = await this.saveMessage({\n        author: 'System',\n        channel,\n        text: message,\n        type: 'system'\n      });\n\n      io.to(channel).emit('message', {\n        author: systemMessage.author,\n        channel: systemMessage.channel,\n        text: systemMessage.text,\n        type: systemMessage.type,\n        timestamp: systemMessage.timestamp\n      });\n    } catch (error) {\n      this.logger.error('Error creating system message:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = new ChatService();"],"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","ignoreList":[]}