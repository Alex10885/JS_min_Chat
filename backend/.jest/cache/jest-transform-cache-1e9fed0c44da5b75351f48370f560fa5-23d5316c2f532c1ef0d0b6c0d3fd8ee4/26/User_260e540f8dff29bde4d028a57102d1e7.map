{"version":3,"names":["cov_1055pu2obn","actualCoverage","mongoose","s","require","bcrypt","crypto","userSchema","Schema","nickname","type","String","required","unique","trim","minlength","maxlength","index","email","lowercase","password","role","enum","default","createdAt","Date","now","lastActive","status","resetPasswordToken","resetPasswordExpires","pre","next","f","isModified","b","console","log","salt","genSalt","hash","error","message","methods","comparePassword","candidatePassword","compare","generateResetToken","resetToken","randomBytes","toString","createHash","update","digest","resetPassword","token","newPassword","hashedToken","Error","save","toJSON","userObject","toObject","module","exports","model"],"sources":["User.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst crypto = require('crypto');\n\nconst userSchema = new mongoose.Schema({\n  nickname: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 50,\n    index: true // Remove duplicate index call below\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true,\n    index: true // Remove duplicate index call below\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  role: {\n    type: String,\n    enum: ['admin', 'member'],\n    default: 'member'\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  },\n  lastActive: {\n    type: Date,\n    default: Date.now\n  },\n  status: {\n    type: String,\n    enum: ['online', 'offline'],\n    default: 'offline'\n  },\n  resetPasswordToken: {\n    type: String,\n    default: null\n  },\n  resetPasswordExpires: {\n    type: Date,\n    default: null\n  }\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n   if (!this.isModified('password')) return next();\n\n   console.log('Hashing password for user:', this.nickname);\n   try {\n     const salt = await bcrypt.genSalt(12);\n     console.log('Salt generated:', salt);\n     this.password = await bcrypt.hash(this.password, salt);\n     console.log('Password hashed successfully');\n     next();\n   } catch (error) {\n     console.error('Error hashing password:', error.message);\n     next(error);\n   }\n });\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Generate reset password token\nuserSchema.methods.generateResetToken = function() {\n  // Generate random token\n  const resetToken = crypto.randomBytes(32).toString('hex');\n\n  // Hash token before storing\n  this.resetPasswordToken = crypto\n    .createHash('sha256')\n    .update(resetToken)\n    .digest('hex');\n\n  // Set expiration (1 hour from now)\n  this.resetPasswordExpires = Date.now() + 60 * 60 * 1000; // 1 hour\n\n  return resetToken;\n};\n\n// Reset password using token\nuserSchema.methods.resetPassword = function(token, newPassword) {\n  const hashedToken = crypto\n    .createHash('sha256')\n    .update(token)\n    .digest('hex');\n\n  if (hashedToken !== this.resetPasswordToken) {\n    throw new Error('Invalid or expired password reset token');\n  }\n\n  if (Date.now() > this.resetPasswordExpires) {\n    throw new Error('Password reset token has expired');\n  }\n\n  this.password = newPassword;\n  this.resetPasswordToken = null;\n  this.resetPasswordExpires = null;\n\n  return this.save();\n};\n\n// Remove password from JSON output\nuserSchema.methods.toJSON = function() {\n  const userObject = this.toObject();\n  delete userObject.password;\n  return userObject;\n};\n\nmodule.exports = mongoose.model('User', userSchema);"],"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","ignoreList":[]}