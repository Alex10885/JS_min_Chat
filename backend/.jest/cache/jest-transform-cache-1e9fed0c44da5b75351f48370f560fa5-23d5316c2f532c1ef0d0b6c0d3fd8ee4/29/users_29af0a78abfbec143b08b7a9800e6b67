343c2535fff408f49363f320ed931531
/* istanbul ignore next */
function cov_2c61awv2iu() {
  var path = "/home/raerlim/Chat-JS/backend/src/routes/users.js";
  var hash = "ff02b3b4bcfaafb225c2c6e6e4e39b6c52285fba";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/raerlim/Chat-JS/backend/src/routes/users.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 2,
          column: 45
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 63
        }
      },
      "3": {
        start: {
          line: 4,
          column: 62
        },
        end: {
          line: 4,
          column: 91
        }
      },
      "4": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 57
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 67,
          column: 61
        }
      },
      "7": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 68,
          column: 79
        }
      },
      "8": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 108
        }
      },
      "9": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 77,
          column: 27
        }
      },
      "10": {
        start: {
          line: 80,
          column: 0
        },
        end: {
          line: 80,
          column: 109
        }
      },
      "11": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 86,
          column: 28
        }
      },
      "12": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 91,
          column: 34
        }
      },
      "13": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 96,
          column: 28
        }
      },
      "14": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 99,
          column: 111
        }
      },
      "15": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 101,
          column: 24
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ff02b3b4bcfaafb225c2c6e6e4e39b6c52285fba"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2c61awv2iu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2c61awv2iu();
const express =
/* istanbul ignore next */
(cov_2c61awv2iu().s[0]++, require('express'));
const {
  body
} =
/* istanbul ignore next */
(cov_2c61awv2iu().s[1]++, require('express-validator'));
const userController =
/* istanbul ignore next */
(cov_2c61awv2iu().s[2]++, require('../controllers/userController'));
const {
  authenticateToken,
  requireModerator,
  requireAdmin
} =
/* istanbul ignore next */
(cov_2c61awv2iu().s[3]++, require('../middleware/auth'));
const {
  apiRateLimiter
} =
/* istanbul ignore next */
(cov_2c61awv2iu().s[4]++, require('../config/rateLimit'));
const router =
/* istanbul ignore next */
(cov_2c61awv2iu().s[5]++, express.Router());

/**
 * @swagger
 * /api/users:
 *   get:
 *     tags:
 *       - Users
 *     summary: Get list of all registered users
 *     description: Retrieves a list of all users with their roles and online status
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of users successfully retrieved
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                     description: User's unique identifier
 *                   nickname:
 *                     type: string
 *                     description: User's display name
 *                   role:
 *                     type: string
 *                     enum: [admin, moderator, member]
 *                     description: User's role level
 *                   status:
 *                     type: string
 *                     enum: [online, offline]
 *                     description: User's online status
 *                   createdAt:
 *                     type: string
 *                     format: date-time
 *                     description: User registration date
 *                   lastActive:
 *                     type: string
 *                     format: date-time
 *                     description: Last activity timestamp
 *             example:
 *               - id: "507f1f77bcf86cd799439011"
 *                 nickname: "john_doe"
 *                 role: "member"
 *                 status: "online"
 *                 createdAt: "2024-09-07T10:30:00Z"
 *                 lastActive: "2024-09-07T22:15:00Z"
 *       401:
 *         description: Authentication required
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       500:
 *         description: Server error
 */
/* istanbul ignore next */
cov_2c61awv2iu().s[6]++;
console.log('ðŸ”§ GET /api/users route registered at startup');
/* istanbul ignore next */
cov_2c61awv2iu().s[7]++;
router.get('/', authenticateToken, apiRateLimiter, userController.getAllUsers);

// Administrative routes
/* istanbul ignore next */
cov_2c61awv2iu().s[8]++;
router.get('/admin', authenticateToken, requireModerator, apiRateLimiter, userController.getUsersPaginated);

// Ban user
/* istanbul ignore next */
cov_2c61awv2iu().s[9]++;
router.post('/:userId/ban', authenticateToken, requireModerator, apiRateLimiter, [body('reason').isLength({
  min: 1,
  max: 500
}).trim(), body('duration').optional().isInt({
  min: 1,
  max: 31536000
}) // Max 1 year in seconds
], userController.banUser);

// Unban user
/* istanbul ignore next */
cov_2c61awv2iu().s[10]++;
router.post('/:userId/unban', authenticateToken, requireModerator, apiRateLimiter, userController.unbanUser);

// Warn user
/* istanbul ignore next */
cov_2c61awv2iu().s[11]++;
router.post('/:userId/warn', authenticateToken, requireModerator, apiRateLimiter, [body('reason').isLength({
  min: 1,
  max: 500
}).trim(), body('duration').optional().isInt({
  min: 1,
  max: 31536000
})], userController.warnUser);

// Change user role
/* istanbul ignore next */
cov_2c61awv2iu().s[12]++;
router.post('/:userId/role', authenticateToken, requireAdmin, apiRateLimiter, [body('role').isIn(['member', 'moderator', 'admin'])], userController.changeUserRole);

// Mute user
/* istanbul ignore next */
cov_2c61awv2iu().s[13]++;
router.post('/:userId/mute', authenticateToken, requireModerator, apiRateLimiter, [body('duration').isInt({
  min: 60,
  max: 86400
}) // 1 minute to 24 hours
], userController.muteUser);

// Unmute user
/* istanbul ignore next */
cov_2c61awv2iu().s[14]++;
router.post('/:userId/unmute', authenticateToken, requireModerator, apiRateLimiter, userController.unmuteUser);
/* istanbul ignore next */
cov_2c61awv2iu().s[15]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,