{"version":3,"names":["require","config","express","http","socketIo","jwt","cors","winston","swaggerJsdoc","swaggerUi","helmet","rateLimit","body","validationResult","mongoose","crypto","session","RedisStore","redisManager","connectDB","closeDB","connectionMonitor","emailService","performanceMonitor","apiPerformanceMiddleware","getHealthCheck","getPerformanceDashboard","externalServiceBreaker","circuitBreakerMiddleware","asyncOptimize","protectEmail","getCircuitBreakerStatuses","authService","getCachedStats","getMetrics","authRateLimiter","apiRateLimiter","generalRateLimiter","User","Message","Channel","logger","createLogger","level","format","combine","timestamp","errors","stack","json","defaultMeta","service","transports","File","filename","Console","colorize","simple","app","server","createServer","io","origin","process","env","NODE_ENV","ALLOWED_ORIGINS","split","methods","allowedHeaders","credentials","connectTimeout","pingTimeout","pingInterval","upgradeTimeout","allowUpgrades","cookieHttpOnly","cookieSameSite","engine","on","err","console","log","code","message","error","httpStatus","status","headers","req","use","limit","strict","urlencoded","extended","sessionMiddleware","redisClient","getClient","isClientReady","secret","SESSION_SECRET","resave","saveUninitialized","store","client","prefix","ttl","disableTouch","cookie","secure","httpOnly","maxAge","sameSite","name","rolling","unset","errorHandler","res","next","url","method","ip","userAgent","get","Object","values","map","e","field","path","value","details","keys","keyValue","requestId","id","start","Date","now","duration","info","statusCode","user","nickname","JSON","stringify","undefined","authenticateSession","bind","contentSecurityPolicy","directives","defaultSrc","styleSrc","fontSrc","imgSrc","scriptSrc","connectSrc","crossOriginEmbedderPolicy","swaggerOptions","definition","openapi","title","version","description","contact","servers","components","schemas","type","properties","minLength","maxLength","email","role","enum","default","createdAt","lastActive","required","createdBy","position","RegisterRequest","password","LoginRequest","identifier","AuthResponse","token","$ref","ChannelRequest","ErrorResponse","items","msg","param","location","securitySchemes","bearerAuth","scheme","bearerFormat","security","apis","swaggerSpec","removeHeader","serve","setup","authenticateToken","requireModerator","page","parseInt","query","skip","users","find","select","sort","total","countDocuments","adminId","_id","pagination","pages","Math","ceil","post","isLength","min","max","trim","optional","isInt","isEmpty","array","userId","params","reason","findById","toString","ban","bannedUserId","bannedById","banned","banReason","banExpires","unban","unbannedUserId","unbannedById","warn","save","warnedUserId","warnedById","warning","issuedBy","issuedAt","expires","warningsCount","getActiveWarningsCount","requireAdmin","isIn","newRole","oldRole","changedUserId","changedById","mute","mutedUserId","mutedById","muteExpires","isMuted","unmute","unmutedUserId","unmutedById","totalUsers","length","setHeader","send","authLimiterStore","resetAll","success","toISOString","uptime","checkAlerts","alerts_checked","services","optimization","async_processes","_getActiveHandles","memory_usage","memoryUsage","connection_metrics","performance_metrics","getDetailedStats","circuit_breakers","handleLoginWithSession","escape","isEmail","normalizeEmail","handleRegistrationWithSession","authorization","channels","channelCount","channel","channelId","sockets","onlineUsers","disconnectedCount","socketId","socketData","entries","socket","disconnect","findByIdAndUpdate","disconnectedSockets","sessionId","hasJwtAuth","hasSessionAuth","sessionUser","authenticated","sessionUserId","Promise","resolve","reject","destroy","sessionDestroyed","jwtLogoutResult","sessionLogoutResult","jwtError","sessionError","overallSuccess","Map","userConnections","voiceChannels","request","getHeader","writeHead","end","headersSent","csrfToken","handshake","auth","MongoStoreInstance","sessionData","data","sid","providedCsrfToken","substring","sessionCsrfToken","loginTime","registrationTime","Error","provided","expected","match","connectionCount","newConnectionCount","set","isBanned","emit","updateResult","findOneAndUpdate","$set","new","runValidators","connections","address","cleanupInactiveConnections","timeout","lastHeartbeat","connectionsLeft","catch","delete","setInterval","room","size","updateHeartbeat","heartbeatInterval","connected","clearInterval","retryDatabaseOperation","operation","retries","i","setTimeout","findOne","leave","previousRoomUsers","Array","from","filter","u","to","join","joinMessage","author","text","roomUsers","history","$or","target","currentUser","messageData","debug","trimmedText","targetNickname","senderRoom","senderSocketId","targetUser","targetFound","targetRoom","onlineUsersInRoom","onlineUsersInSenderRoom","availableUsers","targetSocketId","sender","messageId","onlineUsersCount","messageLength","speaking","has","channelPeers","peerConnection","stream","voiceChannel","offer","fromNickname","answer","candidate","currentCount","newCount","leaveMessage","remainingConnections","initializeServer","defaultChannels","channelData","upsert","PORT","listen","exit","close","optimizedInitializeDatabase","concurrency","slowThreshold","global","gc","databaseBreaker","failureCount","promise","circuitStatus","finalMetrics","totalRequests","endpointStats","reduce","acc","endpoint","count","memoryPeak","memory","heapTotal","healthData","getHealthData","requests","averageResponseTime","avgTime","threshold","usagePercent","usage","percentage","database","state","redis","module","exports"],"sources":["server.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst winston = require('winston');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoose = require('mongoose');\n// Import crypto for generating secure tokens\nconst crypto = require('crypto');\nconst session = require('express-session');\nconst RedisStore = require('connect-redis');\nconst { redisManager } = require('./src/config/redis');\nconst { connectDB, closeDB, connectionMonitor } = require('./db/connection');\nconst emailService = require('./services/emailService');\nconst {\n  performanceMonitor,\n  apiPerformanceMiddleware,\n  getHealthCheck,\n  getPerformanceDashboard\n} = require('./src/middleware/performanceMonitor');\nconst {\n  externalServiceBreaker,\n  circuitBreakerMiddleware,\n  asyncOptimize,\n  protectEmail,\n  getCircuitBreakerStatuses\n} = require('./src/middleware/circuitBreaker');\n\n// Import AuthService for extracted authentication logic\nconst authService = require('./src/services/authService');\n\n// Define getCachedStats function for connection metrics\nconst getCachedStats = async () => {\n  return connectionMonitor.getMetrics();\n};\n\n// Extract rate limiters from AuthService\nconst { authRateLimiter, apiRateLimiter, generalRateLimiter } = authService;\n\n// Import models\nconst User = require('./models/User');\nconst Message = require('./models/Message');\nconst Channel = require('./models/Channel');\n\n// Logger setup\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'chat-server' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/server.log' }),\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\nconst app = express();\nconst server = http.createServer(app);\n\n// Rate limiters are now handled by AuthService\nconst io = socketIo(server, {\n  cors: {\n    origin: process.env.NODE_ENV === 'production'\n      ? process.env.ALLOWED_ORIGINS?.split(',') || false\n      : [\"http://localhost:3003\", \"http://localhost:3000\"],\n    methods: [\"GET\", \"POST\"],\n    allowedHeaders: [\"authorization\", \"content-type\"],\n    credentials: true\n  },\n  // Ensure both transports are supported\n  transports: ['websocket', 'polling'],\n  // Connection settings for better reliability\n  connectTimeout: 20000, // 20 seconds\n  pingTimeout: 5000, // 5 seconds for ping\n  pingInterval: 10000, // 10 seconds between pings\n  upgradeTimeout: 10000,\n  allowUpgrades: true,\n  cookieHttpOnly: true,\n  cookieSameSite: 'lax'\n});\n\n// Log socket connection errors for debugging\nio.engine.on('connection_error', (err) => {\n  console.log('🔌 Socket engine connection error:', err.code, err.message);\n  logger.error('Socket connection error:', {\n    code: err.code,\n    message: err.message,\n    httpStatus: err.status,\n    headers: err.req?.headers\n  });\n});\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production'\n    ? process.env.ALLOWED_ORIGINS?.split(',') || false\n    : true,\n  credentials: true\n}));\n\napp.use(express.json({ limit: '20mb', strict: false })); // Increased limit and disabled strict parsing for better error tolerance\napp.use(express.urlencoded({ extended: true, limit: '20mb' })); // Handle form data with increased limit\n\n// Session configuration with Redis store for enhanced performance\nlet sessionMiddleware;\ntry {\n  const redisClient = redisManager.getClient();\n  if (redisClient && redisManager.isClientReady()) {\n    sessionMiddleware = session({\n      secret: process.env.SESSION_SECRET || 'your-very-long-secure-secret-key-change-in-production',\n      resave: false,\n      saveUninitialized: false,\n      store: new RedisStore({\n        client: redisClient,\n        prefix: 'sess:',\n        ttl: 86400, // 24 hours\n        disableTouch: false // Allow automatic touch\n      }),\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        maxAge: 24 * 60 * 60 * 1000,\n        sameSite: 'lax'\n      },\n      name: 'chatSession',\n      rolling: false,\n      unset: 'destroy'\n    });\n    console.log('✅ Redis session store initialized successfully');\n  } else {\n    // Fallback to memory store if Redis is not available\n    console.log('⚠️ Redis not available, using memory-based session store');\n    sessionMiddleware = session({\n      secret: process.env.SESSION_SECRET || 'your-very-long-secure-secret-key-change-in-production',\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        maxAge: 24 * 60 * 60 * 1000,\n        sameSite: 'lax'\n      },\n      name: 'chatSession',\n      rolling: false,\n      unset: 'destroy'\n    });\n  }\n} catch (error) {\n  console.log('❌ Redis session store initialization failed, using memory store:', error.message);\n  sessionMiddleware = session({\n    secret: process.env.SESSION_SECRET || 'your-very-long-secure-secret-key-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000,\n      sameSite: 'lax'\n    },\n    name: 'chatSession',\n    rolling: false,\n    unset: 'destroy'\n  });\n}\n\napp.use(sessionMiddleware);\n\n// Error handling middleware\nconst errorHandler = (err, req, res, next) => {\n  logger.error('Unhandled error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  // Mongoose validation errors\n  if (err.name === 'ValidationError') {\n    const errors = Object.values(err.errors).map(e => ({\n      field: e.path,\n      message: e.message,\n      value: e.value\n    }));\n\n    return res.status(422).json({\n      error: 'Validation failed',\n      details: errors,\n      code: 'VALIDATION_ERROR'\n    });\n  }\n\n  // Mongoose duplicate key error\n  if (err.code === 11000) {\n    const field = Object.keys(err.keyValue)[0];\n    const value = err.keyValue[field];\n    return res.status(409).json({\n      error: `${field} '${value}' already exists`,\n      code: 'DUPLICATE_ERROR'\n    });\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      error: 'Invalid or expired token',\n      code: 'INVALID_TOKEN'\n    });\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      error: 'Token has expired',\n      code: 'TOKEN_EXPIRED'\n    });\n  }\n\n  // Default server error\n  res.status(500).json({\n    error: 'Internal server error',\n    code: 'INTERNAL_ERROR',\n    requestId: req.id || 'unknown'\n  });\n};\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    logger.info(`${req.method} ${req.url} - ${res.statusCode} (${duration}ms)`, {\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      user: req.user?.nickname || 'anonymous',\n      body: req.method !== 'GET' ? JSON.stringify(req.body) : undefined\n    });\n  });\n\n  next();\n});\n\n// Session authentication middleware now uses AuthService\n\n// JWT authentication middleware now uses AuthService\n\n// Role-based access control middleware now uses AuthService\n\n// Error handling middleware\n\n// Use AuthService session authentication middleware\napp.use(authService.authenticateSession.bind(authService));\n\n// General rate limiting (applied to all HTTP requests) - using AuthService\napp.use(authService.generalRateLimiter);\n\n// Performance monitoring middleware\napp.use(apiPerformanceMiddleware());\n\n// Helmet security headers\napp.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        connectSrc: [\"'self'\"]\n      }\n    },\n    crossOriginEmbedderPolicy: false\n  })\n);\n\n// Swagger configuration\nconst swaggerOptions = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Chat-JS API',\n      version: '1.0.0',\n      description: 'REST API for Chat-JS application with real-time messaging and voice channels',\n      contact: {\n        name: 'Chat-JS Support'\n      }\n    },\n    servers: [\n      {\n        url: 'http://localhost:3001',\n        description: 'Development server'\n      }\n    ],\n    components: {\n      schemas: {\n        User: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'User unique identifier'\n            },\n            nickname: {\n              type: 'string',\n              description: 'User nickname',\n              minLength: 3,\n              maxLength: 50\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'User email address'\n            },\n            role: {\n              type: 'string',\n              enum: ['admin', 'member'],\n              default: 'member',\n              description: 'User role'\n            },\n            createdAt: {\n              type: 'string',\n              format: 'date-time',\n              description: 'User creation timestamp'\n            },\n            lastActive: {\n              type: 'string',\n              format: 'date-time',\n              description: 'Last activity timestamp'\n            },\n            status: {\n              type: 'string',\n              enum: ['online', 'offline'],\n              description: 'User online status'\n            }\n          },\n          required: ['nickname', 'email', 'password', 'role']\n        },\n        Channel: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Channel unique identifier (auto-generated from name)'\n            },\n            name: {\n              type: 'string',\n              description: 'Channel display name',\n              minLength: 1,\n              maxLength: 100\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              description: 'Channel description',\n              maxLength: 500\n            },\n            createdBy: {\n              type: 'string',\n              description: 'Creator nickname'\n            },\n            position: {\n              type: 'number',\n              default: 0,\n              description: 'Channel display position'\n            }\n          },\n          required: ['id', 'name', 'type', 'createdBy']\n        },\n        RegisterRequest: {\n          type: 'object',\n          required: ['nickname', 'email', 'password'],\n          properties: {\n            nickname: {\n              type: 'string',\n              minLength: 3,\n              maxLength: 50,\n              description: 'Unique username'\n            },\n            email: {\n              type: 'string',\n              format: 'email',\n              description: 'Valid email address'\n            },\n            password: {\n              type: 'string',\n              minLength: 6,\n              description: 'User password'\n            }\n          }\n        },\n        LoginRequest: {\n          type: 'object',\n          required: ['identifier', 'password'],\n          properties: {\n            identifier: {\n              type: 'string',\n              description: 'Username or email'\n            },\n            password: {\n              type: 'string',\n              description: 'User password'\n            }\n          }\n        },\n        AuthResponse: {\n          type: 'object',\n          properties: {\n            token: {\n              type: 'string',\n              description: 'JWT access token'\n            },\n            user: {\n              $ref: '#/components/schemas/User'\n            }\n          }\n        },\n        ChannelRequest: {\n          type: 'object',\n          required: ['name', 'type'],\n          properties: {\n            name: {\n              type: 'string',\n              minLength: 1,\n              maxLength: 100,\n              description: 'Channel display name'\n            },\n            type: {\n              type: 'string',\n              enum: ['text', 'voice'],\n              description: 'Channel type'\n            },\n            description: {\n              type: 'string',\n              maxLength: 500,\n              description: 'Optional channel description'\n            }\n          }\n        },\n        ErrorResponse: {\n          type: 'object',\n          properties: {\n            error: {\n              type: 'string',\n              description: 'Error message'\n            },\n            errors: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  msg: { type: 'string' },\n                  param: { type: 'string' },\n                  location: { type: 'string' }\n                }\n              },\n              description: 'Validation errors array'\n            }\n          }\n        }\n      },\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT'\n        }\n      }\n    },\n    security: [\n      {\n        bearerAuth: []\n      }\n    ]\n  },\n  apis: ['./server.js'] // Path to the API routes\n};\n\nconst swaggerSpec = swaggerJsdoc(swaggerOptions);\n\n// Swagger UI with CSP disabled for this route\napp.use('/api-docs', (req, res, next) => {\n  // Disable CSP for Swagger UI\n  res.removeHeader('Content-Security-Policy');\n  next();\n}, swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n// Administrative endpoints - require moderator privileges\nconsole.log('🔧 Administrative API endpoints registered at startup');\n\n// GET /api/admin/users - List all users with moderation info\napp.get('/api/admin/users', authService.authenticateToken.bind(authService), authService.requireModerator.bind(authService), authService.apiRateLimiter, async (req, res) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 50;\n    const skip = (page - 1) * limit;\n\n    const users = await User.find({})\n      .select('-password -resetPasswordToken -resetPasswordExpires -moderationToken -moderationTokenExpires')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await User.countDocuments();\n\n    logger.info(`Admin user list requested by ${req.user.nickname}`, {\n      adminId: req.user._id,\n      page,\n      limit,\n      total\n    });\n\n    res.json({\n      users,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    logger.error('Error fetching users for admin:', error);\n    res.status(500).json({ error: 'Failed to fetch users', code: 'DATABASE_ERROR' });\n  }\n});\n\n// POST /api/admin/users/:userId/ban - Ban a user\napp.post('/api/admin/users/:userId/ban', authService.authenticateToken.bind(authService), authService.requireModerator.bind(authService), authService.apiRateLimiter, [\n  body('reason').isLength({ min: 1, max: 500 }).trim(),\n  body('duration').optional().isInt({ min: 1, max: 31536000 }) // Max 1 year in seconds\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { reason, duration } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Prevent banning yourself\n    if (user._id.toString() === req.user._id.toString()) {\n      return res.status(400).json({ error: 'Cannot ban yourself' });\n    }\n\n    // Prevent non-admin from banning admin\n    if (user.role === 'admin' && req.user.role !== 'admin') {\n      return res.status(403).json({ error: 'Cannot ban administrator' });\n    }\n\n    await user.ban(reason, duration, req.user._id);\n\n    logger.info(`User ${user.nickname} banned by ${req.user.nickname}`, {\n      bannedUserId: userId,\n      bannedById: req.user._id,\n      reason,\n      duration\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been banned`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        banned: true,\n        banReason: reason,\n        banExpires: user.banExpires\n      }\n    });\n  } catch (error) {\n    logger.error('Error banning user:', error);\n    res.status(500).json({ error: 'Failed to ban user' });\n  }\n});\n\n// POST /api/admin/users/:userId/unban - Unban a user\napp.post('/api/admin/users/:userId/unban', authService.authenticateToken.bind(authService), authService.requireModerator.bind(authService), apiRateLimiter, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    if (!user.banned) {\n      return res.status(400).json({ error: 'User is not banned' });\n    }\n\n    await user.unban();\n\n    logger.info(`User ${user.nickname} unbanned by ${req.user.nickname}`, {\n      unbannedUserId: userId,\n      unbannedById: req.user._id\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been unbanned`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        banned: false\n      }\n    });\n  } catch (error) {\n    logger.error('Error unbanning user:', error);\n    res.status(500).json({ error: 'Failed to unban user' });\n  }\n});\n\n// POST /api/admin/users/:userId/warn - Issue warning to user\napp.post('/api/admin/users/:userId/warn', authService.authenticateToken.bind(authService), authService.requireModerator.bind(authService), apiRateLimiter, [\n  body('reason').isLength({ min: 1, max: 500 }).trim(),\n  body('duration').optional().isInt({ min: 1, max: 31536000 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { reason, duration } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    await user.warn(reason, req.user._id, duration);\n    await user.save();\n\n    logger.info(`Warning issued to user ${user.nickname} by ${req.user.nickname}`, {\n      warnedUserId: userId,\n      warnedById: req.user._id,\n      reason,\n      duration\n    });\n\n    res.json({\n      message: `Warning issued to user ${user.nickname}`,\n      warning: {\n        reason,\n        issuedBy: req.user.nickname,\n        issuedAt: new Date(),\n        expires: duration ? new Date(Date.now() + duration) : null\n      },\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        warningsCount: user.getActiveWarningsCount()\n      }\n    });\n  } catch (error) {\n    logger.error('Error warning user:', error);\n    res.status(500).json({ error: 'Failed to warn user' });\n  }\n});\n\n// POST /api/admin/users/:userId/role - Change user role\napp.post('/api/admin/users/:userId/role', authService.authenticateToken.bind(authService), authService.requireAdmin.bind(authService), apiRateLimiter, [\n  body('role').isIn(['member', 'moderator', 'admin'])\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { role: newRole } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Prevent modifying your own role in potentially problematic ways\n    if (user._id.toString() === req.user._id.toString()) {\n      return res.status(400).json({ error: 'Cannot modify your own role' });\n    }\n\n    // Prevent non-admin from promoting to admin or demoting admin\n    if ((newRole === 'admin' || user.role === 'admin') && req.user.role !== 'admin') {\n      return res.status(403).json({ error: 'Only administrators can manage admin roles' });\n    }\n\n    const oldRole = user.role;\n    user.role = newRole;\n    await user.save();\n\n    logger.info(`User ${user.nickname} role changed from ${oldRole} to ${newRole} by ${req.user.nickname}`, {\n      changedUserId: userId,\n      changedById: req.user._id,\n      oldRole,\n      newRole\n    });\n\n    res.json({\n      message: `User ${user.nickname} role changed to ${newRole}`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        role: newRole\n      }\n    });\n  } catch (error) {\n    logger.error('Error changing user role:', error);\n    res.status(500).json({ error: 'Failed to change user role' });\n  }\n});\n\n// POST /api/admin/users/:userId/mute - Mute user\napp.post('/api/admin/users/:userId/mute', authService.authenticateToken.bind(authService), authService.requireModerator.bind(authService), apiRateLimiter, [\n  body('duration').isInt({ min: 60, max: 86400 }) // 1 minute to 24 hours\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { userId } = req.params;\n    const { duration } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    await user.mute(duration);\n\n    logger.info(`User ${user.nickname} muted by ${req.user.nickname}`, {\n      mutedUserId: userId,\n      mutedById: req.user._id,\n      duration\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been muted`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        muteExpires: user.muteExpires\n      }\n    });\n  } catch (error) {\n    logger.error('Error muting user:', error);\n    res.status(500).json({ error: 'Failed to mute user' });\n  }\n});\n\n// POST /api/admin/users/:userId/unmute - Unmute user\napp.post('/api/admin/users/:userId/unmute', authService.authenticateToken.bind(authService), authService.requireModerator.bind(authService), apiRateLimiter, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    if (!user.isMuted()) {\n      return res.status(400).json({ error: 'User is not muted' });\n    }\n\n    await user.unmute();\n\n    logger.info(`User ${user.nickname} unmuted by ${req.user.nickname}`, {\n      unmutedUserId: userId,\n      unmutedById: req.user._id\n    });\n\n    res.json({\n      message: `User ${user.nickname} has been unmuted`,\n      user: {\n        id: user._id,\n        nickname: user.nickname,\n        muteExpires: null\n      }\n    });\n  } catch (error) {\n    logger.error('Error unmuting user:', error);\n    res.status(500).json({ error: 'Failed to unmute user' });\n  }\n});\n\n/**\n * @swagger\n * /api/users:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get list of all registered users\n *     description: Retrieves a list of all users with their roles and online status\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of users successfully retrieved\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   id:\n *                     type: string\n *                     description: User's unique identifier\n *                   nickname:\n *                     type: string\n *                     description: User's display name\n *                   role:\n *                     type: string\n *                     enum: [admin, moderator, member]\n *                     description: User's role level\n *                   status:\n *                     type: string\n *                     enum: [online, offline]\n *                     description: User's online status\n *                   createdAt:\n *                     type: string\n *                     format: date-time\n *                     description: User registration date\n *                   lastActive:\n *                     type: string\n *                     format: date-time\n *                     description: Last activity timestamp\n *             example:\n *               - id: \"507f1f77bcf86cd799439011\"\n *                 nickname: \"john_doe\"\n *                 role: \"member\"\n *                 status: \"online\"\n *                 createdAt: \"2024-09-07T10:30:00Z\"\n *                 lastActive: \"2024-09-07T22:15:00Z\"\n *       401:\n *         description: Authentication required\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       500:\n *         description: Server error\n */\nconsole.log('🔧 GET /api/users route registered at startup');\napp.get('/api/users', authService.authenticateToken.bind(authService), apiRateLimiter, async (req, res) => {\n  try {\n    const users = await User.find({})\n      .select('_id nickname role status createdAt lastActive')\n      .sort({ nickname: 1 });\n\n    logger.info(`Users list requested by ${req.user.nickname}`, {\n      userId: req.user._id,\n      totalUsers: users.length\n    });\n\n    console.log('📤 Returning users data:', users.length);\n    res.json(users);\n  } catch (error) {\n    logger.error('Error fetching users:', error);\n    console.error('❌ Error in GET /api/users:', error.message);\n    res.status(500).json({ error: 'Failed to fetch users', code: 'DATABASE_ERROR' });\n  }\n});\n\n// Swagger JSON endpoint\napp.get('/api-docs.json', (req, res) => {\n  res.removeHeader('Content-Security-Policy');\n  res.setHeader('Content-Type', 'application/json');\n  res.send(swaggerSpec);\n});\n\n// Development and test endpoint to reset rate limiting\napp.post('/api/reset-ratelimit', (req, res) => {\n  // In a real application, you'd want to get the store from the limiter instance\n  // For express-rate-limit v7+, you can access the store like this:\n  try {\n    const authLimiterStore = authRateLimiter.store;\n    if (authLimiterStore && typeof authLimiterStore.resetAll === 'function') {\n      authLimiterStore.resetAll();\n      console.log('🔄 Rate limiting reset for testing purposes');\n      res.json({ success: true, message: 'Rate limiting has been reset' });\n    } else {\n      // If store doesn't expose resetAll, create a temporary workaround\n      console.log('⚠️ Rate limiter store doesn\\'t support resetAll - rate limiting will expire naturally');\n      res.json({ success: false, message: 'Cannot reset rate limiting automatically, wait for timeout' });\n    }\n  } catch (error) {\n    console.log('❌ Error resetting rate limiting:', error.message);\n    res.status(500).json({ success: false, error: 'Failed to reset rate limiting' });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Performance monitoring endpoints\napp.get('/api/health/detailed', getHealthCheck);\n\napp.get('/api/performance/dashboard', (req, res) => {\n  // Check if user is admin/moderator\n  if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'moderator')) {\n    return res.status(403).json({ error: 'Admin access required' });\n  }\n  getPerformanceDashboard(req, res);\n});\n\n// Performance alerts endpoint\napp.get('/api/performance/alerts', (req, res) => {\n  if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'moderator')) {\n    return res.status(403).json({ error: 'Admin access required' });\n  }\n\n  // Run alerts check\n  performanceMonitor.checkAlerts();\n\n  res.json({\n    timestamp: new Date().toISOString(),\n    alerts_checked: true,\n    message: 'Performance alerts checked - see server logs for any alerts'\n  });\n});\n\n// Circuit breaker status endpoint\napp.get('/api/circuit-breaker/status', (req, res) => {\n  if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'moderator')) {\n    return res.status(403).json({ error: 'Admin access required' });\n  }\n\n  const status = getCircuitBreakerStatuses();\n  res.json({\n    timestamp: new Date().toISOString(),\n    services: status\n  });\n});\n\n// Resource usage optimization endpoint\napp.get('/api/optimization/status', async (req, res) => {\n  if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'moderator')) {\n    return res.status(403).json({ error: 'Admin access required' });\n  }\n\n  try {\n    const optimization = {\n      timestamp: new Date().toISOString(),\n      async_processes: process._getActiveHandles().length,\n      memory_usage: process.memoryUsage(),\n      connection_metrics: getCachedStats ? await getCachedStats() : {},\n      performance_metrics: performanceMonitor.getDetailedStats ? performanceMonitor.getDetailedStats() : {},\n      circuit_breakers: getCircuitBreakerStatuses()\n    };\n\n    res.json(optimization);\n  } catch (error) {\n    logger.error('Error getting optimization status:', error);\n    res.status(500).json({ error: 'Failed to get optimization status', message: error.message });\n  }\n});\n\n// Log middleware to check incoming requests\napp.use((req, res, next) => {\n  logger.info(`🔍 Incoming request: ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    headers: req.headers\n  });\n  next();\n});\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n   * @swagger\n   * /api/login:\n   *   post:\n   *     tags:\n   *       - Authentication\n   *     summary: Login existing user\n   *     description: Authenticates and logs in an existing user with JWT token\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             $ref: '#/components/schemas/LoginRequest'\n   *     responses:\n   *       200:\n   *         description: Login successful\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/AuthResponse'\n   *             example:\n   *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n   *               user:\n   *                 id: \"507f1f77bcf86cd799439011\"\n   *                 nickname: \"john_doe\"\n   *                 email: \"john@example.com\"\n   *                 role: \"member\"\n   *       400:\n   *         description: Invalid credentials or validation errors\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/ErrorResponse'\n   *             example:\n   *               error: \"Invalid credentials\"\n   *       500:\n   *         description: Server error\n   */\nconsole.log('🔧 POST /api/login route registered at startup');\napp.post('/api/login', [\n  body('identifier').isLength({ min: 1, max: 50 }).trim(),\n  body('password').isLength({ min: 6, max: 100 })\n], async (req, res) => {\n  // Use AuthService for login handling\n  await authService.handleLoginWithSession(req.body.identifier, req.body.password, req, res);\n});\n\n/**\n   * @swagger\n   * /api/register:\n  *   post:\n  *     tags:\n  *       - Authentication\n  *     summary: Register new user\n  *     description: Creates a new user account and returns JWT token\n  *     requestBody:\n  *       required: true\n  *       content:\n  *         application/json:\n  *           schema:\n  *             $ref: '#/components/schemas/RegisterRequest'\n  *           example:\n  *             nickname: \"john_doe\"\n  *             email: \"john@example.com\"\n  *             password: \"securePass123\"\n  *     responses:\n  *       201:\n  *         description: Registration successful\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/AuthResponse'\n  *             example:\n  *               token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n  *               user:\n  *                 id: \"507f1f77bcf86cd799439011\"\n  *                 nickname: \"john_doe\"\n  *                 email: \"john@example.com\"\n  *                 role: \"member\"\n  *       400:\n  *         description: Validation errors or user already exists\n  *         content:\n  *           application/json:\n  *             schema:\n  *               $ref: '#/components/schemas/ErrorResponse'\n  *             example:\n  *               error: \"Nickname already taken\"\n  *       500:\n  *         description: Server error\n  */\napp.post('/api/register', authService.authRateLimiter, [\n  body('nickname').isLength({ min: 3, max: 50 }).trim().escape(),\n  body('email').isEmail().normalizeEmail(),\n  body('password').isLength({ min: 6 })\n], async (req, res) => {\n  // Use AuthService for registration handling\n  await authService.handleRegistrationWithSession(req.body, req, res);\n});\n\n/**\n * @swagger\n * /api/channels:\n *   get:\n *     tags:\n *       - Channels\n *     summary: Get list of channels\n *     description: Retrieves a list of all available channels\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of channels\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Channel'\n *             example:\n *               - id: \"general\"\n *                 name: \"General\"\n *                 type: \"text\"\n *                 description: \"\"\n *                 createdBy: \"system\"\n *                 position: 0\n *       401:\n *         description: Unauthorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *             example:\n *               error: \"Access token required\"\n *       500:\n *         description: Internal server error\n */\nconsole.log('🔧 GET /api/channels route registered at startup');\napp.get('/api/channels', authService.authenticateToken.bind(authService), apiRateLimiter, async (req, res) => {\n  console.log('🚀 GET /api/channels endpoint called', { method: req.method, url: req.url, headers: req.headers.authorization ? 'auth header present' : 'no auth header' });\n  try {\n    const channels = await Channel.find({})\n      .select('-_id id name type description createdBy position')\n      .sort({ position: 1 });\n\n    logger.info(`Channels list requested by ${req.user.nickname}`, {\n      userId: req.user._id,\n      channelCount: channels.length\n    });\n\n    console.log('📤 Returning channels data:', channels.length);\n    res.json(channels);\n  } catch (error) {\n    logger.error('Error fetching channels:', error);\n    console.error('❌ Error in GET /api/channels:', error.message);\n    res.status(500).json({ error: 'Failed to fetch channels', code: 'DATABASE_ERROR' });\n  }\n});\n\nconsole.log('🔧 POST /api/channels route registered at startup');\n\n/**\n * @swagger\n * /api/channels:\n *   post:\n *     tags:\n *       - Channels\n *     summary: Create a new channel\n *     description: Creates a new text or voice channel\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/ChannelRequest'\n *           example:\n *             name: \"NewChannel\"\n *             type: \"text\"\n *             description: \"Description of the new channel\"\n *     responses:\n *       201:\n *         description: Channel created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Channel'\n *             example:\n *               id: \"newchannel\"\n *               name: \"NewChannel\"\n *               type: \"text\"\n *               description: \"Description of the new channel\"\n *               createdBy: \"john_doe\"\n *               position: 10\n *       400:\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       401:\n *         description: Unauthorized\n *       409:\n *         description: Channel name already exists\n *       500:\n *         description: Server error\n */\napp.post('/api/channels', authService.authenticateToken.bind(authService), apiRateLimiter, [\n  body('name').isLength({ min: 1, max: 100 }).trim().escape(),\n  body('type').isIn(['text', 'voice']).trim(),\n  body('description').optional().isLength({ max: 500 }).trim()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { name, type, description } = req.body;\n    const createdBy = req.user.nickname;\n\n    // Create new channel (ID will be auto-generated in pre-save middleware)\n    const channel = new Channel({\n      name,\n      type,\n      description,\n      createdBy\n    });\n\n    await channel.save();\n\n    logger.info(`Channel '${name}' created by ${createdBy}`, {\n      channelId: channel.id,\n      type,\n      userId: req.user._id\n    });\n\n    res.status(201).json({\n      id: channel.id,\n      name: channel.name,\n      type: channel.type,\n      description: channel.description,\n      createdBy: channel.createdBy,\n      position: channel.position\n    });\n\n  } catch (error) {\n    logger.error('Error creating channel:', error);\n\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({\n        error: 'Invalid channel data',\n        details: error.message\n      });\n    }\n\n    if (error.code === 11000) {\n      return res.status(409).json({\n        error: 'Channel name already exists',\n        code: 'DUPLICATE_CHANNEL'\n      });\n    }\n\n    res.status(500).json({\n      error: 'Failed to create channel',\n      code: 'DATABASE_ERROR'\n    });\n  }\n});\n\nconsole.log('🔧 POST /api/logout route registered at startup');\napp.post('/api/logout', authService.authenticateToken.bind(authService), apiRateLimiter, async (req, res) => {\n  try {\n    console.log('🚪 Logout request from user:', req.user.nickname, { userId: req.user._id });\n\n    // Disconnect all Socket.IO connections for this user\n    const sockets = onlineUsers;\n    let disconnectedCount = 0;\n    for (const [socketId, socketData] of sockets.entries()) {\n      if (socketData.userId === req.user._id.toString()) {\n        const socket = io.sockets.sockets.get(socketId);\n        if (socket) {\n          socket.disconnect();\n          disconnectedCount++;\n        }\n      }\n    }\n\n    // Update user status to offline\n    await User.findByIdAndUpdate(req.user._id, {\n      status: 'offline',\n      lastActive: new Date()\n    });\n\n    console.log(`✅ User ${req.user.nickname} logged out successfully, ${disconnectedCount} connections disconnected`);\n    logger.info(`User logged out: ${req.user.nickname}`, {\n      userId: req.user._id,\n      disconnectedSockets: disconnectedCount\n    });\n\n    res.json({\n      success: true,\n      message: 'Logged out successfully',\n      disconnectedCount\n    });\n  } catch (error) {\n    logger.error('Logout error:', error);\n    res.status(500).json({ error: 'Server error during logout' });\n  }\n});\n\n/**\n * Session logout endpoint - destroys session\n * This complements JWT logout to handle session-based authentication\n */\napp.post('/api/logout_session', apiRateLimiter, async (req, res) => {\n  try {\n    console.log('🚪 Session logout request, sessionId:', req.sessionId);\n\n    // Check if there's an authenticated session or JWT user\n    const hasJwtAuth = !!req.user; // From JWT middleware\n    const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n    const sessionUserId = req.session && req.session.userId;\n\n    console.log('🤔 Session logout check:', {\n      hasJwtAuth,\n      hasSessionAuth,\n      sessionUserId,\n      sessionId: req.sessionId\n    });\n\n    if (hasSessionAuth) {\n      const sessionUser = sessionUserId ? await User.findById(sessionUserId) : null;\n      const nickname = sessionUser ? sessionUser.nickname : 'unknown';\n\n      console.log('✅ Session logout: Destroying session for user:', nickname);\n\n      // Disconnect Socket.IO connections for this session user\n      if (sessionUserId) {\n        const sockets = onlineUsers;\n        let disconnectedCount = 0;\n        for (const [socketId, socketData] of sockets.entries()) {\n          if (socketData.userId === sessionUserId) {\n            const socket = io.sockets.sockets.get(socketId);\n            if (socket) {\n              socket.disconnect();\n              disconnectedCount++;\n            }\n          }\n        }\n\n        console.log(`🗑️ Session logout: Disconnected ${disconnectedCount} socket connections`);\n      }\n\n      // Destroy the session\n      await new Promise((resolve, reject) => {\n        req.session.destroy((err) => {\n          if (err) {\n            console.error('❌ Session destroy error:', err);\n            reject(err);\n          } else {\n            console.log('✅ Session destroyed successfully');\n            resolve();\n          }\n        });\n      });\n\n      logger.info(`Session logged out: ${nickname}`, {\n        sessionId: req.sessionId,\n        ip: req.ip\n      });\n\n      res.json({\n        success: true,\n        message: 'Session logged out successfully',\n        type: 'session_logout',\n        sessionDestroyed: true\n      });\n    } else {\n      console.log('⚠️ Session logout: No authenticated session to destroy');\n      res.json({\n        success: true,\n        message: 'No active session to log out',\n        type: 'session_logout',\n        sessionDestroyed: false\n      });\n    }\n\n  } catch (error) {\n    logger.error('Session logout error:', error);\n    res.status(500).json({\n      error: 'Server error during session logout',\n      code: 'SESSION_LOGOUT_ERROR'\n    });\n  }\n});\n\n// Hybrid logout endpoint - handles both JWT and session logout\napp.post('/api/logout_complete', apiRateLimiter, async (req, res) => {\n  try {\n    console.log('🚪 Complete logout request (JWT + Session), sessionId:', req.sessionId);\n\n    const hasJwtAuth = !!req.user;\n    const hasSessionAuth = req.sessionUser || (req.session && req.session.authenticated);\n    const sessionUserId = req.session && req.session.userId;\n\n    let jwtLogoutResult = null;\n    let sessionLogoutResult = null;\n\n    // Handle JWT logout if JWT is provided\n    if (hasJwtAuth) {\n      try {\n        const sockets = onlineUsers;\n        let disconnectedCount = 0;\n        for (const [socketId, socketData] of sockets.entries()) {\n          if (socketData.userId === req.user._id.toString()) {\n            const socket = io.sockets.sockets.get(socketId);\n            if (socket) {\n              socket.disconnect();\n              disconnectedCount++;\n            }\n          }\n        }\n\n        await User.findByIdAndUpdate(req.user._id, {\n          status: 'offline',\n          lastActive: new Date()\n        });\n\n        jwtLogoutResult = {\n          success: true,\n          disconnectedCount\n        };\n      } catch (jwtError) {\n        jwtLogoutResult = {\n          success: false,\n          error: jwtError.message\n        };\n      }\n    }\n\n    // Handle session logout if session exists\n    if (hasSessionAuth) {\n      try {\n        if (sessionUserId) {\n          const sessionUser = await User.findById(sessionUserId);\n          console.log('✅ Session logout: Destroying session for user:', sessionUser ? sessionUser.nickname : 'unknown');\n\n          // Disconnect Socket.IO connections for this session user\n          const sockets = onlineUsers;\n          let disconnectedCount = 0;\n          for (const [socketId, socketData] of sockets.entries()) {\n            if (socketData.userId === sessionUserId) {\n              const socket = io.sockets.sockets.get(socketId);\n              if (socket) {\n                socket.disconnect();\n                disconnectedCount++;\n              }\n            }\n          }\n          console.log(`🗑️ Session logout: Disconnected ${disconnectedCount} socket connections`);\n        }\n\n        // Destroy the session\n        await new Promise((resolve, reject) => {\n          req.session.destroy((err) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        });\n\n        sessionLogoutResult = {\n          success: true,\n          sessionDestroyed: true\n        };\n      } catch (sessionError) {\n        sessionLogoutResult = {\n          success: false,\n          error: sessionError.message\n        };\n      }\n    }\n\n    const overallSuccess = (!jwtLogoutResult || jwtLogoutResult.success) &&\n                          (!sessionLogoutResult || sessionLogoutResult.success);\n\n    res.json({\n      success: overallSuccess,\n      message: 'Complete logout processed',\n      type: 'complete_logout',\n      jwt: jwtLogoutResult,\n      session: sessionLogoutResult\n    });\n\n  } catch (error) {\n    logger.error('Complete logout error:', error);\n    res.status(500).json({\n      error: 'Server error during complete logout',\n      code: 'COMPLETE_LOGOUT_ERROR'\n    });\n  }\n});\n\n//  404 handler (must be before global error handler)\napp.use((req, res) => {\n  console.warn('❌ Final 404 handler executed - route not found!', { method: req.method, url: req.url });\n  logger.warn(`404 - ${req.method} ${req.url}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  res.status(404).json({\n    error: 'Endpoint not found',\n    path: req.url,\n    method: req.method,\n    code: 'NOT_FOUND'\n  });\n});\n\n// Global error handling middleware (must be last)\napp.use(errorHandler);\n\n\n\n\n\n\n\n\n\n// Global users map for socket management {socketId: {userId, nickname, room}}\nlet onlineUsers = new Map();\n\n// User connection counter {userId: connectionCount}\nlet userConnections = new Map();\n\n// Voice channels management\nconst voiceChannels = new Map(); // channelId -> { socketId: { peerConnection, stream } }\n\n// Improved Socket.IO session middleware with proper res object handling\nio.use((socket, next) => {\n  // Create a more complete mock res object if missing\n  if (!socket.request.res) {\n    socket.request.res = {\n      setHeader: () => {},\n      getHeader: () => {},\n      writeHead: () => {},\n      end: () => {},\n      headersSent: false,\n      statusCode: 200\n    };\n  }\n\n  // Apply session middleware with error handling\n  sessionMiddleware(socket.request, socket.request.res, (err) => {\n    if (err) {\n      console.error('Session middleware error for Socket.IO:', err);\n      return next(err);\n    }\n    next();\n  });\n});\n\n// Socket.IO authentication middleware\nio.use(async (socket, next) => {\n  const { csrfToken, sessionId } = socket.handshake.auth;\n  let session = socket.request.session;\n\n  // console.log('🔑 Socket authentication attempt with session and CSRF fingerprint check');\n  // console.log('🔍 Raw socket auth data:', {\n  //   csrfTokenProvided: !!csrfToken,\n  //   sessionIdProvided: !!sessionId,\n  //   sessionIdLength: sessionId?.length,\n  //   sessionIdFromAuth: sessionId\n  // });\n\n  // If sessionId is provided in auth, try to recover the session from MongoDB store\n  if (sessionId && (!session || !session.authenticated)) {\n    // console.log('🔄 Attempting session recovery from MongoDB store using sessionId:', sessionId);\n\n    try {\n      // Load session from MongoDB store using the sessionId from JWT auth\n      const MongoStoreInstance = sessionMiddleware.store;\n      if (MongoStoreInstance && typeof MongoStoreInstance.get === 'function') {\n        const sessionData = await new Promise((resolve, reject) => {\n          MongoStoreInstance.get(sessionId, (err, data) => {\n            if (err) reject(err);\n            else resolve(data);\n          });\n        });\n\n        // console.log('🔄 MongoDB session lookup result:', {\n        //   sessionFound: !!sessionData,\n        //   sessionAuthenticated: sessionData?.authenticated,\n        //   sessionUserId: sessionData?.userId,\n        //   sessionCsrfToken: !!sessionData?.csrfToken,\n        //   csrfTokenMatches: csrfToken && sessionData?.csrfToken && csrfToken === sessionData.csrfToken\n        // });\n\n        if (sessionData && sessionData.authenticated) {\n          // Replace socket.request.session with loaded session\n          socket.request.session = sessionData;\n          session = sessionData;\n          console.log('✅ Socket session recovered from MongoDB');\n        } else {\n          console.log('⚠️ Socket session not found in MongoDB store');\n        }\n      }\n    } catch (error) {\n      console.error('❌ Error loading SOCKET session from MongoDB:', error.message);\n    }\n  }\n\n  console.log('🔓 Fingerprint verification:', {\n    sid: socket.request.sessionId,\n    providedCsrfToken: csrfToken?.substring(0, 8) + '...',\n    sessionCsrfToken: session?.csrfToken?.substring(0, 8) + '...',\n    userAgent: socket.request.session?.userAgent?.substring(0, 20) + '...',\n    loginTime: session?.loginTime,\n    registrationTime: session?.registrationTime\n  });\n\n  // Validate session exists and has authentication\n  if (!session || !session.authenticated || !session.userId) {\n    console.log('❌ Socket authentication failed: No authenticated session found');\n    console.log('📋 Session details:', {\n      sessionId: socket.request.sessionId,\n      session: !!session,\n      authenticated: session?.authenticated,\n      userId: session?.userId\n    });\n    return next(new Error('Session authentication required'));\n  }\n\n  // Validate CSRF token for additional security (must match session's unique CSRF token)\n  if (!csrfToken || !session.csrfToken || csrfToken !== session.csrfToken) {\n    console.log('❌ Socket authentication failed: Invalid CSRF token fingerprint');\n    console.log('🔒 Fingerprint mismatch details:', {\n      provided: csrfToken?.substring(0, 8) + '...',\n      expected: session.csrfToken?.substring(0, 8) + '...',\n      match: csrfToken === session.csrfToken\n    });\n    return next(new Error('CSRF validation failed'));\n  }\n\n  console.log('✅ Socket fingerprint verification successful');\n\n  try {\n    // Verify user exists in database\n    const user = await User.findById(session.userId);\n    if (!user) {\n      console.log('❌ Socket authentication failed: User not found in DB');\n      return next(new Error('User not found in session'));\n    }\n\n    // Handle user status update based on connection count\n    const userId = session.userId;\n    const connectionCount = userConnections.get(userId) || 0;\n    const newConnectionCount = connectionCount + 1;\n    userConnections.set(userId, newConnectionCount);\n\n    // Check if user is banned\n    if (user.isBanned()) {\n      console.log('❌ Socket authentication failed: User is banned', {\n        userId: userId,\n        nickname: user.nickname,\n        banReason: user.banReason,\n        banExpires: user.banExpires\n      });\n      socket.emit('banned', {\n        reason: user.banReason || 'You have been banned from the server',\n        expires: user.banExpires\n      });\n      return next(new Error('User is banned'));\n    }\n\n    // Check if user is muted and enforce mute in chat\n    const isMuted = user.isMuted();\n    console.log('🔇 User mute status checked:', { nickname: user.nickname, isMuted, muteExpires: user.muteExpires });\n\n    // Update user status with connection count tracking\n    const updateResult = await User.findOneAndUpdate(\n      { _id: userId },\n      {\n        $set: {\n          status: newConnectionCount > 0 ? 'online' : 'offline',\n          lastActive: new Date()\n        }\n      },\n      {\n        new: true,\n        runValidators: true\n      }\n    );\n\n    if (updateResult) {\n      console.log(`🔄 Socket auth: User ${user.nickname} status set to online (connections: ${newConnectionCount})`);\n      logger.info(`User status updated to online via socket auth`, {\n        userId: userId,\n        nickname: user.nickname,\n        connections: newConnectionCount,\n        socketId: socket.id,\n        timestamp: new Date()\n      });\n    }\n\n    // Override local user object with updated data\n    user.status = updateResult ? updateResult.status : 'online';\n    user.lastActive = updateResult ? updateResult.lastActive : new Date();\n\n    // Set socket properties for authenticated user\n    socket.userId = session.userId;\n    socket.nickname = session.nickname;\n    socket.role = session.role || 'member';\n    console.log(`🎉 Socket authenticated via session: ${socket.nickname} (userId: ${socket.userId})`);\n    console.log('Socket authentication successful');\n    return next();\n\n  } catch (error) {\n    console.error('❌ Socket authentication error:', error.message);\n    logger.error(`Socket auth failed: ${error.message}`, {\n      socketId: socket.id,\n      sessionId: session?.id,\n      ip: socket.handshake.address\n    });\n    return next(new Error('Socket authentication failed'));\n  }\n});\n\n/**\n * Cleanup inactive connections based on heartbeat\n */\nfunction cleanupInactiveConnections() {\n  const now = Date.now();\n  const timeout = 60000; // 60 seconds timeout\n\n  for (const [socketId, user] of onlineUsers.entries()) {\n    if (now - user.lastHeartbeat > timeout) {\n      console.log(`🧹 Cleansing dead connection for user ${user.nickname}`);\n\n      // Force disconnect socket\n      const socket = io.sockets.sockets.get(socketId);\n      if (socket) {\n        socket.disconnect(true);\n      }\n\n      // Update user connections count\n      const connectionsLeft = (userConnections.get(user.userId) || 0) - 1;\n      userConnections.set(user.userId, Math.max(0, connectionsLeft));\n\n      // Set status to offline if last connection\n      if (connectionsLeft <= 0) {\n        User.findByIdAndUpdate(user.userId, {\n          status: 'offline',\n          lastActive: new Date()\n        }).catch(err => logger.error('Error updating status on cleanup:', err));\n\n        console.log(`🔄 User ${user.nickname} status set to offline (dead connection)`);\n        logger.info(`User status set to offline due to dead connection`, {\n          userId: user.userId,\n          nickname: user.nickname,\n          socketId: socketId\n        });\n      }\n\n      onlineUsers.delete(socketId);\n    }\n  }\n}\n\n// Run cleanup every 30 seconds - DISABLED for test environment\nif (process.env.NODE_ENV !== 'test') {\n  setInterval(cleanupInactiveConnections, 30000);\n}\n\nio.on('connection', async (socket) => {\n  console.log('🚀 Socket connection established');\n  console.log(`👤 User ${socket.nickname} connected`);\n\n  // Track online user\n  onlineUsers.set(socket.id, {\n    userId: socket.userId,\n    nickname: socket.nickname,\n    role: socket.role,\n    room: null,\n    lastHeartbeat: Date.now()\n  });\n\n  // Log current active connections count\n  console.log(`📊 Active socket connections: ${onlineUsers.size} - auth success for ${socket.nickname}`);\n\n  // Enhanced heartbeat mechanism with reconnection logic\n  socket.on('heartbeat', () => {\n    const user = onlineUsers.get(socket.id);\n    if (user) {\n      const now = Date.now();\n      user.lastHeartbeat = now;\n      console.log(`💓 Heartbeat received from user ${socket.nickname} at ${new Date(now).toISOString()}`);\n    } else {\n      logger.warn(`Heartbeat received from unknown socket: ${socket.id}`);\n    }\n  });\n\n  // Update heartbeat on user activity\n  const updateHeartbeat = () => {\n    const user = onlineUsers.get(socket.id);\n    if (user) {\n      user.lastHeartbeat = Date.now();\n    }\n  };\n\n  // Send heartbeat to client periodically\n  const heartbeatInterval = setInterval(() => {\n    if (socket.connected) {\n      socket.emit('heartbeat_request');\n    }\n  }, 15000); // Send heartbeat every 15 seconds\n\n  // Clear interval on disconnect\n  socket.on('disconnect', () => {\n    clearInterval(heartbeatInterval);\n    // ... rest of disconnect logic\n  });\n\n  // Utility function for retrying database operations\n  const retryDatabaseOperation = async (operation, retries = 3) => {\n    for (let i = 0; i <= retries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        if (i === retries) throw error;\n        logger.warn(`Database operation failed, retry ${i + 1}/${retries}:`, error.message);\n        await new Promise(resolve => setTimeout(resolve, 500 * (i + 1))); // Exponential backoff\n      }\n    }\n  };\n\n  socket.on('join_room', async (data) => {\n    updateHeartbeat();\n    const { room } = data;\n    if (!room) {\n      logger.warn('Join room failed: No room specified', {\n        userId: socket.userId,\n        nickname: socket.nickname\n      });\n      socket.emit('error', {\n        message: 'Room name is required',\n        code: 'MISSING_ROOM',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    if (typeof room !== 'string' || room.trim().length === 0) {\n      logger.warn('Join room failed: Invalid room format', {\n        userId: socket.userId,\n        nickname: socket.nickname,\n        room\n      });\n      socket.emit('error', {\n        message: 'Invalid room name format',\n        code: 'INVALID_ROOM_FORMAT',\n        timestamp: new Date().toISOString()\n      });\n      return;\n    }\n\n    try {\n      await retryDatabaseOperation(async () => {\n        // Verify channel exists\n        const channel = await Channel.findOne({ id: room });\n        if (!channel) {\n          logger.warn('Join room failed: Channel not found', {\n            userId: socket.userId,\n            nickname: socket.nickname,\n            room\n          });\n          socket.emit('error', {\n            message: `Channel '${room}' not found`,\n            code: 'CHANNEL_NOT_FOUND',\n            room,\n            timestamp: new Date().toISOString()\n          });\n          throw new Error('Channel not found');\n        }\n\n        // Leave previous room\n        if (socket.room) {\n          socket.leave(socket.room);\n          onlineUsers.set(socket.id, { ...onlineUsers.get(socket.id), room: null });\n\n          // Update online users in previous room\n          const previousRoomUsers = Array.from(onlineUsers.values())\n            .filter(u => u.room === socket.room)\n            .map(u => ({ nickname: u.nickname, role: u.role }));\n          io.to(socket.room).emit('online_users', previousRoomUsers);\n        }\n\n        socket.room = room;\n        socket.join(socket.room);\n\n        // Update user tracking\n        onlineUsers.set(socket.id, {\n          ...onlineUsers.get(socket.id),\n          room: socket.room\n        });\n\n        logger.info(`User ${socket.nickname} joined room ${socket.room}`);\n\n        // Send system message about joining\n        const joinMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} joined the channel.`,\n          type: 'system'\n        });\n        await joinMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: joinMessage.author,\n          channel: joinMessage.channel,\n          text: joinMessage.text,\n          type: joinMessage.type,\n          timestamp: joinMessage.timestamp\n        });\n\n        // Send online users in current room\n        const roomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', roomUsers);\n\n        // Send message history\n        const history = await Message.find({\n          channel: socket.room,\n          $or: [\n            { type: 'public' },\n            { type: 'system' },\n            { author: socket.nickname },\n            { target: socket.nickname }\n          ]\n        })\n          .sort({ timestamp: -1 })\n          .limit(100)\n          .sort({ timestamp: 1 }); // Resort for chronological order\n\n        socket.emit('history', history.map(msg => ({\n          author: msg.author,\n          room: msg.channel,\n          text: msg.text,\n          type: msg.type,\n          target: msg.target,\n          timestamp: msg.timestamp\n        })));\n      });\n\n    } catch (error) {\n      logger.error('Error in join_room after retries:', error);\n      socket.emit('error', {\n        message: 'Failed to join room after multiple attempts',\n        code: 'JOIN_ROOM_FAILED',\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Load history (fallback, if needed)\n  socket.on('get_history', async () => {\n    if (!socket.room) {\n      socket.emit('history', []);\n      return;\n    }\n\n    try {\n      const history = await Message.find({\n        channel: socket.room,\n        $or: [\n          { type: 'public' },\n          { type: 'system' },\n          { author: socket.nickname },\n          { target: socket.nickname }\n        ]\n      })\n        .sort({ timestamp: -1 })\n        .limit(100)\n        .sort({ timestamp: 1 }); // Resort for chronological order\n\n      socket.emit('history', history.map(msg => ({\n        author: msg.author,\n        room: msg.channel, // Using channel instead of room for consistency\n        text: msg.text,\n        type: msg.type,\n        target: msg.target,\n        timestamp: msg.timestamp\n      })));\n    } catch (error) {\n      logger.error('Error getting history:', error);\n      socket.emit('error', { message: 'Failed to load message history' });\n    }\n  });\n\n  // Public message\n  socket.on('message', async (data) => {\n    updateHeartbeat();\n    if (!socket.room || !data.text?.trim()) return;\n\n    // Check if user is muted\n    const currentUser = await User.findById(socket.userId);\n    if (currentUser && currentUser.isMuted()) {\n      socket.emit('error', {\n        message: 'You are muted and cannot send messages',\n        code: 'USER_MUTED',\n        muteExpires: currentUser.muteExpires\n      });\n      return;\n    }\n\n    try {\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: data.text.trim(),\n        type: 'public'\n      });\n\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel, // Keeping 'room' for frontend compatibility\n        text: message.text,\n        timestamp: message.timestamp,\n        status: 'delivered',\n        type: message.type\n      };\n\n      io.to(socket.room).emit('message', messageData);\n      logger.debug(`Message saved from ${socket.nickname} in ${socket.room}`);\n    } catch (error) {\n      logger.error('Error saving message:', error);\n      socket.emit('error', { message: 'Failed to send message' });\n    }\n  });\n\n  // Private message\n  socket.on('private_message', async (data) => {\n    updateHeartbeat();\n    if (!socket.room || !data.to || !data.text?.trim()) return;\n\n    const trimmedText = data.text.trim();\n    const targetNickname = data.to.trim();\n\n    try {\n      logger.debug(`Private message attempt from ${socket.nickname} to ${targetNickname}`, {\n        senderRoom: socket.room,\n        senderSocketId: socket.id,\n        userId: socket.userId\n      });\n\n      // Validate target nickname format\n      if (targetNickname.length === 0 || targetNickname.length > 50) {\n        socket.emit('error', {\n          message: 'Invalid target user nickname',\n          code: 'INVALID_TARGET_NICKNAME'\n        });\n        return;\n      }\n\n      // Prevent self-messaging\n      if (targetNickname === socket.nickname) {\n        socket.emit('error', {\n          message: 'Cannot send private message to yourself',\n          code: 'SELF_MESSAGE_NOT_ALLOWED'\n        });\n        return;\n      }\n\n      // Find target user in same room with detailed logging\n      const targetUser = Array.from(onlineUsers.values()).find(\n        u => u.nickname === targetNickname && u.room === socket.room\n      );\n\n      logger.debug(`Private message target search result for ${targetNickname}`, {\n        targetFound: !!targetUser,\n        targetRoom: targetUser?.room,\n        senderRoom: socket.room,\n        onlineUsersInRoom: Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => ({ nickname: u.nickname, room: u.room }))\n      });\n\n      if (!targetUser) {\n        // Enhanced error message with more context\n        const onlineUsersInSenderRoom = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room)\n          .map(u => u.nickname);\n\n        socket.emit('error', {\n          message: `User '${targetNickname}' is not available in this channel. Available users: ${onlineUsersInSenderRoom.join(', ') || 'none'}`,\n          code: 'TARGET_USER_NOT_IN_ROOM',\n          target: targetNickname,\n          availableUsers: onlineUsersInSenderRoom,\n          senderRoom: socket.room\n        });\n        return;\n      }\n\n      // Create message object\n      const message = new Message({\n        author: socket.nickname,\n        channel: socket.room,\n        text: trimmedText,\n        type: 'private',\n        target: targetNickname\n      });\n      await message.save();\n\n      const messageData = {\n        author: message.author,\n        room: message.channel,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: message.target,\n        status: 'delivered'\n      };\n\n      // Send to target user with error handling\n      const targetSocketId = Array.from(onlineUsers.keys()).find(\n        id => onlineUsers.get(id).nickname === targetNickname\n      );\n\n      if (targetSocketId) {\n        io.to(targetSocketId).emit('private_message', messageData);\n        logger.debug(`Private message sent to target ${targetNickname}`, {\n          targetSocketId: targetSocketId,\n          sender: socket.nickname,\n          room: socket.room,\n          messageId: message._id\n        });\n      } else {\n        logger.warn(`Target user ${targetNickname} found in onlineUsers but socket ID not found`, {\n          targetNickname,\n          room: socket.room,\n          onlineUsersCount: onlineUsers.size,\n          messageId: message._id\n        });\n        // Message still saved to database for later delivery if user reconnects\n      }\n\n      // Send confirmation to sender (without target for privacy)\n      socket.emit('private_message', {\n        author: message.author,\n        room: message.room,\n        text: message.text,\n        timestamp: message.timestamp,\n        type: message.type,\n        target: null, // Hide target from sender's confirmation\n        status: 'sent'\n      });\n\n      logger.info(`Private message sent successfully`, {\n        sender: socket.nickname,\n        target: targetNickname,\n        room: socket.room,\n        messageId: message._id,\n        messageLength: trimmedText.length\n      });\n\n    } catch (error) {\n      logger.error('Error sending private message:', {\n        error: error.message,\n        sender: socket.nickname,\n        target: data.to,\n        room: socket.room,\n        userId: socket.userId,\n        stack: error.stack\n      });\n      socket.emit('error', {\n        message: 'Failed to send private message',\n        code: 'PRIVATE_MESSAGE_FAILED'\n      });\n    }\n  });\n\n  // Speaking\n  socket.on('speaking', (data) => {\n    updateHeartbeat();\n    socket.to(socket.room).emit('speaking', { nickname: socket.nickname, speaking: data.speaking });\n  });\n\n  // Voice channel events\n  socket.on('join_voice_channel', async (data) => {\n    updateHeartbeat();\n    const { channelId } = data;\n    if (!channelId) return;\n\n    try {\n      // Verify channel exists and is voice\n      const channel = await Channel.findOne({ id: channelId, type: 'voice' });\n      if (!channel) {\n        socket.emit('voice_error', { message: 'Voice channel not found' });\n        return;\n      }\n\n      // Initialize voice channel if not exists\n      if (!voiceChannels.has(channelId)) {\n        voiceChannels.set(channelId, new Map());\n      }\n\n      const channelPeers = voiceChannels.get(channelId);\n\n      // Notify others in the channel\n      socket.to(channelId).emit('user_joined_voice', { nickname: socket.nickname, socketId: socket.id });\n\n      // Add socket to voice channel room\n      socket.join(channelId);\n      channelPeers.set(socket.id, { peerConnection: null, stream: null });\n\n      // Update user's voice channel status\n      socket.voiceChannel = channelId;\n\n      logger.info(`User ${socket.nickname} joined voice channel ${channelId}`);\n      socket.emit('voice_joined', { channelId });\n\n    } catch (error) {\n      logger.error('Error joining voice channel:', error);\n      socket.emit('voice_error', { message: 'Failed to join voice channel' });\n    }\n  });\n\n  socket.on('leave_voice_channel', () => {\n    updateHeartbeat();\n    if (!socket.voiceChannel) return;\n\n    const channelId = socket.voiceChannel;\n    const channelPeers = voiceChannels.get(channelId);\n\n    if (channelPeers) {\n      channelPeers.delete(socket.id);\n      if (channelPeers.size === 0) {\n        voiceChannels.delete(channelId);\n      }\n    }\n\n    // Notify others\n    socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n\n    socket.leave(channelId);\n    socket.voiceChannel = null;\n\n    logger.info(`User ${socket.nickname} left voice channel ${channelId}`);\n    socket.emit('voice_left');\n  });\n\n  socket.on('voice_offer', (data) => {\n    const { offer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_offer', {\n      offer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('voice_answer', (data) => {\n    const { answer, targetSocketId } = data;\n    socket.to(targetSocketId).emit('voice_answer', {\n      answer,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  socket.on('ice_candidate', (data) => {\n    const { candidate, targetSocketId } = data;\n    socket.to(targetSocketId).emit('ice_candidate', {\n      candidate,\n      from: socket.id,\n      fromNickname: socket.nickname\n    });\n  });\n\n  // Disconnect\n  socket.on('disconnect', async () => {\n    logger.info(`User ${socket.nickname} disconnected`);\n\n    try {\n      const userId = socket.userId;\n\n      // Decrease connection count for this user\n      if (userId) {\n        const currentCount = userConnections.get(userId) || 0;\n        const newCount = Math.max(0, currentCount - 1);\n        userConnections.set(userId, newCount);\n\n        logger.info(`User ${socket.nickname} disconnected (remaining connections: ${newCount})`, {\n          userId: userId,\n          socketId: socket.id,\n          connectionsLeft: newCount\n        });\n      }\n\n      // Leave voice channel if in one\n      if (socket.voiceChannel) {\n        const channelId = socket.voiceChannel;\n        const channelPeers = voiceChannels.get(channelId);\n\n        if (channelPeers) {\n          channelPeers.delete(socket.id);\n          if (channelPeers.size === 0) {\n            voiceChannels.delete(channelId);\n          }\n        }\n\n        // Notify others\n        socket.to(channelId).emit('user_left_voice', { nickname: socket.nickname, socketId: socket.id });\n      }\n\n      if (socket.room) {\n        socket.leave(socket.room);\n\n        // Create leave message\n        const leaveMessage = new Message({\n          author: 'System',\n          channel: socket.room,\n          text: `${socket.nickname} left the channel.`,\n          type: 'system'\n        });\n        await leaveMessage.save();\n\n        io.to(socket.room).emit('message', {\n          author: leaveMessage.author,\n          room: leaveMessage.channel,\n          text: leaveMessage.text,\n          type: leaveMessage.type,\n          timestamp: leaveMessage.timestamp\n        });\n\n        // Update online users list\n        const roomUsers = Array.from(onlineUsers.values())\n          .filter(u => u.room === socket.room && u.userId !== socket.userId)\n          .map(u => ({ nickname: u.nickname, role: u.role }));\n        io.to(socket.room).emit('online_users', roomUsers);\n      }\n\n      // Remove from tracking\n      onlineUsers.delete(socket.id);\n\n      // Log current connections after disconnect\n      logger.info(`After disconnect, active socket connections: ${onlineUsers.size}`);\n\n      // Update user status in database if this was the last connection\n      if (userId) {\n        const remainingConnections = userConnections.get(userId) || 0;\n        if (remainingConnections === 0) {\n          await User.findByIdAndUpdate(userId, {\n            status: 'offline',\n            lastActive: new Date()\n          });\n          console.log(`🔄 User ${socket.nickname} status set to offline (last connection)`);\n          logger.info(`User status set to offline (last connection)`, {\n            userId: userId,\n            nickname: socket.nickname\n          });\n        } else {\n          // Update lastActive but keep status online\n          await User.findByIdAndUpdate(userId, {\n            lastActive: new Date()\n          });\n          console.log(`✅ User ${socket.nickname} still online (${remainingConnections} connections left)`);\n          logger.info(`User remains online`, {\n            userId: userId,\n            nickname: socket.nickname,\n            connectionsLeft: remainingConnections\n          });\n        }\n      }\n\n    } catch (error) {\n      logger.error('Error in disconnect handler:', error);\n    }\n });\n});\n\n// Initialize database and start server (duplicate removed)\nconst initializeServer = async () => {\n  try {\n    // Connect to MongoDB\n    await connectDB();\n\n    // Create default channels if they don't exist\n    const defaultChannels = [\n      { id: 'general', name: 'General', type: 'text', createdBy: 'system' },\n      { id: 'voice-chat', name: 'Voice Chat', type: 'voice', createdBy: 'system' }\n    ];\n\n    for (const channelData of defaultChannels) {\n      await Channel.findOneAndUpdate(\n        { id: channelData.id },\n        channelData,\n        { upsert: true, new: true }\n      );\n    }\n\n    logger.info('Default channels initialized');\n\n    // Start server\n    const PORT = process.env.PORT || 3001;\n    server.listen(PORT, '0.0.0.0', () => {\n      logger.info(`Server running on port ${PORT}`);\n      console.log(`Server running on port ${PORT}`);\n    });\n\n  } catch (error) {\n    logger.error('Failed to initialize server:', error);\n    process.exit(1);\n  }\n};\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  logger.info('Received SIGINT, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGTERM', async () => {\n  logger.info('Received SIGTERM, shutting down gracefully...');\n  await closeDB();\n  io.close(() => {\n    logger.info('Server shut down');\n    process.exit(0);\n  });\n});\n\n// Optimize critical server functions\nconst optimizedInitializeDatabase = asyncOptimize(initializeServer, {\n  concurrency: 1,\n  timeout: 60000,\n  slowThreshold: 10000\n});\n\n// Start the server with async optimization\nif (process.env.NODE_ENV !== 'test') {\n  optimizedInitializeDatabase().catch(err => {\n    logger.error('Unhandled error during server startup:', err);\n    process.exit(1);\n  });\n}\n\n// Memory cleanup on long-running operations\nsetInterval(() => {\n  if (global.gc) {\n    global.gc();\n    logger.debug('Manual garbage collection triggered');\n  }\n}, 300000); // Every 5 minutes\n\n// Handle uncaught exceptions with circuit breaker protection\nprocess.on('uncaughtException', (error) => {\n  logger.error('Uncaught Exception:', error);\n  // Don't exit immediately, let circuit breaker handle recovery\n  setTimeout(() => {\n    if (externalServiceBreaker.databaseBreaker.failureCount > 10) {\n      logger.error('Multiple uncaught exceptions detected, forcing graceful shutdown');\n      process.exit(1);\n    }\n  }, 1000);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Don't exit, just log and let circuit breaker handle\n});\n\n// Graceful shutdown with resource cleanup\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, starting graceful shutdown...');\n\n  try {\n    // Close external service connections\n    const circuitStatus = getCircuitBreakerStatuses();\n    logger.info('Circuit breaker final status:', circuitStatus);\n\n    // Clean up any remaining resources\n    await closeDB();\n\n    // Log final metrics\n    const finalMetrics = performanceMonitor.getDetailedStats();\n\n    logger.info('Final performance metrics:', {\n      uptime: finalMetrics.uptime,\n      totalRequests: finalMetrics.endpointStats\n        ? Object.values(finalMetrics.endpointStats).reduce((acc, endpoint) =>\n            acc + (endpoint.count || 0), 0)\n        : 0,\n      memoryPeak: finalMetrics.memory?.heapTotal || 0\n    });\n\n    io.close(() => {\n      logger.info('Server graceful shutdown complete');\n      process.exit(0);\n    });\n  } catch (error) {\n    logger.error('Error during graceful shutdown:', error);\n    process.exit(1);\n  }\n});\n\n// Periodic health self-assessment\nsetInterval(() => {\n  const healthData = performanceMonitor.getHealthData();\n\n  // Self-monitor critical metrics\n  if (healthData.requests.averageResponseTime > 5000) {\n    logger.warn('🚨 Self-monitor: High average response time detected', {\n      avgTime: `${healthData.requests.averageResponseTime}ms`,\n      threshold: '5000ms',\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  if (healthData.memory.usagePercent > 0.9) {\n    logger.warn('🚨 Self-monitor: High memory usage detected', {\n      usage: healthData.memory.percentage,\n      threshold: '90%',\n      timestamp: new Date().toISOString()\n    });\n\n    // Trigger proactive cleanup\n    if (global.gc) {\n      global.gc();\n      logger.info('🧹 Proactive garbage collection triggered');\n    }\n  }\n\n  // Check circuit breaker status\n  const circuitStatus = getCircuitBreakerStatuses();\n  if (circuitStatus.database?.state === 'open') {\n    logger.warn('🚨 Self-monitor: Database circuit breaker is OPEN', circuitStatus.database);\n  }\n\n  if (circuitStatus.redis?.state === 'open') {\n    logger.warn('🚨 Self-monitor: Redis circuit breaker is OPEN', circuitStatus.redis);\n  }\n\n}, 60000); // Check every minute\n\nmodule.exports = app;\n"],"mappings":"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","ignoreList":[]}