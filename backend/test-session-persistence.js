#!/usr/bin/env node

const io = require('socket.io-client');
const axios = require('axios');

const BASE_URL = 'http://127.0.0.1:3001';

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π MongoDB –Ω–∞ localhost:3001\n');

// Create axios instance with cookie support
const client = axios.create({
  baseURL: BASE_URL,
  withCredentials: true,
  headers: {
    'User-Agent': 'Session-Test-Agent/1.0'
  }
});

// Test user data
const testUser = {
  nickname: `testuser_${Date.now()}`,
  email: `test_${Date.now()}@example.com`,
  password: 'TestPass123!'
};

let jwtToken, csrfToken, sessionId, socket;

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testSessionPersistence() {
  console.log('üß™ –¢–ï–°–¢ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏\n');

  try {
    // Registration
    const regResponse = await client.post('/api/register', testUser);
    console.log('üì• –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', {
      status: regResponse.status,
      hasToken: !!regResponse.data.token,
      hasUser: !!regResponse.data.user,
      hasSession: !!regResponse.data.session
    });

    if (regResponse.status !== 201) throw new Error('Registration failed');

    jwtToken = regResponse.data.token;
    csrfToken = regResponse.data.session.csrfToken;
    sessionId = regResponse.data.session.id;

    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', {
      userId: regResponse.data.user.id,
      nickname: regResponse.data.user.nickname,
      sessionId: sessionId,
      loginTime: regResponse.data.session.loginTime
    });

    console.log('\n------------------------------------------------------\n');

    console.log('üß™ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ persistence —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É request\'–∞–º–∏\n');

    // Set auth header for subsequent requests
    client.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;

    // First request
    console.log('üåê –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)...');
    const firstResp = await client.get('/api/users');
    console.log('‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å—Ç–∞—Ç—É—Å:', firstResp.status);

    await delay(1000);

    // Second request
    console.log('üåê –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤)...');
    const secondResp = await client.get('/api/channels');
    console.log('‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å—Ç–∞—Ç—É—Å:', secondResp.status);

    console.log('üîÑ –û–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ–¥–Ω—É persistent —Å–µ—Å—Å–∏—é');

    console.log('\n------------------------------------------------------\n');

    console.log('üß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Socket.IO —Å fingerprint —Å–µ—Å—Å–∏–∏\n');

    // Socket.IO connection
    socket = io(BASE_URL, {
      forceNew: true,
      transports: ['websocket', 'polling'],
      auth: {
        csrfToken: csrfToken
      },
      extraHeaders: {
        cookie: client.defaults.headers?.cookie
      }
    });

    await new Promise((resolve, reject) => {
      socket.on('connect', () => {
        console.log('üîå Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        console.log('üéâ Fingerprint –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Socket.IO —É—Å–ø–µ—à–Ω–∞ —Å CSRF —Ç–æ–∫–µ–Ω–æ–º');
        resolve();
      });

      socket.on('connect_error', (error) => {
        console.error('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Socket.IO –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
        reject(error);
      });

      setTimeout(() => reject(new Error('Socket connection timeout')), 10000);
    });

    console.log('\n------------------------------------------------------\n');

    console.log('üß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ logout –∏ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏\n');

    // Complete logout
    const logoutResp = await client.post('/api/logout_complete');
    console.log('üö™ Complete logout —É—Å–ø–µ—à–Ω—ã–π:', JSON.stringify(logoutResp.data, null, 2));

    // Disconnect socket
    socket.disconnect();
    console.log('üîå Socket –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ logout');

    console.log('\n------------------------------------------------------\n');

    console.log('üß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ logout\n');

    // Login again - should create new session
    const loginResp = await client.post('/api/login', {
      identifier: testUser.email,
      password: testUser.password
    });

    const newSessionId = loginResp.data.session.id;

    console.log('üîë –ü–æ–≤—Ç–æ—Ä–Ω—ã–π login —É—Å–ø–µ—à–Ω—ã–π:', {
      –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π_sessionId: sessionId,
      –Ω–æ–≤—ã–π_sessionId: newSessionId,
      —Å–µ—Å—Å–∏–∏_—Ä–∞–∑–Ω—ã–µ: sessionId !== newSessionId
    });

    if (sessionId === newSessionId) {
      console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–µ—Å—Å–∏–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã! Logout –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—Å—Ç–∏–ª —Å–µ—Å—Å–∏—é');
    } else {
      console.log('‚úÖ –°–µ—Å—Å–∏–∏ —Ä–∞–∑–Ω—ã–µ: logout –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—Å—Ç–∏–ª, login —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é');
    }

    console.log('\n------------------------------------------------------\n');
    console.log('üéØ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');

    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—é sessions');
    console.log('‚úÖ –°–µ—Å—Å–∏–∏ persistent –º–µ–∂–¥—É request\'–∞–º–∏');
    console.log('‚úÖ Session middleware –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏–∏');
    console.log('‚úÖ Fingerprint Socket.IO —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ Logout –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏–∏');

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
      console.error('Response status:', error.response.status);
    }
    process.exit(1);
  }
}

// Run the test
testSessionPersistence().then(() => {
  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  process.exit(0);
}).catch(error => {
  console.error('\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error.message);
  process.exit(1);
});