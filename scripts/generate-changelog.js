#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * –°–∏—Å—Ç–µ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –∏–∑ Git –∫–æ–º–º–∏—Ç–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç conventional commits –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç —Ä–µ–ª–∏–∑–Ω–æ—Ç—ã
 */

class ChangelogGenerator {
    constructor() {
        this.projectRoot = path.resolve(__dirname, '..');
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog
    async generateChangelog() {
        console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog...');

        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            const latestTag = this.getLatestTag();
            const previousTag = latestTag ? this.getPreviousTag(latestTag) : null;
            const range = previousTag ? `${previousTag}..HEAD` : '';

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
            const commits = this.getCommits(range);
            const conventionalCommits = this.parseConventionalCommits(commits);

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            const organizedChanges = this.organizeChanges(conventionalCommits);

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ changelog
            const changelogContent = this.formatChangelog(organizedChanges, latestTag);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ changelog
            this.updateChangelogFile(changelogContent);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ Unreleased
            this.updateUnreleasedSection();

            console.log('‚úÖ Changelog —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog:', error);
            process.exit(1);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
    getLatestTag() {
        try {
            return execSync('git describe --tags --abbrev=0 2>/dev/null', {
                encoding: 'utf8'
            }).trim();
        } catch (error) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤');
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞
    getPreviousTag(latestTag) {
        try {
            const tags = execSync('git tag --sort=-version:refname', {
                encoding: 'utf8'
            }).trim().split('\n');

            const currentIndex = tags.indexOf(latestTag);
            return currentIndex > 0 ? tags[currentIndex - 1] : null;
        } catch (error) {
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    getCommits(range) {
        try {
            const rangeArg = range ? range : '--all';
            const command = `git log ${rangeArg} --pretty=format:'%H|%s|%an|%ad|%D' --date=format:'%Y-%m-%d %H:%M:%S'`;
            const output = execSync(command, { encoding: 'utf8' });

            return output.split('\n')
                .filter(line => line.trim())
                .map(line => {
                    const [hash, subject, author, date, refs] = line.split('|');

                    return {
                        hash,
                        subject,
                        author,
                        date,
                        refs: refs || '',
                        isMerge: subject.startsWith('Merge'),
                        isBreaking: subject.includes('BREAKING CHANGE')
                    };
                });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤:', error);
            return [];
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ conventional commits
    parseConventionalCommits(commits) {
        const conventionalPattern = /^(\w+)(?:\(([^)]+)\))?!?:\s*(.+)$/;

        return commits.map(commit => {
            const match = commit.subject.match(conventionalPattern);

            if (match) {
                const [, type, scope, description] = match;

                return {
                    ...commit,
                    type,
                    scope: scope || null,
                    description,
                    conventional: true
                };
            }

            return {
                ...commit,
                conventional: false,
                description: commit.subject
            };
        });
    }

    // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
    organizeChanges(commits) {
        const breakingChanges = [];
        const typeGroups = {
            'feat': { title: '‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', items: [] },
            'fix': { title: 'üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', items: [] },
            'docs': { title: 'üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', items: [] },
            'style': { title: 'üíé –°—Ç–∏–ª—å –∫–æ–¥–∞', items: [] },
            'refactor': { title: '‚ôªÔ∏è  –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', items: [] },
            'perf': { title: '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', items: [] },
            'test': { title: 'üß™ –¢–µ—Å—Ç—ã', items: [] },
            'chore': { title: 'üîß –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', items: [] },
            'ci': { title: 'ü§ñ CI/CD', items: [] },
            'build': { title: 'üì¶ –°–±–æ—Ä–∫–∞', items: [] }
        };

        const otherChanges = [];

        commits
            .filter(commit => !commit.isMerge)
            .forEach(commit => {
                if (commit.isBreaking) {
                    breakingChanges.push(commit);
                }

                if (commit.conventional && typeGroups[commit.type]) {
                    typeGroups[commit.type].items.push(commit);
                } else {
                    otherChanges.push(commit);
                }
            });

        return { breakingChanges, typeGroups, otherChanges };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ changelog
    formatChangelog(organizedChanges, latestTag) {
        const { breakingChanges, typeGroups, otherChanges } = organizedChanges;

        let content = `# –ò–∑–º–µ–Ω–µ–Ω–∏—è\n\n`;

        if (latestTag) {
            content += `## [${latestTag}] - ${new Date().toISOString().split('T')[0]}\n\n`;
        } else {
            content += `## [Unreleased]\n\n`;
        }

        // Breaking Changes
        if (breakingChanges.length > 0) {
            content += `### üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n`;
            breakingChanges.forEach(commit => {
                content += `- **BREAKING:** ${commit.description} (${commit.hash.substring(0, 7)})\n`;
            });
            content += '\n';
        }

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        Object.entries(typeGroups).forEach(([type, group]) => {
            if (group.items.length > 0) {
                content += `### ${group.title}\n\n`;
                group.items.forEach(commit => {
                    const scopeInfo = commit.scope ? `**${commit.scope}:** ` : '';
                    content += `- ${scopeInfo}${commit.description} (${commit.hash.substring(0, 7)})\n`;
                });
                content += '\n';
            }
        });

        // –î—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (otherChanges.length > 0) {
            content += `### üîÑ –ü—Ä–æ—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n`;
            otherChanges.forEach(commit => {
                content += `- ${commit.description} (${commit.hash.substring(0, 7)})\n`;
            });
            content += '\n';
        }

        // –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã
        const contributors = this.getContributors();
        if (contributors.length > 0) {
            content += `### üë• –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã\n\n`;
            contributors.forEach(contributor => {
                content += `- ${contributor}\n`;
            });
            content += '\n';
        }

        // –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const metrics = this.generateChangeMetrics(typeGroups, breakingChanges);
        content += this.formatMetrics(metrics);

        return content;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
    getContributors() {
        try {
            const output = execSync('git log --format="%an" | sort | uniq', {
                encoding: 'utf8'
            });
            return output.trim().split('\n');
        } catch (error) {
            return [];
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    generateChangeMetrics(typeGroups, breakingChanges) {
        const totalCommits = Object.values(typeGroups).reduce((sum, group) =>
            sum + group.items.length, 0);

        return {
            totalCommits,
            breakingChanges: breakingChanges.length,
            featureCount: typeGroups.feat.items.length,
            bugFixCount: typeGroups.fix.items.length,
            refactorCount: typeGroups.refactor.items.length,
            testCount: typeGroups.test.items.length,
            docsCount: typeGroups.docs.items.length
        };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ Markdown
    formatMetrics(metrics) {
        let metricsSection = `### üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–ª–∏–∑–∞\n\n`;
        metricsSection += `| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |\n`;
        metricsSection += `|---------|---------|\n`;
        metricsSection += `| –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤ | ${metrics.totalCommits} |\n`;
        metricsSection += `| –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è | ${metrics.breakingChanges} |\n`;
        metricsSection += `| –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ | ${metrics.featureCount} |\n`;
        metricsSection += `| –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è | ${metrics.bugFixCount} |\n`;
        metricsSection += `| –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ | ${metrics.refactorCount} |\n`;
        metricsSection += `| –¢–µ—Å—Ç—ã | ${metrics.testCount} |\n`;
        metricsSection += `| –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è | ${metrics.docsCount} |\n`;
        metricsSection += '\n';

        return metricsSection;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ CHANGELOG.md
    updateChangelogFile(newContent) {
        const changelogPath = path.join(this.projectRoot, 'CHANGELOG.md');

        // –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        let existingContent = '';
        if (fs.existsSync(changelogPath)) {
            existingContent = fs.readFileSync(changelogPath, 'utf8');

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å–µ–∫—Ü–∏–∏ Unreleased –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const unreleasedPattern = /(## \[Unreleased\][^#]*)(## \[[^\]]+\])/s;
            if (unreleasedPattern.test(existingContent)) {
                existingContent = existingContent.replace(unreleasedPattern, '$2');
            }
        }

        // –ü—Ä–µ—Ñ–∏–∫—Å "–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
        const header = `# –ò–∑–º–µ–Ω–µ–Ω–∏—è\n\n–í—Å–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ Chat-JS.\n\n`;

        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const fullContent = header + newContent + (existingContent ? existingContent : '');

        fs.writeFileSync(changelogPath, fullContent, 'utf8');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ Unreleased (–¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    async updateUnreleasedSection() {
        const changelogPath = path.join(this.projectRoot, 'CHANGELOG.md');

        if (!fs.existsSync(changelogPath)) {
            return;
        }

        const content = fs.readFileSync(changelogPath, 'utf8');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ Unreleased —É–∂–µ –µ—Å—Ç—å
        if (content.includes('## [Unreleased]')) {
            return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ Unreleased –≤ –Ω–∞—á–∞–ª–æ
        const unreleasedSection = `## [Unreleased]\n\n### üöß –†–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n- –ë–µ–∑ –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n`;
        const updatedContent = content.replace('# –ò–∑–º–µ–Ω–µ–Ω–∏—è\n\n', `# –ò–∑–º–µ–Ω–µ–Ω–∏—è\n\n${unreleasedSection}`);

        fs.writeFileSync(changelogPath, updatedContent, 'utf8');
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞
    createNewRelease(version) {
        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ Git —Ç–µ–≥–∞
            execSync(`git tag -a ${version} -m "Release ${version}"`, { stdio: 'inherit' });

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞
            this.generateChangelog();

            console.log(`üéâ –†–µ–ª–∏–∑ ${version} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–º–∏—Ç–æ–≤
    checkCommitConvention(commitMessage) {
        const conventionalPattern = /^(\w+)(?:\(([^)]+)\))?!?:\s*(.+)$/;
        return conventionalPattern.test(commitMessage.trim());
    }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const generator = new ChangelogGenerator();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);

    if (args.includes('--release') && args.length > 1) {
        const versionIndex = args.indexOf('--release') + 1;
        if (args[versionIndex]) {
            generator.createNewRelease(args[versionIndex]);
            return;
        }
    }

    generator.generateChangelog();
}

module.exports = ChangelogGenerator;