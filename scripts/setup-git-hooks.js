#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Chat-JS
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç pre-commit –∏ pre-push hooks —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
 */

class GitHooksSetup {
    constructor() {
        this.projectRoot = path.resolve(__dirname, '..');
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks
    async setupHooks() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks –¥–ª—è Chat-JS...');

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            this.checkGitRepository();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hook path
            this.setupHooksPath();

            // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ hooks –≤ .git/hooks
            this.copyHooks();

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            this.validateConfigurations();

            // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            this.createHelperScripts();

            console.log('‚úÖ Git hooks —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
            console.log('');
            console.log('üìã –ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç:');
            console.log('‚Ä¢ pre-commit: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞');
            console.log('‚Ä¢ pre-push: –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ push');
            console.log('‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
            console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Ç–µ—Å—Ç–æ–≤');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git hooks:', error.message);
            process.exit(1);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    checkGitRepository() {
        try {
            execSync('git rev-parse --git-dir', { stdio: 'pipe' });
        } catch (error) {
            throw new Error('–≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Git —Å–Ω–∞—á–∞–ª–∞: git init');
        }

        console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks path
    setupHooksPath() {
        try {
            execSync('git config core.hooksPath .githooks', { stdio: 'inherit' });
            console.log('‚úÖ Git hooks path –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ .githooks');
        } catch (error) {
            // –ï—Å–ª–∏ core.hooksPath –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            console.log('‚ö†Ô∏è core.hooksPath –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');
        }
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ hooks –≤ .git/hooks (fallback)
    copyHooks() {
        const gitHooksDir = path.join(this.projectRoot, '.git', 'hooks');
        const customHooksDir = path.join(this.projectRoot, '.githooks');
        const hooks = ['pre-commit', 'pre-push'];

        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(gitHooksDir)) {
            fs.mkdirSync(gitHooksDir, { recursive: true });
        }

        hooks.forEach(hook => {
            const sourcePath = path.join(customHooksDir, hook);
            const targetPath = path.join(gitHooksDir, hook);

            if (fs.existsSync(sourcePath)) {
                fs.copyFileSync(sourcePath, targetPath);
                console.log(`‚úÖ Hook ${hook} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ .git/hooks/`);
            } else {
                console.warn(`‚ö†Ô∏è Hook ${hook} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .githooks/`);
            }
        });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    validateConfigurations() {
        console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...');

        const validations = [
            {
                name: 'Node.js version',
                check: () => {
                    const version = parseInt(process.version.split('.')[0].substring(1));
                    return version >= 16;
                },
                message: 'Node.js 16+ required'
            },
            {
                name: 'Scripts executable',
                check: () => {
                    return ['generate-docs.js', 'update-coverage.js'].every(script =>
                        fs.existsSync(path.join(this.projectRoot, 'scripts', script))
                    );
                },
                message: 'Missing documentation scripts'
            },
            {
                name: 'Backend dependencies',
                check: () => {
                    const pkgPath = path.join(this.projectRoot, 'backend', 'package.json');
                    return fs.existsSync(pkgPath);
                },
                message: 'Backend package.json not found'
            },
            {
                name: 'Frontend dependencies',
                check: () => {
                    const pkgPath = path.join(this.projectRoot, 'frontend', 'package.json');
                    return fs.existsSync(pkgPath);
                },
                message: 'Frontend package.json not found'
            }
        ];

        let allValid = true;

        validations.forEach(validation => {
            if (validation.check()) {
                console.log(`‚úÖ ${validation.name}: OK`);
            } else {
                console.log(`‚ùå ${validation.name}: ${validation.message}`);
                allValid = false;
            }
        });

        if (!allValid) {
            throw new Error('–ù–µ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã');
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    createHelperScripts() {
        const helperScripts = {
            // –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ hooks
            'no-hooks-commit.bat': `@echo off
echo Committing without hooks...
git commit --no-verify %*`,

            'no-hooks-push.bat': `@echo off
echo Pushing without hooks...
git push --no-verify %*`,

            'bypass-hooks.sh': `#!/bin/bash
echo "Committing without hooks..."
git commit --no-verify "$@"`,

            'bypass-push.sh': `#!/bin/bash
echo "Pushing without hooks..."
git push --no-verify "$@"`
        };

        const scriptsDir = path.join(this.projectRoot, 'scripts');
        if (!fs.existsSync(scriptsDir)) {
            fs.mkdirSync(scriptsDir, { recursive: true });
        }

        Object.entries(helperScripts).forEach(([filename, content]) => {
            const filepath = path.join(scriptsDir, filename);
            fs.writeFileSync(filepath, content, 'utf8');

            // –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è Unix —Å–∏—Å—Ç–µ–º
            if (filename.endsWith('.sh')) {
                fs.chmodSync(filepath, '755');
            }
        });

        console.log('‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    installDependencies() {
        console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

        const dirs = ['backend', 'frontend'];

        dirs.forEach(dir => {
            const pkgPath = path.join(this.projectRoot, dir, 'package.json');
            const nodeModules = path.join(this.projectRoot, dir, 'node_modules');

            if (fs.existsSync(pkgPath) && !fs.existsSync(nodeModules)) {
                console.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ ${dir}...`);
                try {
                    execSync(`cd ${dir} && npm install --silent`, { stdio: 'inherit' });
                    console.log(`‚úÖ ${dir} dependencies installed`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dependencies –≤ ${dir}`);
                }
            }
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    showHelp() {
        console.log(`
üéØ Git Hooks setup complete!

üìã Available commands:
‚Ä¢ npm run hooks:setup       - Setup Git hooks (this command)
‚Ä¢ npm run hooks:install     - Install dependencies + setup hooks
‚Ä¢ npm run commit:no-hooks   - Commit without hooks validation
‚Ä¢ npm run push:no-hooks     - Push without hooks validation

üîß Manual alternatives:
‚Ä¢ ./scripts/bypass-hooks.sh  - Commit bypass script
‚Ä¢ ./scripts/bypass-push.sh   - Push bypass script

‚öôÔ∏è Configuration files:
‚Ä¢ .githooks/                - Custom hooks directory
‚Ä¢ scripts/                   - Documentation and helper scripts

‚úÖ Quality gates:
‚Ä¢ ESLint code quality checks
‚Ä¢ Jest unit test execution
‚Ä¢ Cypress E2E test validation
‚Ä¢ Coverage metrics check
‚Ä¢ Documentation auto-update
‚Ä¢ Commit message format validation`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ package.json
function updatePackageJson() {
    const pkgPath = path.join(__dirname, '..', 'package.json');
    let pkg = {};

    if (fs.existsSync(pkgPath)) {
        pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
    }

    if (!pkg.scripts) {
        pkg.scripts = {};
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ hook –∫–æ–º–∞–Ω–¥
    pkg.scripts['hooks:setup'] = 'node scripts/setup-git-hooks.js';
    pkg.scripts['hooks:install'] = 'node scripts/setup-git-hooks.js && npm run install:all';
    pkg.scripts['install:all'] = 'cd backend && npm install && cd ../frontend && npm install';
    pkg.scripts['commit:no-hooks'] = 'git commit --no-verify';
    pkg.scripts['push:no-hooks'] = 'git push --no-verify';

    // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    pkg.scripts['docs:generate'] = 'node scripts/generate-docs.js';
    pkg.scripts['docs:coverage'] = 'node scripts/update-coverage.js';
    pkg.scripts['docs:changelog'] = 'node scripts/generate-changelog.js';

    // –ü–æ–ª–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –Ω–∞–±–æ—Ä
    pkg.scripts['prepare'] = 'npm run hooks:setup';
    pkg.scripts['postinstall'] = 'npm run hooks:setup';

    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
    console.log('‚úÖ package.json –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ hooks');
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const setup = new GitHooksSetup();

    if (process.argv.includes('--help')) {
        setup.showHelp();
        process.exit(0);
    }

    if (process.argv.includes('--install-deps')) {
        setup.installDependencies();
    }

    setup.setupHooks();
    updatePackageJson();
    setup.showHelp();
}

module.exports = GitHooksSetup;